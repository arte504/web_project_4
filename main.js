!function(){"use strict";const e=(e,t)=>fetch(e,t).then((e=>{if(e.ok)return e.json();Promise.reject(`ERROR: ${e.statusText}`)})),t=new class{constructor(e,t){this.baseUrl=e,this.headers=t}getInitialCards(){return e(`${this._baseUrl}/cards`,{headers:this._headers})}getUserInfo(){return e(`${this._baseUrl}/users/me`,{headers:this._headers})}setUserAvatar(t){return e(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:t.link})})}sendNewData(t){return e(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:t.name,job:t.job})})}createNewCard(t){return e(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:t.name,link:t.link})})}removeCard(t){return e(`${this._baseUrl}/cards/${t}`,{method:"DELETE",headers:this._headers})}addLike(t){return e(`${this._baseUrl}/cards/likes/${t}`,{method:"PUT",headers:this._headers})}removeLike(t){return e(`${this._baseUrl}/cards/likes/${t}`,{method:"DELETE",headers:this._headers})}}({baseUrl:"https://around.nomoreparties.co/v1/group-2",headers:{authorization:"709a0d9d-db06-4890-a594-b07e7309a353"}});class s{constructor({cardData:e,user:t,onCardClick:s,removeHandler:r,likeHandler:i},n){this._name=e.name,this._link=e.link,this._cardId=e._id,this._ownerId=e.owner._id,this._userID=t,this._likes=e.likes,this._cardSelector=n,this._onCardClick=s,this._likeHandler=i,this._removeHandler=r}_getTemplate(){return document.querySelector("#card__template").content.querySelector(".card").cloneNode(!0)}deleteCard(){this._item.remove(),this._item=null}_renderLikes(){this.isLiked()?this._item.querySelector(".card__like-button").classList.add("card__like-button_active"):this._item.querySelector(".card__like-button").classList.remove("card__like-button_active"),this._item.querySelector(".card__like-counter").textContent=this._likes.length}isLiked(){return this._likes.some((e=>e._id===this._userId))}updateLikes(e){this._likes=e,this._renderLikes()}_setEventListeners(){this._item.querySelector(".card__like-button").addEventListener("click",(e=>{this._likeCard(e)})),this._item.querySelector(".card__delete-button").addEventListener("click",(()=>{this._removeHandler(this._cardId)})),this._cardImage.addEventListener("click",(e=>{this._onCardClick(e)}))}generateCard(){return this._item=this._getTemplate(),this._ownerId!==this._userId&&this._element.querySelector(".card__delete-button").classList.add("card__delete-button_hidden"),this._cardImage=this._item.querySelector(".card__image"),this._item.querySelector(".card__title").textContent=this._name,this._cardImage.src=this._link,this._cardImage.alt=`Image of  ${this._name} `,this._renderLikes(),this._setEventListeners(),this._item}}class r{constructor(e,t){this._formConfig=e,this._formElement=t}_showInputError=(e,t)=>{const{inputErrorClass:s,errorMessageClass:r}=this._formConfig,i=this._formElement.querySelector(` #${e.id}_error `);i.textContent=t,i.classList.add(r),e.classList.add(s)};_hideInputError=e=>{const{inputErrorClass:t,errorMessageClass:s}=this._formConfig,r=this._formElement.querySelector(` #${e.id}_error `);r.textContent="",r.classList.remove(s),e.classList.remove(t)};resetValidation(){this.inputs.forEach((e=>{this._hideInputError(e)})),this._toggleSubmitButton()}_checkInput=e=>{e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)};_checkIfFormValid=()=>this.inputs.every((e=>e.validity.valid));_toggleSubmitButton(){const{inactiveButtonClass:e,submitButtonSelector:t}=this._formConfig,s=this._formElement.querySelector(t);this._checkIfFormValid()?(s.disabled=!1,s.classList.remove(e)):(s.disabled=!0,s.classList.add(e))}_setEventListeners=()=>{const{inputSelector:e}=this._formConfig;return this.inputs=Array.from(this._formElement.querySelectorAll(e)),this.inputs.forEach((e=>{e.addEventListener("input",(()=>{this._checkInput(e),this._toggleSubmitButton()}))})),this._formElement};enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}}const i=document.querySelector(".profile__edit-button"),n=document.forms.profile,o=(n.elements.name,n.elements.job,document.querySelector(".modal__close-button_type_edit"),document.querySelector(".profile__image-edit")),a=document.querySelector(".modal_type_avatar"),l=(document.querySelector(".modal__input_type_avatar"),document.querySelector(".modal__close-button_type_avatar"),document.querySelector(".profile__add-button")),d=document.querySelector(".modal_type_add-card"),c=(document.querySelector(".modal__input_type_name"),document.querySelector(".modal__input_type_link"),document.querySelector(".modal__close-button_type_add-card"),document.forms.add),_=(c.elements.title,c.elements.link,document.querySelector(".modal__submit-button"),document.querySelector(".cards__grid"),document.querySelector(".modal_type_big-image"),document.querySelector(".modal__big-image"),document.querySelector(".modal__image-caption"),document.querySelector(".modal__close-button_type_big-image"),{formSelector:".modal__container",inputSelector:".modal__input",submitButtonSelector:".modal__submit-button",inactiveButtonClass:"modal__submit-button_disabled",inputErrorClass:"modal__input_error",errorMessageClass:"modal__error_visible"});class m{constructor(e){this._modalElement=document.querySelector(e)}_checkForEscClose=e=>{"Escape"===e.key&&this.close()};open=()=>{this._modalElement.classList.add("modal_visible"),document.addEventListener("keyup",this._checkForEscClose)};close=()=>{this._modalElement.classList.remove("modal_visible"),document.removeEventListener("keyup",this._checkForEscClose)};setEventListeners(){this._modalElement.querySelector(".modal__close-button").addEventListener("click",(e=>{this.close(e)})),this._modalElement.addEventListener("click",(e=>{e.target.classList.contains("modal_visible")&&this.close(e)}))}}class u extends m{constructor(e,t){super(e),this._handleSubmitBtn=t,this._formElement=this._modalElement.querySelector(".modal__container")}getInputValues(){const e=Array.from(this._formElement.querySelectorAll(".modal__input")),t={};return e.forEach((e=>{t[e.name]=e.value})),t}setInputValues(e){Array.from(this._formElement.querySelectorAll(".modal__input")).forEach((t=>{t.value=e[t.name]}))}setEventListeners(){super.setEventListeners(),this._formElement.addEventListener("submit",(()=>{this._handleSubmitBtn(this.getInputValues()),this.close(),this._formElement.reset()}))}close(){super.close(),this._formElement.reset()}}class h extends m{constructor(e,t){super(e),this._form=document.querySelector(this._selector),this._handleSubmit=t,this._handleSubmitHandler=this._handleSubmitHandler.bind(this)}_handleSubmitHandler(e){e.preventDefault(),this._handleSubmit(),super.close()}_setEventListeners(){super._setEventListeners(),this._form.addEventListener("submit",this._handleSubmitHandler)}_removeEventListeners(){super._removeEventListeners(),this._form.removeEventListener("submit",this._handleSubmitHandler)}}const p=new class extends m{openup=e=>{const t=e.target;this._modalElement.querySelector(".modal__big-image").src=t.src,this._modalElement.querySelector(".modal__big-image").alt=t.alt,this._modalElement.querySelector(".modal__image-caption").textContent=t.alt,this.open()}}(".modal_type_big-image");new u(".modal_type_delete-card").setEventListeners();const b=new class{constructor({items:e,renderer:t},s){this._items=e,this._renderer=t,this._container=document.querySelector(s)}addItem(e){this._container.prepend(e)}clear(){this._container.innerHTML=""}renderItems(){this.clear(),this._items.forEach((e=>{this._renderer(e)}))}}((e=>{b.addItem(function(e){const r=new s({data:e,user:L,cardSelector:".cards__grid",handleCardClick:e=>{e.preventDefault();const t=e.target,s=t.src,r=t.alt;p.open(s,r),p.setEventListeners()},handleDeleteCard:e=>{h.open(),h.setAction((()=>t.deleteCard(e).then((e=>{r.deleteCard(),h.close()})).catch((e=>console.log(e)))))},handleLikes:e=>{r.isLiked()?t.removeLike(e).then((e=>{r.updateLikes(e.likes)})).catch((e=>console.log(e))):t.addLike(e).then((e=>{r.updateLikes(e.likes)})).catch((e=>console.log(e)))}});return r.generateCard()}(e))}),".cards__grid"),v=new class{constructor({name:e,job:t,avatar:s}){this._name=document.querySelector(`${e}`),this._job=document.querySelector(`${t}`),this._avatar=document.querySelector(`${s}`),this.setUserInfo=this.setUserInfo.bind(this)}getUserInfo(){const e={};return e.userName=this._name.textContent,e.userJob=this._job.textContent,e}setUserInfo(e){this._name.textContent=e.name,this._job.textContent=e.job}setUserAvatar({avatar:e}){this._avatar.style.backgroundImage=`url('${e}')`}}({name:".profile__title",about:".profile__subtitle",avatar:".profile__image"});t.getUserInfo().then((e=>{v.setUserInfo(e),L=e._id,v.setUserAvatar(e.avatar)})).catch((e=>console.log(e))),t.getInitialCards().then((e=>{b.renderItems(e)})).catch((e=>console.log(e)));const E=new u(".modal_type_edit",(()=>{v.setUserInfo(E.getInputValues()),E.close()}));E.setEventListeners(),i.addEventListener("click",(()=>{E.setInputValues(v.getUserInfo()),S.resetValidation(),E.open()}));const y=new u(".modal_type_avatar",(()=>{}));y.addEventListener(),o.addEventListener("click",(()=>{f.resetValidation(),y.open()}));const g=new u(".modal_type_add-card",(()=>{const e=g.getInputValues();b.addItem(generateCard(e)),g.close()}));g.setEventListeners(),l.addEventListener("click",(()=>{k.resetValidation(),g.open()}));const S=new r(_,n);S.enableValidation();const f=new r(_,a);f.enableValidation();const k=new r(_,d);let L;k.enableValidation()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QzZKLE9BQU9DLEdBQVFDLFFBQVFDLElBQUlGLEtBSTlCNUssRUFBSUksa0JBQWtCWCxNQUFNQyxJQUMxQjhKLEVBQWFZLFlBQVkxSyxNQUUxQmlMLE9BQU9DLEdBQVFDLFFBQVFDLElBQUlGLEtBSzVCLE1BQU1lLEVBQWtCLElBQUl6RCxFQUFjLG9CQUFvQixLQUM1RCtDLEVBQWVHLFlBQVlPLEVBQWdCckQsa0JBQzNDcUQsRUFBZ0IvRCxXQUlsQitELEVBQWdCNUQsb0JBR2hCbkIsRUFBVzFDLGlCQUFpQixTQUFTLEtBQ25DeUgsRUFBZ0JqRCxlQUFldUMsRUFBZTFLLGVBQzlDcUwsRUFBc0JyRyxrQkFDdEJvRyxFQUFnQjlELFVBSWxCLE1BQU1nRSxFQUFhLElBQUkzRCxFQUFjLHNCQUFzQixTQUszRDJELEVBQVczSCxtQkFFWDZDLEVBQWlCN0MsaUJBQWlCLFNBQVMsS0FDekM0SCxFQUFxQnZHLGtCQUNyQnNHLEVBQVdoRSxVQUtiLE1BQU1ULEVBQWMsSUFBSWMsRUFBYyx3QkFBd0IsS0FDNUQsTUFBTTZELEVBQVUzRSxFQUFZa0IsaUJBQzVCa0IsRUFBYU8sUUFBUXpGLGFBQWF5SCxJQUNsQzNFLEVBQVlRLFdBSWRSLEVBQVlXLG9CQUdaYixFQUFjaEQsaUJBQWlCLFNBQVMsS0FDdEM4SCxFQUFzQnpHLGtCQUN0QjZCLEVBQVlTLFVBS2QsTUFBTStELEVBQXdCLElBQUlsSCxFQUFjQyxFQUFZa0MsR0FDNUQrRSxFQUFzQmxGLG1CQUd0QixNQUFNb0YsRUFBdUIsSUFBSXBILEVBQWNDLEVBQVlzQyxHQUMzRDZFLEVBQXFCcEYsbUJBR3JCLE1BQU1zRixFQUF3QixJQUFJdEgsRUFBY0MsRUFBWXdDLEdBSTVELElBQUltRCxFQUhKMEIsRUFBc0J0RixtQiIsInNvdXJjZXMiOlsid2VicGFjazovL3dlYl9wcm9qZWN0XzQvLi9zcmMvY29tcG9uZW50cy9zY3JpcHRzL0FwaS5qcyIsIndlYnBhY2s6Ly93ZWJfcHJvamVjdF80Ly4vc3JjL2NvbXBvbmVudHMvc2NyaXB0cy9DYXJkLmpzIiwid2VicGFjazovL3dlYl9wcm9qZWN0XzQvLi9zcmMvY29tcG9uZW50cy9zY3JpcHRzL0Zvcm1WYWxpZGF0b3IuanMiLCJ3ZWJwYWNrOi8vd2ViX3Byb2plY3RfNC8uL3NyYy9jb21wb25lbnRzL3V0aWxzL2NvbnN0YW50cy5qcyIsIndlYnBhY2s6Ly93ZWJfcHJvamVjdF80Ly4vc3JjL2NvbXBvbmVudHMvc2NyaXB0cy9Nb2RhbC5qcyIsIndlYnBhY2s6Ly93ZWJfcHJvamVjdF80Ly4vc3JjL2NvbXBvbmVudHMvc2NyaXB0cy9Nb2RhbFdpdGhGb3JtLmpzIiwid2VicGFjazovL3dlYl9wcm9qZWN0XzQvLi9zcmMvY29tcG9uZW50cy9zY3JpcHRzL01vZGFsRGVsZXRlQ29uZmlybWF0aW9uLmpzIiwid2VicGFjazovL3dlYl9wcm9qZWN0XzQvLi9zcmMvcGFnZXMvSW5kZXguanMiLCJ3ZWJwYWNrOi8vd2ViX3Byb2plY3RfNC8uL3NyYy9jb21wb25lbnRzL3NjcmlwdHMvTW9kYWxXaXRoSW1hZ2UuanMiLCJ3ZWJwYWNrOi8vd2ViX3Byb2plY3RfNC8uL3NyYy9jb21wb25lbnRzL3NjcmlwdHMvU2VjdGlvbi5qcyIsIndlYnBhY2s6Ly93ZWJfcHJvamVjdF80Ly4vc3JjL2NvbXBvbmVudHMvc2NyaXB0cy9Vc2VySW5mby5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBmaXJzdENhbGwgPSAodXJsLCBoZWFkZXJzKSA9PiB7XHJcbiAgICByZXR1cm4gZmV0Y2godXJsLCBoZWFkZXJzKS50aGVuKChyZXMpID0+IHtcclxuICAgICAgaWYgKHJlcy5vaykge1xyXG4gICAgICAgIHJldHVybiByZXMuanNvbigpO1xyXG4gICAgICB9XHJcbiAgICAgIFByb21pc2UucmVqZWN0KGBFUlJPUjogJHtyZXMuc3RhdHVzVGV4dH1gKTtcclxuICAgIH0pO1xyXG4gIH07XHJcblxyXG5jbGFzcyBBcGkge1xyXG4gIGNvbnN0cnVjdG9yKGJhc2VVcmwsIGhlYWRlcnMpIHtcclxuICAgIHRoaXMuYmFzZVVybCA9IGJhc2VVcmw7XHJcbiAgICB0aGlzLmhlYWRlcnMgPSBoZWFkZXJzO1xyXG4gIH1cclxuXHJcbiAgLy8gKysrKysgRmV0Y2hpbmcgKysrKysgLy9cclxuICAvLyAtLS0gRmV0Y2ggSW5pdGlhbENhcmRzIGZyb20gdGhlIHNlcnZlciAtLS0gLy9cclxuICBnZXRJbml0aWFsQ2FyZHMoKSB7XHJcbiAgICByZXR1cm4gZmlyc3RDYWxsKGAke3RoaXMuX2Jhc2VVcmx9L2NhcmRzYCwge1xyXG4gICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzLFxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuXHJcbiAgLy8gLS0tIEZldGNoIFVzZXJJbmZvIGZyb20gdGhlIHNlcnZlciAtLS0gLy9cclxuICBnZXRVc2VySW5mbygpIHtcclxuICAgIHJldHVybiBmaXJzdENhbGwoYCR7dGhpcy5fYmFzZVVybH0vdXNlcnMvbWVgLCB7XHJcbiAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8vICsrKysrIEFkZGluZy9FZGl0aW5nL1JlbW92aW5nIGRhdGEgKysrKysgLy9cclxuICAvLyA9PT09PSBQcm9maWxlID09PT09IC8vXHJcbiAgLy8gLS0tIFNldC9VcGRhdGUgdXNlciBhdmF0YXIgLS0tIC8vXHJcbiAgc2V0VXNlckF2YXRhcihkYXRhKSB7XHJcbiAgICByZXR1cm4gZmlyc3RDYWxsKGAke3RoaXMuX2Jhc2VVcmx9L3VzZXJzL21lL2F2YXRhcmAsIHtcclxuICAgICAgbWV0aG9kOiBcIlBBVENIXCIsXHJcbiAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXHJcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcclxuICAgICAgICBhdmF0YXI6IGRhdGEubGluayxcclxuICAgICAgfSlcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLy8gLS0tIFNldC9VcGRhdGUgdXNlciBpbmZvIC0tLSAvL1xyXG4gIHNlbmROZXdEYXRhKHByb2ZpbGUpIHtcclxuICAgIHJldHVybiBmaXJzdENhbGwoYCR7dGhpcy5fYmFzZVVybH0vdXNlcnMvbWVgLCB7XHJcbiAgICAgIG1ldGhvZDogXCJQQVRDSFwiLFxyXG4gICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzLFxyXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XHJcbiAgICAgICAgbmFtZTogcHJvZmlsZS5uYW1lLFxyXG4gICAgICAgIGpvYjogcHJvZmlsZS5qb2IsXHJcbiAgICAgIH0pLFxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvLyA9PT09PSBDYXJkcyA9PT09PSAvL1xyXG4gIC8vIC0tLSBDcmVhdGluZyBhIG5ldyBjYXJkIC0tLSAvL1xyXG4gIGNyZWF0ZU5ld0NhcmQoY2FyZCkge1xyXG4gICAgcmV0dXJuIGZpcnN0Q2FsbChgJHt0aGlzLl9iYXNlVXJsfS9jYXJkc2AsIHtcclxuICAgICAgbWV0aG9kOiBcIlBPU1RcIixcclxuICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVycyxcclxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xyXG4gICAgICAgIG5hbWU6IGNhcmQubmFtZSxcclxuICAgICAgICBsaW5rOiBjYXJkLmxpbmssXHJcbiAgICAgIH0pLFxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvLyAtLS0gUmVtb3ZpbmcvRGVsZXRpbmcgY2FyZCAtLS0gLy9cclxuICByZW1vdmVDYXJkKGNhcmRJZCkge1xyXG4gICAgcmV0dXJuIGZpcnN0Q2FsbChgJHt0aGlzLl9iYXNlVXJsfS9jYXJkcy8ke2NhcmRJZH1gLCB7XHJcbiAgICAgIG1ldGhvZDogXCJERUxFVEVcIixcclxuICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVycyxcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLy8gLS0tIEFkZCBsaWtlIHRvIGEgY2FyZCAtLS0gLy9cclxuICBhZGRMaWtlKGNhcmRJZCkge1xyXG4gICAgcmV0dXJuIGZpcnN0Q2FsbChgJHt0aGlzLl9iYXNlVXJsfS9jYXJkcy9saWtlcy8ke2NhcmRJZH1gLCB7XHJcbiAgICAgIG1ldGhvZDogXCJQVVRcIixcclxuICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVycyxcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLy8gLS0tIFJlbW92ZSBsaWtlIGZyb20gYSBjYXJkIC0tLSAvL1xyXG4gIHJlbW92ZUxpa2UoY2FyZElkKSB7XHJcbiAgICByZXR1cm4gZmlyc3RDYWxsKGAke3RoaXMuX2Jhc2VVcmx9L2NhcmRzL2xpa2VzLyR7Y2FyZElkfWAsIHtcclxuICAgICAgbWV0aG9kOiBcIkRFTEVURVwiLFxyXG4gICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzLFxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGFwaSA9IG5ldyBBcGkoe1xyXG4gICAgYmFzZVVybDogJ2h0dHBzOi8vYXJvdW5kLm5vbW9yZXBhcnRpZXMuY28vdjEvZ3JvdXAtMicsXHJcbiAgICBoZWFkZXJzOiB7IGF1dGhvcml6YXRpb246IFwiNzA5YTBkOWQtZGIwNi00ODkwLWE1OTQtYjA3ZTczMDlhMzUzXCIgfVxyXG59KTtcclxuIiwiZXhwb3J0IGNsYXNzIENhcmQge1xyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgeyBjYXJkRGF0YSwgdXNlciwgb25DYXJkQ2xpY2ssIHJlbW92ZUhhbmRsZXIsIGxpa2VIYW5kbGVyIH0sXHJcbiAgICBjYXJkU2VsZWN0b3JcclxuICApIHtcclxuICAgIHRoaXMuX25hbWUgPSBjYXJkRGF0YS5uYW1lO1xyXG4gICAgdGhpcy5fbGluayA9IGNhcmREYXRhLmxpbms7XHJcbiAgICB0aGlzLl9jYXJkSWQgPSBjYXJkRGF0YS5faWQ7XHJcbiAgICB0aGlzLl9vd25lcklkID0gY2FyZERhdGEub3duZXIuX2lkO1xyXG4gICAgdGhpcy5fdXNlcklEID0gdXNlcjtcclxuICAgIHRoaXMuX2xpa2VzID0gY2FyZERhdGEubGlrZXM7XHJcbiAgICB0aGlzLl9jYXJkU2VsZWN0b3IgPSBjYXJkU2VsZWN0b3I7XHJcblxyXG4gICAgdGhpcy5fb25DYXJkQ2xpY2sgPSBvbkNhcmRDbGljaztcclxuICAgIHRoaXMuX2xpa2VIYW5kbGVyID0gbGlrZUhhbmRsZXI7XHJcbiAgICB0aGlzLl9yZW1vdmVIYW5kbGVyID0gcmVtb3ZlSGFuZGxlcjtcclxuICB9XHJcbiAgLy8gLS0tIEdldHRpbmcgdGhlIHRlbXBsYXRlIC0tLSAvL1xyXG4gIF9nZXRUZW1wbGF0ZSgpIHtcclxuICAgIGNvbnN0IGNhcmQgPSBkb2N1bWVudFxyXG4gICAgICAucXVlcnlTZWxlY3RvcihcIiNjYXJkX190ZW1wbGF0ZVwiKVxyXG4gICAgICAuY29udGVudC5xdWVyeVNlbGVjdG9yKFwiLmNhcmRcIilcclxuICAgICAgLmNsb25lTm9kZSh0cnVlKTtcclxuICAgIHJldHVybiBjYXJkO1xyXG4gIH1cclxuXHJcbiAgLy8gLS0tIENhcmQgZGVsZXRpbmcgbWV0aG9kIC0tLSAvL1xyXG4gIGRlbGV0ZUNhcmQoKSB7XHJcbiAgICB0aGlzLl9pdGVtLnJlbW92ZSgpO1xyXG4gICAgdGhpcy5faXRlbSA9IG51bGw7XHJcbiAgfVxyXG5cclxuICBfcmVuZGVyTGlrZXMoKSB7XHJcbiAgICBpZiAodGhpcy5pc0xpa2VkKCkpIHtcclxuICAgICAgdGhpcy5faXRlbVxyXG4gICAgICAgIC5xdWVyeVNlbGVjdG9yKFwiLmNhcmRfX2xpa2UtYnV0dG9uXCIpXHJcbiAgICAgICAgLmNsYXNzTGlzdC5hZGQoXCJjYXJkX19saWtlLWJ1dHRvbl9hY3RpdmVcIik7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLl9pdGVtXHJcbiAgICAgICAgLnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZF9fbGlrZS1idXR0b25cIilcclxuICAgICAgICAuY2xhc3NMaXN0LnJlbW92ZShcImNhcmRfX2xpa2UtYnV0dG9uX2FjdGl2ZVwiKTtcclxuICAgIH1cclxuICAgIHRoaXMuX2l0ZW0ucXVlcnlTZWxlY3RvcihcIi5jYXJkX19saWtlLWNvdW50ZXJcIikudGV4dENvbnRlbnQgPVxyXG4gICAgICB0aGlzLl9saWtlcy5sZW5ndGg7XHJcbiAgfVxyXG5cclxuICAvLyAtLS0gQ2hlY2sgaWYgY2FyZCBsaWtlZCBieSBhbm90aGVyIHVzZXIgLS0tIC8vXHJcbiAgaXNMaWtlZCgpIHtcclxuICAgIHJldHVybiB0aGlzLl9saWtlcy5zb21lKCh1c2VyKSA9PiB1c2VyLl9pZCA9PT0gdGhpcy5fdXNlcklkKTtcclxuICB9XHJcblxyXG4gIC8vIC0tLSBUb2dnbGUgbGlrZSBidXR0b24gbWV0aG9kIC0tLSAvL1xyXG4gIHVwZGF0ZUxpa2VzKG5ld0xpa2VzKSB7XHJcbiAgICB0aGlzLl9saWtlcyA9IG5ld0xpa2VzO1xyXG4gICAgdGhpcy5fcmVuZGVyTGlrZXMoKTtcclxuICB9XHJcblxyXG4gIC8vIC0tLSBTZXQgZXZlbnRzIGxpc3RlbmVycyBmb3IgdGhlIGNhcmRzIHRoYXQgd2lsbCBiZSBjcmVhdGVkISAtLS0gLy9cclxuICBfc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XHJcbiAgICB0aGlzLl9pdGVtXHJcbiAgICAgIC5xdWVyeVNlbGVjdG9yKFwiLmNhcmRfX2xpa2UtYnV0dG9uXCIpXHJcbiAgICAgIC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgdGhpcy5fbGlrZUNhcmQoZXZlbnQpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICB0aGlzLl9pdGVtXHJcbiAgICAgIC5xdWVyeVNlbGVjdG9yKFwiLmNhcmRfX2RlbGV0ZS1idXR0b25cIilcclxuICAgICAgLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5fcmVtb3ZlSGFuZGxlcih0aGlzLl9jYXJkSWQpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICB0aGlzLl9jYXJkSW1hZ2UuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChldmVudCkgPT4ge1xyXG4gICAgICB0aGlzLl9vbkNhcmRDbGljayhldmVudCk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8vIC0tLSBDcmVhdGluZyB0aGUgY2FyZCBhbmQgY2FyZCBlbGVtZW50cyAtLS0gLy9cclxuICBnZW5lcmF0ZUNhcmQoKSB7XHJcbiAgICB0aGlzLl9pdGVtID0gdGhpcy5fZ2V0VGVtcGxhdGUoKTtcclxuXHJcbiAgICBpZiAodGhpcy5fb3duZXJJZCAhPT0gdGhpcy5fdXNlcklkKSB7XHJcbiAgICAgIHRoaXMuX2VsZW1lbnRcclxuICAgICAgICAucXVlcnlTZWxlY3RvcihcIi5jYXJkX19kZWxldGUtYnV0dG9uXCIpXHJcbiAgICAgICAgLmNsYXNzTGlzdC5hZGQoXCJjYXJkX19kZWxldGUtYnV0dG9uX2hpZGRlblwiKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLl9jYXJkSW1hZ2UgPSB0aGlzLl9pdGVtLnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZF9faW1hZ2VcIik7XHJcbiAgICB0aGlzLl9pdGVtLnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZF9fdGl0bGVcIikudGV4dENvbnRlbnQgPSB0aGlzLl9uYW1lO1xyXG4gICAgdGhpcy5fY2FyZEltYWdlLnNyYyA9IHRoaXMuX2xpbms7XHJcbiAgICB0aGlzLl9jYXJkSW1hZ2UuYWx0ID0gXCJJbWFnZSBvZiBcIiArIGAgJHt0aGlzLl9uYW1lfSBgO1xyXG4gICAgdGhpcy5fcmVuZGVyTGlrZXMoKTtcclxuXHJcbiAgICB0aGlzLl9zZXRFdmVudExpc3RlbmVycygpO1xyXG5cclxuICAgIHJldHVybiB0aGlzLl9pdGVtO1xyXG4gIH1cclxufVxyXG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBGb3JtVmFsaWRhdG9yIHtcclxuICBjb25zdHJ1Y3Rvcihmb3JtQ29uZmlnLCBmb3JtRWxlbWVudCkge1xyXG4gICAgdGhpcy5fZm9ybUNvbmZpZyA9IGZvcm1Db25maWc7XHJcbiAgICB0aGlzLl9mb3JtRWxlbWVudCA9IGZvcm1FbGVtZW50O1xyXG4gIH1cclxuXHJcbiAgX3Nob3dJbnB1dEVycm9yID0gKGlucHV0RWxlbWVudCwgZXJyb3JNZXNzYWdlKSA9PiB7XHJcbiAgICBjb25zdCB7IGlucHV0RXJyb3JDbGFzcywgZXJyb3JNZXNzYWdlQ2xhc3MgfSA9IHRoaXMuX2Zvcm1Db25maWc7XHJcbiAgICBjb25zdCBlcnJvckVsZW1lbnQgPSB0aGlzLl9mb3JtRWxlbWVudC5xdWVyeVNlbGVjdG9yKGAgIyR7aW5wdXRFbGVtZW50LmlkfV9lcnJvciBgKTtcclxuICAgIGVycm9yRWxlbWVudC50ZXh0Q29udGVudCA9IGVycm9yTWVzc2FnZTtcclxuICAgIGVycm9yRWxlbWVudC5jbGFzc0xpc3QuYWRkKGVycm9yTWVzc2FnZUNsYXNzKTtcclxuICAgIGlucHV0RWxlbWVudC5jbGFzc0xpc3QuYWRkKGlucHV0RXJyb3JDbGFzcyk7XHJcbiAgfTtcclxuICBcclxuICBfaGlkZUlucHV0RXJyb3IgPSAoaW5wdXRFbGVtZW50KSA9PiB7XHJcbiAgICBjb25zdCB7IGlucHV0RXJyb3JDbGFzcywgZXJyb3JNZXNzYWdlQ2xhc3MgfSA9IHRoaXMuX2Zvcm1Db25maWc7XHJcbiAgICBjb25zdCBlcnJvckVsZW1lbnQgPSB0aGlzLl9mb3JtRWxlbWVudC5xdWVyeVNlbGVjdG9yKGAgIyR7aW5wdXRFbGVtZW50LmlkfV9lcnJvciBgKTtcclxuICAgIGVycm9yRWxlbWVudC50ZXh0Q29udGVudCA9IFwiXCI7XHJcbiAgICBlcnJvckVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShlcnJvck1lc3NhZ2VDbGFzcyk7XHJcbiAgICBpbnB1dEVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShpbnB1dEVycm9yQ2xhc3MpO1xyXG4gIH07XHJcblxyXG4gIHJlc2V0VmFsaWRhdGlvbigpIHtcclxuICAgIHRoaXMuaW5wdXRzLmZvckVhY2goKGlucHV0KSA9PiB7XHJcbiAgICAgIHRoaXMuX2hpZGVJbnB1dEVycm9yKGlucHV0KTtcclxuICAgIH0pO1xyXG4gICAgdGhpcy5fdG9nZ2xlU3VibWl0QnV0dG9uKCk7XHJcbiAgfVxyXG5cclxuICBfY2hlY2tJbnB1dCA9IChpbnB1dEVsZW1lbnQpID0+IHtcclxuICAgIGlmICghaW5wdXRFbGVtZW50LnZhbGlkaXR5LnZhbGlkKSB7XHJcbiAgICAgIHRoaXMuX3Nob3dJbnB1dEVycm9yKGlucHV0RWxlbWVudCwgaW5wdXRFbGVtZW50LnZhbGlkYXRpb25NZXNzYWdlKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuX2hpZGVJbnB1dEVycm9yKGlucHV0RWxlbWVudCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBfY2hlY2tJZkZvcm1WYWxpZCA9ICgpID0+IHRoaXMuaW5wdXRzLmV2ZXJ5KChpbnB1dCkgPT4gaW5wdXQudmFsaWRpdHkudmFsaWQpO1xyXG5cclxuICBfdG9nZ2xlU3VibWl0QnV0dG9uKCkge1xyXG4gICAgY29uc3QgeyBpbmFjdGl2ZUJ1dHRvbkNsYXNzLCBzdWJtaXRCdXR0b25TZWxlY3RvciB9ID0gdGhpcy5fZm9ybUNvbmZpZztcclxuICAgIGNvbnN0IGJ1dHRvbkVsZW1lbnQgPSB0aGlzLl9mb3JtRWxlbWVudC5xdWVyeVNlbGVjdG9yKHN1Ym1pdEJ1dHRvblNlbGVjdG9yKTtcclxuXHJcbiAgICBpZiAodGhpcy5fY2hlY2tJZkZvcm1WYWxpZCgpKSB7XHJcbiAgICAgIGJ1dHRvbkVsZW1lbnQuZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgICAgYnV0dG9uRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKGluYWN0aXZlQnV0dG9uQ2xhc3MpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgYnV0dG9uRWxlbWVudC5kaXNhYmxlZCA9IHRydWU7XHJcbiAgICAgIGJ1dHRvbkVsZW1lbnQuY2xhc3NMaXN0LmFkZChpbmFjdGl2ZUJ1dHRvbkNsYXNzKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIF9zZXRFdmVudExpc3RlbmVycyA9ICgpID0+IHtcclxuICAgIGNvbnN0IHsgaW5wdXRTZWxlY3RvciB9ID0gdGhpcy5fZm9ybUNvbmZpZztcclxuICAgIHRoaXMuaW5wdXRzID0gQXJyYXkuZnJvbSh0aGlzLl9mb3JtRWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKGlucHV0U2VsZWN0b3IpKTtcclxuXHJcbiAgICB0aGlzLmlucHV0cy5mb3JFYWNoKChpbnB1dCkgPT4ge1xyXG4gICAgICBpbnB1dC5hZGRFdmVudExpc3RlbmVyKFwiaW5wdXRcIiwgKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuX2NoZWNrSW5wdXQoaW5wdXQpO1xyXG4gICAgICAgIHRoaXMuX3RvZ2dsZVN1Ym1pdEJ1dHRvbigpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIHRoaXMuX2Zvcm1FbGVtZW50O1xyXG4gIH07XHJcblxyXG4gIGVuYWJsZVZhbGlkYXRpb24oKSB7XHJcbiAgICB0aGlzLl9mb3JtRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwic3VibWl0XCIsIChldmVudCkgPT4ge1xyXG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgfSk7XHJcbiAgICB0aGlzLl9zZXRFdmVudExpc3RlbmVycygpO1xyXG4gIH1cclxufSIsIi8vIC0tLSAnRWRpdCBwcm9maWxlJyBtb2RhbCBjb25zdHMgLS0tIC8vXHJcbmV4cG9ydCBjb25zdCBlZGl0QnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByb2ZpbGVfX2VkaXQtYnV0dG9uJyk7XHJcbmV4cG9ydCBjb25zdCBwcm9maWxlTW9kYWwgPSBkb2N1bWVudC5mb3Jtcy5wcm9maWxlO1xyXG5leHBvcnQgY29uc3QgbmFtZUlucHV0ID0gcHJvZmlsZU1vZGFsLmVsZW1lbnRzLm5hbWU7XHJcbmV4cG9ydCBjb25zdCBqb2JJbnB1dCA9IHByb2ZpbGVNb2RhbC5lbGVtZW50cy5qb2I7XHJcbmV4cG9ydCBjb25zdCBlZGl0Q2xvc2VCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubW9kYWxfX2Nsb3NlLWJ1dHRvbl90eXBlX2VkaXQnKTtcclxuLy8gLS0tICdBdmF0YXJcIiBtb2RhbCBjb25zdHMgLS0tIC8vXHJcbmV4cG9ydCBjb25zdCBhdmF0YXJFZGl0QnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByb2ZpbGVfX2ltYWdlLWVkaXQnKTtcclxuZXhwb3J0IGNvbnN0IGF2YXRhck1vZGFsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm1vZGFsX3R5cGVfYXZhdGFyJyk7XHJcbmV4cG9ydCBjb25zdCBhdmF0YXJNb2RhbElucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm1vZGFsX19pbnB1dF90eXBlX2F2YXRhcicpO1xyXG5leHBvcnQgY29uc3QgYXZhdGFyQ2xvc2VCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubW9kYWxfX2Nsb3NlLWJ1dHRvbl90eXBlX2F2YXRhcicpXHJcbi8vIC0tLSAnQWRkLWNhcmQnIG1vZGFsIGNvbnN0cyAtLS0gLy9cclxuZXhwb3J0IGNvbnN0IGFkZENhcmRCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucHJvZmlsZV9fYWRkLWJ1dHRvbicpO1xyXG5leHBvcnQgY29uc3QgYWRkQ2FyZE1vZGFsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm1vZGFsX3R5cGVfYWRkLWNhcmQnKTtcclxuZXhwb3J0IGNvbnN0IGNhcmRJbnB1dFRpdGxlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm1vZGFsX19pbnB1dF90eXBlX25hbWUnKTtcclxuZXhwb3J0IGNvbnN0IGNhcmRJbnB1dExpbmsgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubW9kYWxfX2lucHV0X3R5cGVfbGluaycpO1xyXG5leHBvcnQgY29uc3QgYWRkQ2FyZENsb3NlQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm1vZGFsX19jbG9zZS1idXR0b25fdHlwZV9hZGQtY2FyZCcpO1xyXG4vLyAtLS0gJ0FkZC1DYXJkJyBmb3JtIGNvbnN0cyAtLS0gLy9cclxuZXhwb3J0IGNvbnN0IGFkZENhcmRGb3JtID0gZG9jdW1lbnQuZm9ybXMuYWRkO1xyXG5leHBvcnQgY29uc3QgYWRkQ2FyZEZvcm1UaXRlbCA9IGFkZENhcmRGb3JtLmVsZW1lbnRzLnRpdGxlO1xyXG5leHBvcnQgY29uc3QgYWRkQ2FyZEZvcm1MaW5rID0gYWRkQ2FyZEZvcm0uZWxlbWVudHMubGluaztcclxuLy8gLS0tIEdlbmVyYWwgY29uc3QgLS0tIC8vXHJcbmV4cG9ydCBjb25zdCBzdWJtaXRCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubW9kYWxfX3N1Ym1pdC1idXR0b24nKTtcclxuZXhwb3J0IGNvbnN0IGNhcmRMaXN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNhcmRzX19ncmlkJyk7XHJcbi8vIC0tLSBCaWcgaW1hZ2UgbW9kYWwgY29uc3RzIC0tLSAvL1xyXG5leHBvcnQgY29uc3QgY2FyZEJpZ01vZGFsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm1vZGFsX3R5cGVfYmlnLWltYWdlJyk7XHJcbmV4cG9ydCBjb25zdCBjYXJkQmlnTW9kYWxJbWFnZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tb2RhbF9fYmlnLWltYWdlJyk7XHJcbmV4cG9ydCBjb25zdCBjYXJkQmlnTW9kYWxUZXh0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm1vZGFsX19pbWFnZS1jYXB0aW9uJyk7XHJcbmV4cG9ydCBjb25zdCBjYXJkQmlnTW9kYWxDbG9zZUljb24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubW9kYWxfX2Nsb3NlLWJ1dHRvbl90eXBlX2JpZy1pbWFnZScpO1xyXG4vLyAtLS0gRm9ybSBjb25maWcgY29uc3RzIC0tLSAvL1xyXG5leHBvcnQgY29uc3QgZm9ybUNvbmZpZyA9IHtcclxuICBmb3JtU2VsZWN0b3I6IFwiLm1vZGFsX19jb250YWluZXJcIixcclxuICBpbnB1dFNlbGVjdG9yOiBcIi5tb2RhbF9faW5wdXRcIixcclxuICBzdWJtaXRCdXR0b25TZWxlY3RvcjogXCIubW9kYWxfX3N1Ym1pdC1idXR0b25cIixcclxuICBpbmFjdGl2ZUJ1dHRvbkNsYXNzOiBcIm1vZGFsX19zdWJtaXQtYnV0dG9uX2Rpc2FibGVkXCIsXHJcbiAgaW5wdXRFcnJvckNsYXNzOiBcIm1vZGFsX19pbnB1dF9lcnJvclwiLFxyXG4gIGVycm9yTWVzc2FnZUNsYXNzOiBcIm1vZGFsX19lcnJvcl92aXNpYmxlXCJcclxufTtcclxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgTW9kYWwge1xyXG4gIGNvbnN0cnVjdG9yKG1vZGFsU2VsZWN0b3IpIHtcclxuICAgIHRoaXMuX21vZGFsRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IobW9kYWxTZWxlY3Rvcik7XHJcbiAgfVxyXG4gIC8vIC0tLSBDbG9zZSBtb2RhbCBvbiBFU0MgbWV0aG9kIC0tLSAvL1xyXG4gIF9jaGVja0ZvckVzY0Nsb3NlID0gKGV2ZW50KSA9PiB7XHJcbiAgICBpZiAoZXZlbnQua2V5ID09PSBcIkVzY2FwZVwiKSB7XHJcbiAgICAgIHRoaXMuY2xvc2UoKTtcclxuICAgIH1cclxuICB9XHJcbiAgLy8gLS0tIE9wZW4gbW9kYWwgbWV0aG9kIC0tLSAvLyBcclxuICBvcGVuID0gKCkgPT4ge1xyXG4gICAgdGhpcy5fbW9kYWxFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJtb2RhbF92aXNpYmxlXCIpO1xyXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImtleXVwXCIsIHRoaXMuX2NoZWNrRm9yRXNjQ2xvc2UpO1xyXG4gIH1cclxuICAvLyAtLS0gQ2xvc2UgbW9kYWwgbWV0aG9kIC0tLSAvL1xyXG4gIGNsb3NlID0gKCkgPT4ge1xyXG4gICAgdGhpcy5fbW9kYWxFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJtb2RhbF92aXNpYmxlXCIpO1xyXG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImtleXVwXCIsIHRoaXMuX2NoZWNrRm9yRXNjQ2xvc2UpO1xyXG4gIH1cclxuXHJcbiAgc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XHJcbiAgICAvLyAtLS0gQ2xvc2UgbW9kYWwgb24gY2xvc2UoJ1gnKSBidXR0b24gLS0tIC8vXHJcbiAgICB0aGlzLl9tb2RhbEVsZW1lbnRcclxuICAgIC5xdWVyeVNlbGVjdG9yKFwiLm1vZGFsX19jbG9zZS1idXR0b25cIilcclxuICAgIC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGV2ZW50KSA9PiB7XHJcbiAgICAgIHRoaXMuY2xvc2UoZXZlbnQpO1xyXG4gICAgfSk7XHJcbiAgICAvLyBDbG9zZSBtb2RhbCBvbiBvdmVybGF5KG91dCBvZiB0aGUgbW9kYWwpIGNsaWNrIC0tLSAvLy9cclxuICAgIHRoaXMuX21vZGFsRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGV2ZW50KSA9PiB7XHJcbiAgICAgIGlmIChldmVudC50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKFwibW9kYWxfdmlzaWJsZVwiKSkge1xyXG4gICAgICAgIHRoaXMuY2xvc2UoZXZlbnQpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcbn0iLCJpbXBvcnQgTW9kYWwgZnJvbSBcIi4vTW9kYWwuanNcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1vZGFsV2l0aEZvcm0gZXh0ZW5kcyBNb2RhbCB7XHJcbiAgY29uc3RydWN0b3IobW9kYWxTZWxlY3RvciwgaGFuZGxlU3VibWl0KSB7XHJcbiAgICBzdXBlcihtb2RhbFNlbGVjdG9yKTtcclxuICAgIHRoaXMuX2hhbmRsZVN1Ym1pdEJ0biA9IGhhbmRsZVN1Ym1pdDtcclxuICAgIHRoaXMuX2Zvcm1FbGVtZW50ID0gdGhpcy5fbW9kYWxFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubW9kYWxfX2NvbnRhaW5lclwiKTtcclxuICB9XHJcblxyXG4gIGdldElucHV0VmFsdWVzKCkge1xyXG4gICAgY29uc3QgaW5wdXRMaXN0ID0gQXJyYXkuZnJvbShcclxuICAgICAgdGhpcy5fZm9ybUVsZW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5tb2RhbF9faW5wdXRcIilcclxuICAgICk7XHJcbiAgICBjb25zdCBpbnB1dFZhbHVlcyA9IHt9O1xyXG4gICAgaW5wdXRMaXN0LmZvckVhY2goKGlucHV0KSA9PiB7aW5wdXRWYWx1ZXNbaW5wdXQubmFtZV0gPSBpbnB1dC52YWx1ZTt9KTtcclxuICAgIHJldHVybiBpbnB1dFZhbHVlcztcclxuICB9XHJcblxyXG4gIHNldElucHV0VmFsdWVzKHZhbHVlcykge1xyXG4gICAgY29uc3QgaW5wdXRMaXN0ID0gQXJyYXkuZnJvbShcclxuICAgICAgdGhpcy5fZm9ybUVsZW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5tb2RhbF9faW5wdXRcIilcclxuICAgICk7XHJcbiAgICBpbnB1dExpc3QuZm9yRWFjaCgoaW5wdXQpID0+IHtpbnB1dC52YWx1ZSA9IHZhbHVlc1tpbnB1dC5uYW1lXTt9KVxyXG4gIH1cclxuXHJcbiAgc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XHJcbiAgICBzdXBlci5zZXRFdmVudExpc3RlbmVycygpO1xyXG4gICAgdGhpcy5fZm9ybUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInN1Ym1pdFwiLCAoKSA9PiB7XHJcbiAgICAgIHRoaXMuX2hhbmRsZVN1Ym1pdEJ0bih0aGlzLmdldElucHV0VmFsdWVzKCkpO1xyXG4gICAgICB0aGlzLmNsb3NlKCk7XHJcbiAgICAgIHRoaXMuX2Zvcm1FbGVtZW50LnJlc2V0KCk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGNsb3NlKCkge1xyXG4gICAgc3VwZXIuY2xvc2UoKTtcclxuICAgIHRoaXMuX2Zvcm1FbGVtZW50LnJlc2V0KCk7XHJcbiAgfVxyXG59IiwiaW1wb3J0IE1vZGFsIGZyb20gJy4vTW9kYWwuanMnO1xyXG4gIFxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNb2RhbERlbGV0ZUNvbmZpcm1hdGlvbiBleHRlbmRzIE1vZGFsIHtcclxuICBjb25zdHJ1Y3RvciAoc2VsZWN0b3IsIGhhbmRsZVN1Ym1pdCkge1xyXG4gICAgc3VwZXIoc2VsZWN0b3IpO1xyXG4gICAgdGhpcy5fZm9ybSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGhpcy5fc2VsZWN0b3IpO1xyXG4gICAgdGhpcy5faGFuZGxlU3VibWl0ID0gaGFuZGxlU3VibWl0O1xyXG4gICAgdGhpcy5faGFuZGxlU3VibWl0SGFuZGxlciA9IHRoaXMuX2hhbmRsZVN1Ym1pdEhhbmRsZXIuYmluZCh0aGlzKTtcclxuICB9XHJcbiAgXHJcbiAgX2hhbmRsZVN1Ym1pdEhhbmRsZXIgKGV2ZW50KSB7XHJcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgdGhpcy5faGFuZGxlU3VibWl0KCk7XHJcbiAgICBzdXBlci5jbG9zZSgpO1xyXG4gIH1cclxuICBcclxuICBfc2V0RXZlbnRMaXN0ZW5lcnMgKCkge1xyXG4gICAgc3VwZXIuX3NldEV2ZW50TGlzdGVuZXJzKCk7XHJcbiAgICB0aGlzLl9mb3JtLmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIHRoaXMuX2hhbmRsZVN1Ym1pdEhhbmRsZXIpO1xyXG4gIH1cclxuICBcclxuICBfcmVtb3ZlRXZlbnRMaXN0ZW5lcnMgKCkge1xyXG4gICAgc3VwZXIuX3JlbW92ZUV2ZW50TGlzdGVuZXJzKCk7XHJcbiAgICB0aGlzLl9mb3JtLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIHRoaXMuX2hhbmRsZVN1Ym1pdEhhbmRsZXIpO1xyXG4gIH1cclxufSIsImltcG9ydCB7IGFwaSB9IGZyb20gXCIuLi9jb21wb25lbnRzL3NjcmlwdHMvQXBpLmpzXCI7XHJcbmltcG9ydCB7IENhcmQgfSBmcm9tIFwiLi4vY29tcG9uZW50cy9zY3JpcHRzL0NhcmQuanNcIjtcclxuaW1wb3J0IEZvcm1WYWxpZGF0b3IgZnJvbSBcIi4uL2NvbXBvbmVudHMvc2NyaXB0cy9Gb3JtVmFsaWRhdG9yLmpzXCI7XHJcbmltcG9ydCBTZWN0aW9uIGZyb20gXCIuLi9jb21wb25lbnRzL3NjcmlwdHMvU2VjdGlvbi5qc1wiO1xyXG5pbXBvcnQge1xyXG4gIGVkaXRCdXR0b24sXHJcbiAgcHJvZmlsZU1vZGFsLFxyXG4gIGFkZENhcmRCdXR0b24sXHJcbiAgYWRkQ2FyZE1vZGFsLFxyXG4gIGF2YXRhck1vZGFsLFxyXG4gIGF2YXRhckVkaXRCdXR0b24sXHJcbiAgZm9ybUNvbmZpZ1xyXG59IGZyb20gXCIuLi9jb21wb25lbnRzL3V0aWxzL2NvbnN0YW50cy5qc1wiO1xyXG5pbXBvcnQgTW9kYWxXaXRoSW1hZ2UgZnJvbSBcIi4uL2NvbXBvbmVudHMvc2NyaXB0cy9Nb2RhbFdpdGhJbWFnZS5qc1wiO1xyXG5pbXBvcnQgTW9kYWxXaXRoRm9ybSBmcm9tIFwiLi4vY29tcG9uZW50cy9zY3JpcHRzL01vZGFsV2l0aEZvcm0uanNcIjtcclxuaW1wb3J0IE1vZGFsRGVsZXRlQ29uZmlybWF0aW9uIGZyb20gXCIuLi9jb21wb25lbnRzL3NjcmlwdHMvTW9kYWxEZWxldGVDb25maXJtYXRpb24uanNcIjtcclxuaW1wb3J0IFVzZXJJbmZvIGZyb20gXCIuLi9jb21wb25lbnRzL3NjcmlwdHMvVXNlckluZm8uanNcIjtcclxuaW1wb3J0IFwiLi9pbmRleC5jc3NcIjtcclxuXHJcbi8vIC0tLSBCaWcgaW1hZ2UgbW9kYWwgaW5zdGFuY2UgLS0tIC8vXHJcbmNvbnN0IGJpZ0ltYWdlTW9kYWwgPSBuZXcgTW9kYWxXaXRoSW1hZ2UoXCIubW9kYWxfdHlwZV9iaWctaW1hZ2VcIik7XHJcblxyXG4vLyAtLS0gRGVsZXRlIGNhcmQgbW9kYWwgaW5zdGFuY2UgYW5kIGV2ZW50cyAtLS0gLy9cclxuY29uc3QgZGVsZXRlQ2FyZE1vZGFsID0gbmV3IE1vZGFsV2l0aEZvcm0oXCIubW9kYWxfdHlwZV9kZWxldGUtY2FyZFwiKTtcclxuZGVsZXRlQ2FyZE1vZGFsLnNldEV2ZW50TGlzdGVuZXJzKCk7XHJcblxyXG4vLyArKysrKyBDYXJkIFNlY3Rpb24gKysrKysgLy9cclxuLy8gLS0tIENhcmQgcmVuZGVyIGZ1bmN0aW9uIC0tLSAvL1xyXG5mdW5jdGlvbiBjcmVhdGVDYXJkKGRhdGEpIHtcclxuICBjb25zdCBjYXJkID0gbmV3IENhcmQoe1xyXG4gICAgZGF0YTogZGF0YSxcclxuICAgIHVzZXI6IHVzZXJJZCxcclxuICAgIGNhcmRTZWxlY3RvcjogXCIuY2FyZHNfX2dyaWRcIixcclxuICAgIGhhbmRsZUNhcmRDbGljazogKGV2dCkgPT4ge1xyXG4gICAgICAvLyAtLS0gT3BlbiBiaWcgaW1hZ2UgbW9kYWwgLS0tIC8vXHJcbiAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICBjb25zdCB0YXJnZXQgPSBldnQudGFyZ2V0O1xyXG4gICAgICBjb25zdCBsaW5rID0gdGFyZ2V0LnNyYztcclxuICAgICAgY29uc3QgbmFtZSA9IHRhcmdldC5hbHQ7XHJcbiAgICAgIGJpZ0ltYWdlTW9kYWwub3BlbihsaW5rLCBuYW1lKTtcclxuICAgICAgYmlnSW1hZ2VNb2RhbC5zZXRFdmVudExpc3RlbmVycygpO1xyXG4gICAgfSxcclxuICAgIGhhbmRsZURlbGV0ZUNhcmQ6IChjYXJkSWQpID0+IHtcclxuICAgICAgTW9kYWxEZWxldGVDb25maXJtYXRpb24ub3BlbigpO1xyXG4gICAgICBNb2RhbERlbGV0ZUNvbmZpcm1hdGlvbi5zZXRBY3Rpb24oKCkgPT5cclxuICAgICAgICBhcGkuZGVsZXRlQ2FyZChjYXJkSWQpXHJcbiAgICAgICAgICAudGhlbigocmVzKSA9PiB7XHJcbiAgICAgICAgICAgIGNhcmQuZGVsZXRlQ2FyZCgpO1xyXG4gICAgICAgICAgICBNb2RhbERlbGV0ZUNvbmZpcm1hdGlvbi5jbG9zZSgpO1xyXG4gICAgICAgICAgfSlcclxuICAgICAgICAgIC5jYXRjaCgoZXJyKSA9PiBjb25zb2xlLmxvZyhlcnIpKVxyXG4gICAgICApO1xyXG4gICAgfSxcclxuICAgIGhhbmRsZUxpa2VzOiAoY2FyZElkKSA9PiB7XHJcbiAgICAgIGNvbnN0IGlzTGlrZWQgPSBjYXJkLmlzTGlrZWQoKTtcclxuICAgICAgaWYgKGlzTGlrZWQpIHtcclxuICAgICAgICBhcGkucmVtb3ZlTGlrZShjYXJkSWQpXHJcbiAgICAgICAgICAudGhlbigocmVzKSA9PiB7XHJcbiAgICAgICAgICAgIGNhcmQudXBkYXRlTGlrZXMocmVzLmxpa2VzKTtcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgICAuY2F0Y2goKGVycikgPT4gY29uc29sZS5sb2coZXJyKSlcclxuICAgICAgfSBcclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgYXBpLmFkZExpa2UoY2FyZElkKVxyXG4gICAgICAgICAgLnRoZW4oKHJlcykgPT4ge1xyXG4gICAgICAgICAgICBjYXJkLnVwZGF0ZUxpa2VzKHJlcy5saWtlcyk7XHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgICAgLmNhdGNoKChlcnIpID0+IGNvbnNvbGUubG9nKGVycikpXHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgfSk7XHJcbiAgLy8gLS0tIENsb25lIGZyb20gdGVtcGxhdGUgLS0tIC8vXHJcbiAgY29uc3QgY2FyZHNJdGVtID0gY2FyZC5nZW5lcmF0ZUNhcmQoKTtcclxuICByZXR1cm4gY2FyZHNJdGVtO1xyXG59XHJcblxyXG5jb25zdCBjYXJkc1NlY3Rpb24gPSBuZXcgU2VjdGlvbihcclxuICAoaXRlbSkgPT4ge1xyXG4gICAgY2FyZHNTZWN0aW9uLmFkZEl0ZW0oY3JlYXRlQ2FyZChpdGVtKSk7XHJcbiAgfSxcclxuICBcIi5jYXJkc19fZ3JpZFwiXHJcbik7XHJcblxyXG4vLyArKysrKyAnVXNlciBJbmZvJyArKysrKyAvL1xyXG4vLyAtLS0gVXNlckluZm8gaW5zdGFuY2UgLS0tIC8vXHJcbmNvbnN0IHVzZXJJbmZvVmFsdWVzID0gbmV3IFVzZXJJbmZvKHtcclxuICBuYW1lOiBcIi5wcm9maWxlX190aXRsZVwiLFxyXG4gIGFib3V0OiBcIi5wcm9maWxlX19zdWJ0aXRsZVwiLFxyXG4gIGF2YXRhcjogXCIucHJvZmlsZV9faW1hZ2VcIixcclxufSk7XHJcbi8vIC0tLSBVc2VySW5mbyBpbml0IC0tLSAvL1xyXG5hcGkuZ2V0VXNlckluZm8oKVxyXG4gIC50aGVuKChyZXMpID0+IHtcclxuICAgIHVzZXJJbmZvVmFsdWVzLnNldFVzZXJJbmZvKHJlcyk7XHJcbiAgICB1c2VySWQgPSByZXMuX2lkO1xyXG4gICAgdXNlckluZm9WYWx1ZXMuc2V0VXNlckF2YXRhcihyZXMuYXZhdGFyKTtcclxuICB9KVxyXG4gIC5jYXRjaCgoZXJyKSA9PiBjb25zb2xlLmxvZyhlcnIpKTtcclxuXHJcbi8vICsrKysrIENhcmQgbGlzdCArKysrKyAvL1xyXG4vLyAtLS0gQ2FyZHMgaW5pdCAtLS0gLy9cclxuYXBpLmdldEluaXRpYWxDYXJkcygpLnRoZW4oKHJlcykgPT4ge1xyXG4gIGNhcmRzU2VjdGlvbi5yZW5kZXJJdGVtcyhyZXMpO1xyXG59KVxyXG4uY2F0Y2goKGVycikgPT4gY29uc29sZS5sb2coZXJyKSk7XHJcblxyXG4vLyArKysrKyBGb3JtcyArKysrKyAvL1xyXG4vLyA9PT0gJ0VkaXQgcHJvZmlsZScgZm9ybSA9PT0gLy9cclxuLy8gLS0tIEZvcm0gY3JlYXRpb24gbWV0aG9kIC0tLSAvL1xyXG5jb25zdCBlZGl0UHJvZmlsZUZvcm0gPSBuZXcgTW9kYWxXaXRoRm9ybShcIi5tb2RhbF90eXBlX2VkaXRcIiwgKCkgPT4ge1xyXG4gIHVzZXJJbmZvVmFsdWVzLnNldFVzZXJJbmZvKGVkaXRQcm9maWxlRm9ybS5nZXRJbnB1dFZhbHVlcygpKTtcclxuICBlZGl0UHJvZmlsZUZvcm0uY2xvc2UoKTtcclxufSk7XHJcblxyXG4vLyAtLS0gU2V0IGV2ZW50IGxpc3RlbmVycyBmb3IgdGhlIGZvcm0gLS0tIC8vXHJcbmVkaXRQcm9maWxlRm9ybS5zZXRFdmVudExpc3RlbmVycygpO1xyXG5cclxuLy8gLS0tIFNldCB2YWx1ZXMgYW5kIG9wZW4gdGhlIGZvcm0gLS0tIC8vXHJcbmVkaXRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICBlZGl0UHJvZmlsZUZvcm0uc2V0SW5wdXRWYWx1ZXModXNlckluZm9WYWx1ZXMuZ2V0VXNlckluZm8oKSlcclxuICBwcm9maWxlRm9ybVZhbGlkYXRpb24ucmVzZXRWYWxpZGF0aW9uKCk7XHJcbiAgZWRpdFByb2ZpbGVGb3JtLm9wZW4oKTtcclxufSk7XHJcblxyXG4vLyA9PT0gJ0F2YXRhcicgZWRpdCBmb3JtID09PSAvL1xyXG5jb25zdCBhdmF0YXJGb3JtID0gbmV3IE1vZGFsV2l0aEZvcm0oXCIubW9kYWxfdHlwZV9hdmF0YXJcIiwgKCkgPT4ge1xyXG4gIFxyXG59KTtcclxuXHJcbi8vIC0tLSBTZXQgZXZlbnQgbGVzdGVuZXJzIHRvIHRoZSBmb3JtIC0tLSAvL1xyXG5hdmF0YXJGb3JtLmFkZEV2ZW50TGlzdGVuZXIoKTtcclxuXHJcbmF2YXRhckVkaXRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICBhdmF0YXJGb3JtVmFsaWRhdGlvbi5yZXNldFZhbGlkYXRpb24oKTtcclxuICBhdmF0YXJGb3JtLm9wZW4oKTtcclxufSk7XHJcblxyXG4vLyA9PT0gJ0FkZCBjYXJkJyBmb3JtID09PSAvL1xyXG4vLyAtLS0gRm9ybSBjcmVhdGlvbiBtZXRob2QgLS0tIC8vXHJcbmNvbnN0IGFkZENhcmRGb3JtID0gbmV3IE1vZGFsV2l0aEZvcm0oXCIubW9kYWxfdHlwZV9hZGQtY2FyZFwiLCAoKSA9PiB7XHJcbiAgY29uc3QgbmV3Q2FyZCA9IGFkZENhcmRGb3JtLmdldElucHV0VmFsdWVzKCk7XHJcbiAgY2FyZHNTZWN0aW9uLmFkZEl0ZW0oZ2VuZXJhdGVDYXJkKG5ld0NhcmQpKTtcclxuICBhZGRDYXJkRm9ybS5jbG9zZSgpO1xyXG59KTtcclxuXHJcbi8vIC0tLSBTZXQgZXZlbnQgbGlzdGVuZXJzIGZvciAnYWRkIGNhcmQnIG1vZGFsIC0tLSAvL1xyXG5hZGRDYXJkRm9ybS5zZXRFdmVudExpc3RlbmVycygpO1xyXG5cclxuLy8gLS0tIE9wZW4gJ0FkZCBDYXJkJyBmb3JtIC0tLSAvL1xyXG5hZGRDYXJkQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgYWRkQ2FyZEZvcm1WYWxpZGF0aW9uLnJlc2V0VmFsaWRhdGlvbigpO1xyXG4gIGFkZENhcmRGb3JtLm9wZW4oKTtcclxufSk7XHJcblxyXG4vLyArKysrKyBWYWxpZGF0aW9uICsrKysrIC8vXHJcbi8vIC0tLSAnRWRpdCBwcm9maWxlJyBmb3JtIHZhbGlkYXRpb24gYWRkaW5nIC0tLSAvL1xyXG5jb25zdCBwcm9maWxlRm9ybVZhbGlkYXRpb24gPSBuZXcgRm9ybVZhbGlkYXRvcihmb3JtQ29uZmlnLCBwcm9maWxlTW9kYWwpO1xyXG5wcm9maWxlRm9ybVZhbGlkYXRpb24uZW5hYmxlVmFsaWRhdGlvbigpO1xyXG5cclxuLy8gLS0tICdBdmF0YXInIGZvcm0gdmFsaWRhdGlvbiBhZGRpbmcgLS0tIC8vXHJcbmNvbnN0IGF2YXRhckZvcm1WYWxpZGF0aW9uID0gbmV3IEZvcm1WYWxpZGF0b3IoZm9ybUNvbmZpZywgYXZhdGFyTW9kYWwpO1xyXG5hdmF0YXJGb3JtVmFsaWRhdGlvbi5lbmFibGVWYWxpZGF0aW9uKCk7XHJcblxyXG4vLyAtLS0gJ0FkZCBjYXJkJyBmb3JtIHZhbGlkYXRpb24gYWRkaW5nIC0tLSAvL1xyXG5jb25zdCBhZGRDYXJkRm9ybVZhbGlkYXRpb24gPSBuZXcgRm9ybVZhbGlkYXRvcihmb3JtQ29uZmlnLCBhZGRDYXJkTW9kYWwpO1xyXG5hZGRDYXJkRm9ybVZhbGlkYXRpb24uZW5hYmxlVmFsaWRhdGlvbigpO1xyXG5cclxuLy8gLS0tIFN0b3JlIHVzZXIgSUQgLS0tIC8vXHJcbmxldCB1c2VySWQ7IiwiaW1wb3J0IE1vZGFsIGZyb20gXCIuL01vZGFsLmpzXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNb2RhbFdpdGhJbWFnZSBleHRlbmRzIE1vZGFsIHtcclxuICAvLyAtLS0gT3BlbiBiaWcgaW1hZ2UgbW9kYWwgbWV0aG9kIC0tLSAvL1xyXG4gIG9wZW51cCA9IChldmVudCkgPT4ge1xyXG4gICAgY29uc3QgYmlnSW1hZ2UgPSBldmVudC50YXJnZXQ7XHJcbiAgICB0aGlzLl9tb2RhbEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5tb2RhbF9fYmlnLWltYWdlXCIpLnNyYyA9IGJpZ0ltYWdlLnNyYztcclxuICAgIHRoaXMuX21vZGFsRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLm1vZGFsX19iaWctaW1hZ2VcIikuYWx0ID0gYmlnSW1hZ2UuYWx0O1xyXG4gICAgdGhpcy5fbW9kYWxFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubW9kYWxfX2ltYWdlLWNhcHRpb25cIikudGV4dENvbnRlbnQgPSBiaWdJbWFnZS5hbHQ7XHJcblxyXG4gICAgdGhpcy5vcGVuKCk7XHJcbiAgfVxyXG59IiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2VjdGlvbiB7XHJcbiAgY29uc3RydWN0b3IoeyBpdGVtcywgcmVuZGVyZXIgfSwgY29udGFpbmVyU2VsZWN0b3IpIHtcclxuICAgIHRoaXMuX2l0ZW1zID0gaXRlbXM7XHJcbiAgICB0aGlzLl9yZW5kZXJlciA9IHJlbmRlcmVyO1xyXG4gICAgdGhpcy5fY29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihjb250YWluZXJTZWxlY3Rvcik7XHJcbiAgfVxyXG5cclxuICBhZGRJdGVtKGVsZW1lbnQpIHtcclxuICAgIHRoaXMuX2NvbnRhaW5lci5wcmVwZW5kKGVsZW1lbnQpO1xyXG4gIH1cclxuXHJcbiAgY2xlYXIgKCkge1xyXG4gICAgdGhpcy5fY29udGFpbmVyLmlubmVySFRNTCA9ICcnO1xyXG4gIH1cclxuXHJcbiAgcmVuZGVySXRlbXMoKSB7XHJcbiAgICB0aGlzLmNsZWFyKCk7XHJcbiAgICBcclxuICAgIHRoaXMuX2l0ZW1zLmZvckVhY2goKGNhcmQpID0+IHtcclxuICAgICAgdGhpcy5fcmVuZGVyZXIoY2FyZCk7XHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgVXNlckluZm8ge1xyXG4gIGNvbnN0cnVjdG9yKCB7bmFtZSwgam9iLCBhdmF0YXJ9ICkge1xyXG4gICAgdGhpcy5fbmFtZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYCR7bmFtZX1gKTtcclxuICAgIHRoaXMuX2pvYiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYCR7am9ifWApO1xyXG4gICAgdGhpcy5fYXZhdGFyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgJHthdmF0YXJ9YCk7XHJcbiAgICB0aGlzLnNldFVzZXJJbmZvID0gdGhpcy5zZXRVc2VySW5mby5iaW5kKHRoaXMpO1xyXG4gIH1cclxuXHJcbiAgZ2V0VXNlckluZm8oKSB7XHJcbiAgICBjb25zdCB1c2VySW5mbyA9IHt9O1xyXG4gICAgdXNlckluZm8udXNlck5hbWUgPSB0aGlzLl9uYW1lLnRleHRDb250ZW50O1xyXG4gICAgdXNlckluZm8udXNlckpvYiA9IHRoaXMuX2pvYi50ZXh0Q29udGVudDtcclxuXHJcbiAgICByZXR1cm4gdXNlckluZm87XHJcbiAgfVxyXG5cclxuICBzZXRVc2VySW5mbyhkYXRhKSB7XHJcbiAgICB0aGlzLl9uYW1lLnRleHRDb250ZW50ID0gZGF0YS5uYW1lO1xyXG4gICAgdGhpcy5fam9iLnRleHRDb250ZW50ID0gZGF0YS5qb2I7XHJcbiAgfVxyXG5cclxuICBzZXRVc2VyQXZhdGFyKCB7YXZhdGFyfSApIHtcclxuICAgIHRoaXMuX2F2YXRhci5zdHlsZS5iYWNrZ3JvdW5kSW1hZ2UgPSBgdXJsKCcke2F2YXRhcn0nKWA7XHJcbiAgfVxyXG59XHJcbiJdLCJuYW1lcyI6WyJmaXJzdENhbGwiLCJ1cmwiLCJoZWFkZXJzIiwiZmV0Y2giLCJ0aGVuIiwicmVzIiwib2siLCJqc29uIiwiUHJvbWlzZSIsInJlamVjdCIsInN0YXR1c1RleHQiLCJhcGkiLCJjb25zdHJ1Y3RvciIsImJhc2VVcmwiLCJ0aGlzIiwiZ2V0SW5pdGlhbENhcmRzIiwiX2Jhc2VVcmwiLCJfaGVhZGVycyIsImdldFVzZXJJbmZvIiwic2V0VXNlckF2YXRhciIsImRhdGEiLCJtZXRob2QiLCJib2R5IiwiSlNPTiIsInN0cmluZ2lmeSIsImF2YXRhciIsImxpbmsiLCJzZW5kTmV3RGF0YSIsInByb2ZpbGUiLCJuYW1lIiwiam9iIiwiY3JlYXRlTmV3Q2FyZCIsImNhcmQiLCJyZW1vdmVDYXJkIiwiY2FyZElkIiwiYWRkTGlrZSIsInJlbW92ZUxpa2UiLCJhdXRob3JpemF0aW9uIiwiQ2FyZCIsImNhcmREYXRhIiwidXNlciIsIm9uQ2FyZENsaWNrIiwicmVtb3ZlSGFuZGxlciIsImxpa2VIYW5kbGVyIiwiY2FyZFNlbGVjdG9yIiwiX25hbWUiLCJfbGluayIsIl9jYXJkSWQiLCJfaWQiLCJfb3duZXJJZCIsIm93bmVyIiwiX3VzZXJJRCIsIl9saWtlcyIsImxpa2VzIiwiX2NhcmRTZWxlY3RvciIsIl9vbkNhcmRDbGljayIsIl9saWtlSGFuZGxlciIsIl9yZW1vdmVIYW5kbGVyIiwiX2dldFRlbXBsYXRlIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiY29udGVudCIsImNsb25lTm9kZSIsImRlbGV0ZUNhcmQiLCJfaXRlbSIsInJlbW92ZSIsIl9yZW5kZXJMaWtlcyIsImlzTGlrZWQiLCJjbGFzc0xpc3QiLCJhZGQiLCJ0ZXh0Q29udGVudCIsImxlbmd0aCIsInNvbWUiLCJfdXNlcklkIiwidXBkYXRlTGlrZXMiLCJuZXdMaWtlcyIsIl9zZXRFdmVudExpc3RlbmVycyIsImFkZEV2ZW50TGlzdGVuZXIiLCJldmVudCIsIl9saWtlQ2FyZCIsIl9jYXJkSW1hZ2UiLCJnZW5lcmF0ZUNhcmQiLCJfZWxlbWVudCIsInNyYyIsImFsdCIsIkZvcm1WYWxpZGF0b3IiLCJmb3JtQ29uZmlnIiwiZm9ybUVsZW1lbnQiLCJfZm9ybUNvbmZpZyIsIl9mb3JtRWxlbWVudCIsIl9zaG93SW5wdXRFcnJvciIsImlucHV0RWxlbWVudCIsImVycm9yTWVzc2FnZSIsImlucHV0RXJyb3JDbGFzcyIsImVycm9yTWVzc2FnZUNsYXNzIiwiZXJyb3JFbGVtZW50IiwiaWQiLCJfaGlkZUlucHV0RXJyb3IiLCJyZXNldFZhbGlkYXRpb24iLCJpbnB1dHMiLCJmb3JFYWNoIiwiaW5wdXQiLCJfdG9nZ2xlU3VibWl0QnV0dG9uIiwiX2NoZWNrSW5wdXQiLCJ2YWxpZGl0eSIsInZhbGlkIiwidmFsaWRhdGlvbk1lc3NhZ2UiLCJfY2hlY2tJZkZvcm1WYWxpZCIsImV2ZXJ5IiwiaW5hY3RpdmVCdXR0b25DbGFzcyIsInN1Ym1pdEJ1dHRvblNlbGVjdG9yIiwiYnV0dG9uRWxlbWVudCIsImRpc2FibGVkIiwiaW5wdXRTZWxlY3RvciIsIkFycmF5IiwiZnJvbSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJlbmFibGVWYWxpZGF0aW9uIiwicHJldmVudERlZmF1bHQiLCJlZGl0QnV0dG9uIiwicHJvZmlsZU1vZGFsIiwiZm9ybXMiLCJhdmF0YXJFZGl0QnV0dG9uIiwiZWxlbWVudHMiLCJhdmF0YXJNb2RhbCIsImFkZENhcmRCdXR0b24iLCJhZGRDYXJkTW9kYWwiLCJhZGRDYXJkRm9ybSIsInRpdGxlIiwiZm9ybVNlbGVjdG9yIiwiTW9kYWwiLCJtb2RhbFNlbGVjdG9yIiwiX21vZGFsRWxlbWVudCIsIl9jaGVja0ZvckVzY0Nsb3NlIiwia2V5IiwiY2xvc2UiLCJvcGVuIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInNldEV2ZW50TGlzdGVuZXJzIiwidGFyZ2V0IiwiY29udGFpbnMiLCJNb2RhbFdpdGhGb3JtIiwiaGFuZGxlU3VibWl0Iiwic3VwZXIiLCJfaGFuZGxlU3VibWl0QnRuIiwiZ2V0SW5wdXRWYWx1ZXMiLCJpbnB1dExpc3QiLCJpbnB1dFZhbHVlcyIsInZhbHVlIiwic2V0SW5wdXRWYWx1ZXMiLCJ2YWx1ZXMiLCJyZXNldCIsIk1vZGFsRGVsZXRlQ29uZmlybWF0aW9uIiwic2VsZWN0b3IiLCJfZm9ybSIsIl9zZWxlY3RvciIsIl9oYW5kbGVTdWJtaXQiLCJfaGFuZGxlU3VibWl0SGFuZGxlciIsImJpbmQiLCJfcmVtb3ZlRXZlbnRMaXN0ZW5lcnMiLCJiaWdJbWFnZU1vZGFsIiwib3BlbnVwIiwiYmlnSW1hZ2UiLCJjYXJkc1NlY3Rpb24iLCJpdGVtcyIsInJlbmRlcmVyIiwiY29udGFpbmVyU2VsZWN0b3IiLCJfaXRlbXMiLCJfcmVuZGVyZXIiLCJfY29udGFpbmVyIiwiYWRkSXRlbSIsImVsZW1lbnQiLCJwcmVwZW5kIiwiY2xlYXIiLCJpbm5lckhUTUwiLCJyZW5kZXJJdGVtcyIsIml0ZW0iLCJ1c2VySWQiLCJoYW5kbGVDYXJkQ2xpY2siLCJldnQiLCJoYW5kbGVEZWxldGVDYXJkIiwic2V0QWN0aW9uIiwiY2F0Y2giLCJlcnIiLCJjb25zb2xlIiwibG9nIiwiaGFuZGxlTGlrZXMiLCJjcmVhdGVDYXJkIiwidXNlckluZm9WYWx1ZXMiLCJfam9iIiwiX2F2YXRhciIsInNldFVzZXJJbmZvIiwidXNlckluZm8iLCJ1c2VyTmFtZSIsInVzZXJKb2IiLCJzdHlsZSIsImJhY2tncm91bmRJbWFnZSIsImFib3V0IiwiZWRpdFByb2ZpbGVGb3JtIiwicHJvZmlsZUZvcm1WYWxpZGF0aW9uIiwiYXZhdGFyRm9ybSIsImF2YXRhckZvcm1WYWxpZGF0aW9uIiwibmV3Q2FyZCIsImFkZENhcmRGb3JtVmFsaWRhdGlvbiJdLCJzb3VyY2VSb290IjoiIn0=