!function(){"use strict";class e{constructor(e,t){this._formConfig=e,this._formElement=t}_showInputError=(e,t)=>{const{inputErrorClass:s,errorMessageClass:r}=this._formConfig,n=this._formElement.querySelector(` #${e.id}_error `);n.textContent=t,n.classList.add(r),e.classList.add(s)};_hideInputError=e=>{const{inputErrorClass:t,errorMessageClass:s}=this._formConfig,r=this._formElement.querySelector(` #${e.id}_error `);r.textContent="",r.classList.remove(s),e.classList.remove(t)};resetValidation(){this.inputs.forEach((e=>{this._hideInputError(e)})),this._toggleSubmitButton()}_checkInput=e=>{e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)};_checkIfFormValid=()=>this.inputs.every((e=>e.validity.valid));_toggleSubmitButton(){const{inactiveButtonClass:e,submitButtonSelector:t}=this._formConfig,s=this._formElement.querySelector(t);this._checkIfFormValid()?(s.disabled=!1,s.classList.remove(e)):(s.disabled=!0,s.classList.add(e))}_setEventListeners=()=>{const{inputSelector:e}=this._formConfig;return this.inputs=Array.from(this._formElement.querySelectorAll(e)),this.inputs.forEach((e=>{e.addEventListener("input",(()=>{this._checkInput(e),this._toggleSubmitButton()}))})),this._formElement};enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}}class t{constructor({data:e,onCardClick:t,removeHandler:s,likeHandler:r},n,i){this._name=e.name,this._link=e.link,this._likes=e.likes,this._ownerId=e.owner._id,this._id=e._id,this._template=n,this._userId=i,this._onCardClick=t,this._likeHandler=r,this._removeHandler=s}_getTemplate(){return this._template.content.querySelector(".card").cloneNode(!0)}_setAttributes(e,t){for(const s in t)e.setAttribute(s,t[s])}deleteCard(){const e=document.getElementById(id);e&&e.parentNode.removeChild(e),this._cardElement=null}_renderLikes(){this._likes.forEach((e=>e._id===this._userId?this._likeCard():this._unlikeCard()))}showLikes(e){this._cardElement.querySelector(".card__like-count").textContent=e}isLiked(){return this._liked}_checkForLike(e){return this._likes.find((t=>t._id===e))?this._liked=!0:this._liked=!1,this._liked}_setEventListeners(){this._cardElement.querySelector(".card__like-button").addEventListener("click",(e=>{this._likeCard(e)})),this._cardElement.querySelector(".card__delete-button").addEventListener("click",(()=>{this._removeHandler(this._id)})),this._cardElement.addEventListener("click",(e=>{this._onCardClick(e)}))}_showDeleteIcon(){this._userId!=this._ownerId&&this._cardElement.querySelector(".card__delete-button").classList.add("card__delete-button_hidden")}getCardId(){return this._id}generateCard(){return this._cardElement=this._getTemplate(),this.likeIcon=this._cardElement.querySelector(".card__like-button"),this._setAttributes(this._cardElement.querySelector(".card__image"),{src:this._link,alt:this._name}),this._cardElement.querySelector(".card__title").textContent=this._name,this._showDeleteIcon(),this.showLikes(this._likes.length),this._setEventListeners(),this._renderLikes(),this._cardElement}_likeCard(){this.likeIcon.classList.add("card__like-button_active")}_unlikeCard(){this.likeIcon.classList.remove("card__like-button_active")}updateCard(){this._likes=data.likes,this._checkForLike(user.id)?this._likeCard:this._unlikeCard,this._cardElement.querySelector(".card__like-count").textContent=this._likes.length}}class s{constructor(e,t){console.log(e),this._modalElement=document.querySelector(e),this._escapeKeyHandler=this._escapeKeyHandler.bind(this),this._checkKeyPress=t}open(){this._modalElement.classList.add("modal_visible"),document.addEventListener("keyup",this._escapeKeyHandler)}close(){this._modalElement.classList.remove("modal_visible"),document.removeEventListener("keyup",this._escapeKeyHandler)}_escapeKeyHandler(e){this._checkKeyPress(e.key)&&this.close()}setEventListeners(){this._modalElement.addEventListener("click",(e=>{e.target.classList.contains("modal__close-button")&&this.close(),e.target.classList.contains("modal_visible")&&this.close()}))}}class r extends s{constructor(e,t,s){super(e,t),this._handleSubmit=s,this._submitButton=this._modalElement.querySelector(".modal__submit-button"),this._form=document.querySelector(".modal__container"),this._textInButton=this._submitButton.textContent}_getInputValues(){return this._inputList=this._modalElement.querySelectorAll(".modal__input"),this._formInputValues={},this._inputList.forEach((e=>{this._formInputValues[e.name]=e.value})),this._entredValue||this._inputValues}setInputValues(e){this._entredValue=e}setEventListeners(){this._modalElement.addEventListener("submit",(e=>{e.preventDefault(),this._submitButton.textContent="Saving...",this._handleSubmit(this._getInputValues())}))}close(){this._submitButton.textContent=this._textInButton,this._form.reset(),super.close()}}class n{constructor({items:e,renderer:t},s){this._renderedElements=e,this._renderer=t,this._container=document.querySelector(s)}renderItems(){this._renderedElements.forEach((e=>{this._renderer(e)}))}addItem(e){this._container.prepend(e)}}const i=document.querySelector(".profile__edit-button"),o=document.querySelector(".modal_type_edit"),a=document.querySelector(".profile__title"),d=(document.querySelector(".modal__input_type_title"),document.querySelector(".profile__subtitle")),l=(document.querySelector(".modal__input_type_subtitle"),document.querySelector(".modal__close-button_type_edit"),document.querySelector(".profile__image")),_=document.querySelector(".profile__image-edit"),c=document.querySelector(".modal_type_avatar"),h=c.querySelector(".modal__input_type_avatar"),u=(document.querySelector(".modal__close-button_type_avatar"),document.querySelector(".profile__add-button")),m=document.querySelector(".modal_type_add-card"),p=document.querySelector(".modal__input_type_name"),y=document.querySelector(".modal__input_type_link"),b=(document.querySelector(".modal__close-button_type_add-card"),document.forms.add),k=(b.elements.title,b.elements.link,document.querySelector(".modal__submit-button"),document.querySelector(".cards__grid"),document.querySelector("#card__template")),E=document.querySelector(".modal_type_big-image"),C=E.querySelector(".modal__image"),v=E.querySelector(".modal__image-caption"),f=(document.querySelector(".modal__close-button_type_big-image"),document.querySelector(".modal_type_delete-card")),S={formSelector:".modal__container",inputSelector:".modal__input",submitButtonSelector:".modal__submit-button",inactiveButtonClass:"modal__submit-button_disabled",inputErrorClass:"modal__input_error",errorMessageClass:"modal__error_visible"},g=e=>"Escape"===e,I=()=>{p.value="",y.value=""},L=new e(S,o),q=new e(S,c),U=new e(S,m),w=e=>console.log(e),x=new class{constructor({baseUrl:e,headers:t}){this._baseUrl=e,this._headers=t}_response(e){return e.ok?e.json():Promise.reject(`Error: ${e.status} - ${e.statusText}`)}getCardList(){return fetch(this._baseUrl+"/cards",{headers:this._headers}).then(this._response)}getUserInfo(){return fetch(this._baseUrl+"/users/me",{headers:this._headers}).then(this._response)}updateUserInfo(e){return fetch(this._baseUrl+"/users/me",{headers:this._headers,method:"PATCH",body:JSON.stringify(e)}).then(this._response)}addCard(e){return fetch(this._baseUrl+"/cards",{headers:this._headers,method:"POST",body:JSON.stringify(e)}).then(this._response)}removeCard(e){return fetch(this._baseUrl+`/cards/${e}`,{headers:this._headers,method:"DELETE"}).then(this._response)}likeCard(e,t){return fetch(this._baseUrl+`/cards/likes/${e}`,{headers:this._headers,method:"PUT",body:JSON.stringify(t)}).then(this._response)}unlikeCard(e){return fetch(this._baseUrl+`/cards/likes/${e}`,{headers:this._headers,method:"DELETE"}).then(this._response)}updateUserAvatar(e){return fetch(this._baseUrl+"/users/me/avatar",{headers:this._headers,method:"PATCH",body:JSON.stringify(e)}).then(this._response)}}({baseUrl:"https://around.nomoreparties.co/v1/group-12",headers:{authorization:"709a0d9d-db06-4890-a594-b07e7309a353","Content-Type":"application/json"}}),V=new class{constructor(e,t,s){this._name=e,this._job=t,this._avatar=s}getUserInfo(){return this._userInfo={name:this._name.textContent,job:this._job.textContent}}setUserInfo(e){const{name:t,job:s,userAvatar:r}=e;this._name.textContent=t,this._job.textContent=s,this._avatar.src=r}}(a,d,l);x.getUserInfo().then((e=>(V.setUserInfo(e),V))).then((e=>{x.getCardList().then((s=>{const i=e.getUserInfo(),o=e=>{T.setInputValues(e),T.open()},a=t=>{t.isLiked()?x.unlikeCard(t.getCardId()).then((e=>{t.updateCard(e,i)})).catch(w):x.likeCard(t.getCardId(),e.getUserInfo()).then((e=>{t.updateCard(e,i)})).catch(w)},d=(e,t)=>{E.open({url:e,text:t})},l=e=>new t({cardData:e,onCardClick:d,deleteCardHandler:o,likeButtonClickHandler:a},k),_=new n({items:s,renderer:e=>{const t=l(e);_.addItem(t.generateCard(user.id))}},cardsSectionSelector);_.renderItems();const c=new r(".modal_type_add-card",g,(({cardInputTitle:e,cardInputLink:t})=>{x.addCard({name:e,link:t}).then((e=>{const t=l(e);_.addItem(t.generateCard(user.id)),I(),U.enableValidation(),c.close(I)})).catch(w)}));c.setEventListeners(),T.setEventListeners(),u.addEventListener("click",(()=>{U.resetValidation(),c.open()}))})).catch(w)})).catch(w);const B=new r(o,g,(({nameInput:e,jobInput:t})=>{x.updateUserInfo({name:e,job:t}).then((e=>{V.setUserInfo(e),L.enableValidation(),B.close()})).catch(w)}));B.setEventListeners(),i.addEventListener("click",(()=>{I(),o.resetValidation(),B.open()}));const H=new r(c,g,(({avatarModalInput:e})=>{x.setUserAvatar({avatar:e}).then((e=>{V.setUserInfo(e),q.enableValidation(),H.close()})).catch(w)}));H.setEventListeners(),_.addEventListener("click",(()=>{h.value="",c.resetValidation(),H.open()}));const T=new r(f,g,(e=>{x.deleteCard(e.getCardId()).then((()=>{e.deleteCard(),T.close()})).catch(w)}));new class extends s{constructor(e){super(e),this._modalImage=document.querySelector(".modal__image"),this._modalTitle=document.querySelector(".modal__image-caption")}open(e,t){super.open(e,t),this._modalTitle.textContent=t,this._modalImage.src=e,this._modalImage.alt=t}}(E,g,C,v).setEventListeners()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,