!function(){"use strict";class e{constructor({baseUrl:e,headers:t}){this.baseUrl=e,this.headers=t}getInitialCards(){return fetch(this.baseUrl+"/cards",{headers:this.headers}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}getUserInfo(){return fetch(this.baseUrl+"/users/me",{headers:this.headers}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}addCard({name:e,link:t}){return fetch(this.baseUrl+"/cards",{headers:this.headers,method:"POST",body:JSON.stringify({name:e,link:t})}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}removeCard(e){return fetch(this.baseUrl+"/cards/"+e,{headers:this.headers,method:"DELETE"}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}getAppInfo(){return Promise.all([this.getInitialCards(),this.getUserInfo()])}addLike(e){return fetch(this.baseUrl+"/cards/likes/"+e.getId(),{headers:this.headers,method:"PUT"}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}removeLike(e){return fetch(this.baseUrl+"/cards/likes/"+e.getId(),{headers:this.headers,method:"DELETE"}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}updateUserInfo({name:e,about:t}){return fetch(this.baseUrl+"/users/me",{headers:this.headers,method:"PATCH",body:JSON.stringify({name:e,about:t})}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}setUserAvatar({avatar:e}){return fetch(this.baseUrl+"/users/me/avatar",{headers:this.headers,method:"PATCH",body:JSON.stringify({avatar:e})}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}}new e({baseUrl:"https://around.nomoreparties.co/v1/group-12",headers:{authorization:"709a0d9d-db06-4890-a594-b07e7309a353","Content-Type":"application/json"}});class t{constructor({cardData:e,user:t,onCardClick:s,removeHandler:r,likeHandler:i},n){this._name=e.name,this._link=e.link,this._cardId=e._id,this._ownerId=e.owner._id,this._userID=t,this._likes=e.likes,this._cardSelector=n,this._onCardClick=s,this._likeHandler=i,this._removeHandler=r}_getTemplate(){return document.querySelector("#card__template").content.querySelector(".card").cloneNode(!0)}deleteCard(){this._item.remove(),this._item=null}_renderLikes(){this.isLiked()?this._item.querySelector(".card__like-button").classList.add("card__like-button_active"):this._item.querySelector(".card__like-button").classList.remove("card__like-button_active"),this._item.querySelector(".card__like-counter").textContent=this._likes.length}isLiked(){return this._likes.some((e=>e._id===this._userId))}updateLikes(e){this._likes=e,this._renderLikes()}_setEventListeners(){this._item.querySelector(".card__like-button").addEventListener("click",(e=>{this._likeCard(e)})),this._item.querySelector(".card__delete-button").addEventListener("click",(()=>{this._removeHandler(this._cardId)})),this._cardImage.addEventListener("click",(e=>{this._onCardClick(e)}))}generateCard(){return this._item=this._getTemplate(),this._ownerId!==this._userId&&this._element.querySelector(".card__delete-button").classList.add("card__delete-button_hidden"),this._cardImage=this._item.querySelector(".card__image"),this._item.querySelector(".card__title").textContent=this._name,this._cardImage.src=this._link,this._cardImage.alt=`Image of  ${this._name} `,this._renderLikes(),this._setEventListeners(),this._item}}class s{constructor(e,t){this._formConfig=e,this._formElement=t}_showInputError=(e,t)=>{const{inputErrorClass:s,errorMessageClass:r}=this._formConfig,i=this._formElement.querySelector(` #${e.id}_error `);i.textContent=t,i.classList.add(r),e.classList.add(s)};_hideInputError=e=>{const{inputErrorClass:t,errorMessageClass:s}=this._formConfig,r=this._formElement.querySelector(` #${e.id}_error `);r.textContent="",r.classList.remove(s),e.classList.remove(t)};resetValidation(){this.inputs.forEach((e=>{this._hideInputError(e)})),this._toggleSubmitButton()}_checkInput=e=>{e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)};_checkIfFormValid=()=>this.inputs.every((e=>e.validity.valid));_toggleSubmitButton(){const{inactiveButtonClass:e,submitButtonSelector:t}=this._formConfig,s=this._formElement.querySelector(t);this._checkIfFormValid()?(s.disabled=!1,s.classList.remove(e)):(s.disabled=!0,s.classList.add(e))}_setEventListeners=()=>{const{inputSelector:e}=this._formConfig;return this.inputs=Array.from(this._formElement.querySelectorAll(e)),this.inputs.forEach((e=>{e.addEventListener("input",(()=>{this._checkInput(e),this._toggleSubmitButton()}))})),this._formElement};enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}}class r{constructor({items:e,renderer:t},s){this._items=e,this._renderer=t,this._container=document.querySelector(s)}addItem(e){this._container.prepend(e)}clear(){this._container.innerHTML=""}renderItems(){this.clear(),this._items.forEach((e=>{this._renderer(e)}))}}const i=document.querySelector(".profile__edit-button"),n=document.forms.profile,o=(n.elements.name,n.elements.job,document.querySelector(".modal__close-button_type_edit"),document.querySelector(".profile__add-button")),a=document.querySelector(".modal_type_add-card"),l=(document.querySelector(".modal__input_type_name"),document.querySelector(".modal__input_type_link"),document.querySelector(".modal__close-button_type_add-card"),document.forms.add),d=(l.elements.title,l.elements.link,document.querySelector(".modal__submit-button"),document.querySelector(".cards__grid"),document.querySelector(".modal_type_big-image"),document.querySelector(".modal__big-image"),document.querySelector(".modal__image-caption"),document.querySelector(".modal__close-button_type_big-image"),{formSelector:".modal__container",inputSelector:".modal__input",submitButtonSelector:".modal__submit-button",inactiveButtonClass:"modal__submit-button_disabled",inputErrorClass:"modal__input_error",errorMessageClass:"modal__error_visible"});class c{constructor(e){this._modalElement=document.querySelector(e)}_checkForEscClose=e=>{"Escape"===e.key&&this.close()};open=()=>{this._modalElement.classList.add("modal_visible"),document.addEventListener("keyup",this._checkForEscClose)};close=()=>{this._modalElement.classList.remove("modal_visible"),document.removeEventListener("keyup",this._checkForEscClose)};setEventListeners(){this._modalElement.querySelector(".modal__close-button").addEventListener("click",(e=>{this.close(e)})),this._modalElement.addEventListener("click",(e=>{e.target.classList.contains("modal_visible")&&this.close(e)}))}}class _ extends c{constructor(e,t){super(e),this._handleSubmitBtn=t,this._formElement=this._modalElement.querySelector(".modal__container")}getInputValues(){const e=Array.from(this._formElement.querySelectorAll(".modal__input")),t={};return e.forEach((e=>{t[e.name]=e.value})),t}setInputValues(e){Array.from(this._formElement.querySelectorAll(".modal__input")).forEach((t=>{t.value=e[t.name]}))}setEventListeners(){super.setEventListeners(),this._formElement.addEventListener("submit",(()=>{this._handleSubmitBtn(this.getInputValues()),this.close(),this._formElement.reset()}))}close(){super.close(),this._formElement.reset()}}class m extends c{constructor(e,t){super(e),this._form=document.querySelector(this._selector),this._handleSubmit=t,this._handleSubmitHandler=this._handleSubmitHandler.bind(this)}_handleSubmitHandler(e){e.preventDefault(),this._handleSubmit(),super.close()}_setEventListeners(){super._setEventListeners(),this._form.addEventListener("submit",this._handleSubmitHandler)}_removeEventListeners(){super._removeEventListeners(),this._form.removeEventListener("submit",this._handleSubmitHandler)}}function h(s,r,i){return new t({cardData:s,isLiked:e=>void 0!==e.find((e=>e._id===r._id)),isOwner:e=>r._id===e,onCardClick:e=>{u.open(e)},deleteCardHandler:(t,s)=>{const r=new m(".delete-card",(()=>{e.removeCard(t).then((e=>s.removeCard())).catch((e=>console.log(e))).finally((function(){r.close()}))}));r.open()},likeHandler:t=>{void 0!==t._likes.find((e=>e._id===r._id))?e.removeLike(t).then((e=>{t._likes=e.likes,t.setLikes(e.likes.length)})):e.addLike(t).then((e=>{t._likes=e.likes,t.setLikes(e.likes.length)}))}},"#card")}e.getAppInfo().then((([t,s])=>{const i=new r({data:t,renderer:function(e){const t=h(e,s);i.addItem(t.generateCard())}},".cards__grid");i.renderItems(),user.setUserInfo({name:s.name,job:s.about}),user.setUserAvatar({avatar:s.avatar});const n=new _(".add-card",(t=>{e.addCard({name:t.name,link:t.link}).then((e=>{const t=h(e,s);i.addItem(t.generateCard())})).catch((e=>console.log(e))).finally((function(){n.close()}))}));o.addEventListener("click",(()=>{f.resetValidation(),n.open()}))})).catch((e=>console.log(e)));const u=new class extends c{openup=e=>{const t=e.target;this._modalElement.querySelector(".modal__big-image").src=t.src,this._modalElement.querySelector(".modal__big-image").alt=t.alt,this._modalElement.querySelector(".modal__image-caption").textContent=t.alt,this.open()}}(".modal_type_big-image");u.setEventListeners();const b=new class{constructor({name:e,job:t,avatar:s}){this._name=document.querySelector(`${e}`),this._job=document.querySelector(`${t}`),this._avatar=document.querySelector(`${s}`)}getUserInfo(){return{name:this._name.textContent,job:this._job.textContent,avatar:this._avatar.src}}setUserInfo({name:e,job:t}){this._name.textContent=e,this._job.textContent=t}setUserAvatar({avatar:e}){this._avatar.src=e}}(".profile__title",".profile__subtitle"),p=new _(".modal_type_edit",(e=>{b.setUserInfo(p.getInputValues()),p.close()}));p.setEventListeners(),i.addEventListener("click",(()=>{p.setInputValues(b.getUserInfo()),E.resetValidation(),p.open()}));const v=new _(".modal_type_add-card",(()=>{const e=v.getInputValues();cardsSection.addItem(generateCard(e)),v.close()}));v.setEventListeners();const E=new s(d,n);E.enableValidation(),new s(d,avatarModal).enableValidation();const f=new s(d,a);f.enableValidation()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,