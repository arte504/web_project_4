!function(){"use strict";class e{constructor({cardData:e,user:t,onCardClick:r,removeHandler:s,likeHandler:o},i){this._name=e.name,this._link=e.link,this._cardId=e._id,this._ownerId=e.owner._id,this._userID=t,this._likes=e.likes,this._cardSelector=i,this._onCardClick=r,this._likeHandler=o,this._removeHandler=s}_getTemplate(){return document.querySelector("#card__template").content.querySelector(".card").cloneNode(!0)}deleteCard(){this._item.remove(),this._item=null}_renderLikes(){this.isLiked()?this._item.querySelector(".card__like-button").classList.add("card__like-button_active"):this._item.querySelector(".card__like-button").classList.remove("card__like-button_active"),this._item.querySelector(".card__like-counter").textContent=this._likes.length}isLiked(){return this._likes.some((e=>e._id===this._userId))}updateLikes(e){this._likes=e,this._renderLikes()}_setEventListeners(){this._item.querySelector(".card__like-button").addEventListener("click",(e=>{this._likeCard(e)})),this._item.querySelector(".card__delete-button").addEventListener("click",(()=>{this._removeHandler(this._cardId)})),this._cardImage.addEventListener("click",(e=>{this._onCardClick(e)}))}generateCard(){return this._item=this._getTemplate(),this._ownerId!==this._userId&&this._element.querySelector(".card__delete-button").classList.add("card__delete-button_hidden"),this._cardImage=this._item.querySelector(".card__image"),this._item.querySelector(".card__title").textContent=this._name,this._cardImage.src=this._link,this._cardImage.alt=`Image of  ${this._name} `,this._renderLikes(),this._setEventListeners(),this._item}}class t{constructor(e,t){this._formConfig=e,this._formElement=t}_showInputError=(e,t)=>{const{inputErrorClass:r,errorMessageClass:s}=this._formConfig,o=this._formElement.querySelector(` #${e.id}_error `);o.textContent=t,o.classList.add(s),e.classList.add(r)};_hideInputError=e=>{const{inputErrorClass:t,errorMessageClass:r}=this._formConfig,s=this._formElement.querySelector(` #${e.id}_error `);s.textContent="",s.classList.remove(r),e.classList.remove(t)};resetValidation(){this.inputs.forEach((e=>{this._hideInputError(e)})),this._toggleSubmitButton()}_checkInput=e=>{e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)};_checkIfFormValid=()=>this.inputs.every((e=>e.validity.valid));_toggleSubmitButton(){const{inactiveButtonClass:e,submitButtonSelector:t}=this._formConfig,r=this._formElement.querySelector(t);this._checkIfFormValid()?(r.disabled=!1,r.classList.remove(e)):(r.disabled=!0,r.classList.add(e))}_setEventListeners=()=>{const{inputSelector:e}=this._formConfig;return this.inputs=Array.from(this._formElement.querySelectorAll(e)),this.inputs.forEach((e=>{e.addEventListener("input",(()=>{this._checkInput(e),this._toggleSubmitButton()}))})),this._formElement};enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}}class r{constructor({items:e,renderer:t},r){this._items=e,this._renderer=t,this._container=document.querySelector(r)}addItem(e){this._container.prepend(e)}clear(){this._container.innerHTML=""}renderItems(){this.clear(),this._items.forEach((e=>{this._renderer(e)}))}}const s=document.querySelector(".profile__edit-button"),o=document.forms.profile,i=document.querySelector(".profile__title"),n=(o.elements.name,document.querySelector(".profile__subtitle")),a=(o.elements.job,document.querySelector(".modal__close-button_type_edit"),document.querySelector(".profile__image")),l=document.querySelector(".profile__image-edit"),c=document.forms.avatar,d=(c.elements.link,document.querySelector(".modal__close-button_type_avatar"),document.querySelector(".profile__add-button")),_=document.querySelector(".modal_type_add-card"),m=(document.querySelector(".modal__input_type_name"),document.querySelector(".modal__input_type_link"),document.querySelector(".modal__close-button_type_add-card"),document.forms.add),u=(m.elements.title,m.elements.link,document.querySelector(".modal__submit-button"),document.querySelector(".cards__grid"),document.querySelector(".modal_type_big-image")),h=(document.querySelector(".modal__big-image"),document.querySelector(".modal__image-caption"),document.querySelector(".modal__close-button_type_big-image"),document.querySelector(".modal_type_delete-card")),b={formSelector:".modal__container",inputSelector:".modal__input",submitButtonSelector:".modal__submit-button",inactiveButtonClass:"modal__submit-button_disabled",inputErrorClass:"modal__input_error",errorMessageClass:"modal__error_visible"};class f{constructor(e){this._modalSelector=e,this._checkForEscClose=this._checkForEscClose.bind(this)}_checkForEscClose=e=>{"Escape"===e.key&&this.close()};open=()=>{this._modalSelector.classList.add("modal_visible"),document.addEventListener("keyup",this._checkForEscClose)};close=()=>{this._modalSelector.classList.remove("modal_visible"),document.removeEventListener("keyup",this._checkForEscClose)};setEventListeners(){this._modalSelector.querySelector(".modal__close-button").addEventListener("click",(e=>{this.close(e)})),this._modalSelector.addEventListener("click",(e=>{e.target.classList.contains("modal_visible")&&this.close(e)}))}}class k extends f{constructor(e,t){super(e),this._handleSubmitBtn=t,this._formElement=e.querySelector(".modal__container")}getInputValues(){const e=Array.from(this._formElement.querySelectorAll(".modal__input")),t={};return e.forEach((e=>{t[e.name]=e.value})),t}setInputValues(e){Array.from(this._formElement.querySelectorAll(".modal__input")).forEach((t=>{t.value=e[t.name]}))}saving(e){this._formElement.querySelector(".modal__submit-button").textContent=e?"Saving...":"Save"}setEventListeners(){super.setEventListeners(),this._formElement.addEventListener("submit",(()=>{this._handleSubmitBtn(this.getInputValues()),this.close()}))}close(){super.close(),this._formElement.reset()}}class p{constructor(e,t,r){this._name=e,this._job=t,this._avatar=r}getUserInfo(){return this._userInfo={title:this._title.textContent,job:this._job.textContent}}setUserInfo(e,t,r){this._userInfo={title:e,job:t,userAvatar:r},r?(avatarImage.src=this._userInfo.userAvatar,profileName.textContent=this._userInfo.title,profileJob.textContent=this._userInfo.job):(profileName.textContent=this._userInfo.title,profileJob.textContent=this._userInfo.job)}}const v=new class extends f{openup=e=>{const t=e.target;this._modalElement.querySelector(".modal__big-image").src=t.src,this._modalElement.querySelector(".modal__big-image").alt=t.alt,this._modalElement.querySelector(".modal__image-caption").textContent=t.alt,this.open()}}(u);v.setEventListeners();const g=new k(h);function S(e,t){t.querySelector(".modal__submit-button").textContent=e?"Saving...":"Save"}g.setEventListeners();const E=new class{constructor({baseUrl:e,headers:t}){this._baseUrl=e,this._headers=t}getCardList(){return fetch(this._baseUrl+"/cards",{headers:this._headers}).then((function(e){if(e.ok)return e.json().then((e=>e));Promise.reject("Error!"+e.statusText)}))}getUserInfo(){return fetch(this._baseUrl+"/users/me",{headers:this._headers}).then((e=>e.ok?e.json():Promise.reject("Error!"+e.statusText)))}getAppInfo(){return Promise.all([this.getUserInfo(),this.getCardList()])}addCard({name:e,link:t}){return fetch(this._baseUrl+"/cards",{headers:this._headers,method:"POST",body:JSON.stringify({name:e,link:t})}).then((e=>{if(e.ok)return e.json();Promise.reject("Error!"+e.statusText)}))}removeCard(e){return fetch(this._baseUrl+"/cards/"+e,{headers:this._headers,method:"DELETE"}).then((e=>e.ok?e.json():Promise.reject("Error!"+e.statusText)))}addLike(e){return fetch(this._baseUrl+"/cards/likes/"+e,{headers:this._headers,method:"PUT"}).then((e=>{if(e.ok)return e.json();Promise.reject("Error!"+e.statusText)}))}removeLike(e){return fetch(this._baseUrl+"/cards/likes/"+e,{headers:this._headers,method:"DELETE"}).then((e=>e.ok?e.json():Promise.reject("Error!"+e.statusText)))}setUserInfo({name:e,job:t}){return fetch(this._baseUrl+"/users/me",{headers:this._headers,method:"PATCH",body:JSON.stringify({name:e,job:t})}).then((e=>e.ok?e.json():Promise.reject("Error!"+e.statusText+e.status)))}setUserAvatar({avatar:e}){return fetch(this._baseUrl+"/users/me/avatar",{headers:this._headers,method:"PATCH",body:JSON.stringify({avatar:e})}).then((e=>e.ok?e.json():Promise.reject("Error!"+e.statusText)))}updateUserInfo({name:e,job:t}){return fetch(this._baseUrl+"/users/me",{headers:this._headers,method:"PATCH",body:JSON.stringify({name:e,job:t})}).then((e=>e.ok?e.json():Promise.reject("Error!"+e.statusText)))}}({baseUrl:"https://around.nomoreparties.co/v1/group-6",headers:{authorization:"709a0d9d-db06-4890-a594-b07e7309a353","Content-Type":"application/json"}});E.getAppInfo().then((([t,o])=>{const l=new r({items:o,renderer:m},".cards__grid");E.getUserInfo().then((e=>{u.setUserInfo(e.name,e.job,e.avatar)})),l.renderItems();const c=new k({modalSelector:_,modalSubmition:e=>{S(!0,addImageModal),E.addCard(e).then((e=>{console.log(e),m(e),c.close(),S(!1,addImageModal)})).catch((e=>console.log(e)))}});function m(r){const s=new e({data:r,handleCardClick:({name:e,link:t})=>{v.open(t,e)},handleDeleteClick:e=>{g.open(e),g.setSubmitHandler((()=>{E.removeCard(e).then((()=>{s.deleteCard(),g.close()})).catch((e=>console.log(e)))}))},likeHandler:e=>{o.querySelector(".card__like-button").classList.contains("card__like-button_active")?E.deleteLike(e).then((e=>{o.querySelector(".card__like-button").classList.remove("card__like-button_active"),s.showLikes(e.likes.length),s._likes=e.likes})).catch((e=>console.log(e))):(s._cardElement.classList.toggle("card__like-button_active"),E.addLike(e).then((e=>{o.querySelector(".card__like-button").classList.add("card__like-button_active"),s.showLikes(e.likes.length),s._likes=e.likes})).catch((e=>console.log(e))))}},t._id,".card__template"),o=s.generateCard();l.addItem(o),S(!0,addImageModal)}d.addEventListener("click",(()=>{c.open(),S(!1,addImageModal)})),c.setEventListeners();const u=new p(i,n,a),h=new k({modalSelector:editProfileModal,modalSubmition:e=>{S(!0,editProfileModal),E.setUserInfos({name:e.title,about:e.desc}).then((e=>{S(!1,editProfileModal),u.setUserInfo(e.name,e.about),h.close(),console.log(e)})).catch((e=>console.log(e)))}});h.setEventListeners(),s.addEventListener("click",(()=>{h.open();const e=u.getUserInfo();inputName.value=e.title,inputJob.value=e.job}))})).catch((e=>console.log(e)));const y=new k({modalSelector:c,modalSubmition:e=>{!function(e){S(!0,c),E.setUserAvatar({avatar:e.avatarURL}).then((e=>{a.src=e.avatar,S(!1,c),y.close()})).catch((e=>console.log(e)))}(e)}});l.addEventListener("click",(()=>{y.open()})),y.setEventListeners(),new t(b,o).enableValidation(),new t(b,c).enableValidation(),new t(b,_).enableValidation()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,