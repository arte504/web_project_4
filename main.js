!function(){"use strict";class e{constructor({cardData:e,isLiked:t,isOwner:s,onCardClick:r,removeHandler:i,likeHandler:n},o){this._name=e.name,this._link=e.link,this._id=e._id,this._ownerId=e.owner._id,this._likes=e.likes,this._likesCount=e.likes.length,this._cardSelector=o,this._onCardClick=r,this._onCardClick=this._onCardClick.bind(this),this._likeHandler=n,this._clickLikeHandler=this._clickLikeHandler.bind(this),this._removeHandler=i,this._removeHandler=this._removeHandler.bind(this),this._isLiked=t,this._isLiked=this._isLiked.bind(this),this._isOwner=s,this._isOwner=this._isOwner.bind(this)}_getTemplate(){return document.querySelector("#card__template").content.querySelector(".card").cloneNode(!0)}likesAmountSet(e){this._item.querySelector(".card__like-count").textContent=e}_likeCard(e){this._item.querySelector("card__like").classList.toggle("card__like-button_active"),this._likeHandler(this),e.stopImmediatePropogation()}deleteCard(){this._item.remove(),this._item=null}_deleteCardHandler(e){e.stopImmediatePropagation(),this._deleteCardHandler(this._id,this)}_setEventListeners(){this._item.querySelector(".card__like-button").addEventListener("click",(e=>{this._likeCard(e)})),this._item.querySelector(".card__delete-button").addEventListener("click",(e=>{this._deleteCardHandler(e)})),this._cardImage.addEventListener("click",(e=>{this._onCardClick(e)}))}generateCard(){return this._item=this._getTemplate(),!0===this._isLiked(this._likes)?this._element.querySelector(".card__like-button").classList.add("card__like_active"):this._element.querySelector(".card__like-button").classList.remove("card__like_active"),!0!==this._isOwner(this._ownerId)&&this._element.querySelector(".card__delete-button").classList.add("card__delete-button_hidden"),this._cardImage=this._item.querySelector(".card__image"),this._setEventListeners(),this._item.querySelector(".card__title").textContent=this._name,this._cardImage.src=this._link,this._cardImage.alt=`Image of  ${this._name} `,this._setEventListeners(),this._item}getID(){return this._id}}class t{constructor(e,t){this._formConfig=e,this._formElement=t}_showInputError=(e,t)=>{const{inputErrorClass:s,errorMessageClass:r}=this._formConfig,i=this._formElement.querySelector(` #${e.id}_error `);i.textContent=t,i.classList.add(r),e.classList.add(s)};_hideInputError=e=>{const{inputErrorClass:t,errorMessageClass:s}=this._formConfig,r=this._formElement.querySelector(` #${e.id}_error `);r.textContent="",r.classList.remove(s),e.classList.remove(t)};resetValidation(){this.inputs.forEach((e=>{this._hideInputError(e)})),this._toggleSubmitButton()}_checkInput=e=>{e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)};_checkIfFormValid=()=>this.inputs.every((e=>e.validity.valid));_toggleSubmitButton(){const{inactiveButtonClass:e,submitButtonSelector:t}=this._formConfig,s=this._formElement.querySelector(t);this._checkIfFormValid()?(s.disabled=!1,s.classList.remove(e)):(s.disabled=!0,s.classList.add(e))}_setEventListeners=()=>{const{inputSelector:e}=this._formConfig;return this.inputs=Array.from(this._formElement.querySelectorAll(e)),this.inputs.forEach((e=>{e.addEventListener("input",(()=>{this._checkInput(e),this._toggleSubmitButton()}))})),this._formElement};enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}}class s{constructor({items:e,renderer:t},s){this._items=e,this._renderer=t,this._container=document.querySelector(s),this.renderer=t}addItem(e){this._container.append(e)}prependItem(e){this._container.prepend(e)}renderItems(){this._items.forEach((e=>{this._renderer(e)}))}}const r=document.querySelector(".profile__edit-button"),i=document.forms.profile,n=(i.elements.name,i.elements.job,document.querySelector(".modal__close-button_type_edit"),document.querySelector(".profile__add-button")),o=document.querySelector(".modal_type_add-card"),a=(document.querySelector(".modal__input_type_name"),document.querySelector(".modal__input_type_link"),document.querySelector(".modal__close-button_type_add-card"),document.forms.add),l=(a.elements.title,a.elements.link,document.querySelector(".modal__submit-button"),document.querySelector(".cards__grid"),document.querySelector(".modal_type_big-image"),document.querySelector(".modal__big-image"),document.querySelector(".modal__image-caption"),document.querySelector(".modal__close-button_type_big-image"),{formSelector:".modal__container",inputSelector:".modal__input",submitButtonSelector:".modal__submit-button",inactiveButtonClass:"modal__submit-button_disabled",inputErrorClass:"modal__input_error",errorMessageClass:"modal__error_visible"});class d{constructor(e){this._modalElement=document.querySelector(e)}_checkForEscClose=e=>{"Escape"===e.key&&this.close()};open=()=>{this._modalElement.classList.add("modal_visible"),document.addEventListener("keyup",this._checkForEscClose)};close=()=>{this._modalElement.classList.remove("modal_visible"),document.removeEventListener("keyup",this._checkForEscClose)};setEventListeners(){this._modalElement.querySelector(".modal__close-button").addEventListener("click",(e=>{this.close(e)})),this._modalElement.addEventListener("click",(e=>{e.target.classList.contains("modal_visible")&&this.close(e)}))}}class c extends d{constructor(e,t){super(e),this._handleSubmitBtn=t,this._formElement=this._modalElement.querySelector(".modal__container")}getInputValues(){const e=Array.from(this._formElement.querySelectorAll(".modal__input")),t={};return e.forEach((e=>{t[e.name]=e.value})),t}setInputValues(e){Array.from(this._formElement.querySelectorAll(".modal__input")).forEach((t=>{t.value=e[t.name]}))}setEventListeners(){super.setEventListeners(),this._formElement.addEventListener("submit",(()=>{this._handleSubmitBtn(this.getInputValues()),this.close(),this._formElement.reset()}))}close(){super.close(),this._formElement.reset()}}class _ extends d{constructor(e,t){super(e),this._form=document.querySelector(this._selector),this._handleSubmit=t,this._handleSubmitHandler=this._handleSubmitHandler.bind(this)}_handleSubmitHandler(e){e.preventDefault(),this._handleSubmit(),super.close()}_setEventListeners(){super._setEventListeners(),this._form.addEventListener("submit",this._handleSubmitHandler)}_removeEventListeners(){super._removeEventListeners(),this._form.removeEventListener("submit",this._handleSubmitHandler)}}const m=new class{constructor({baseUrl:e,headers:t}){this.baseUrl=e,this.headers=t}getInitialCards(){return fetch(this.baseUrl+"/cards",{headers:this.headers}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}getUserInfo(){return fetch(this.baseUrl+"/users/me",{headers:this.headers}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}addCard({name:e,link:t}){return fetch(this.baseUrl+"/cards",{headers:this.headers,method:"POST",body:JSON.stringify({name:e,link:t})}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}removeCard(e){return fetch(this.baseUrl+"/cards/"+e,{headers:this.headers,method:"DELETE"}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}getAppInfo(){return Promise.all([this.getInitialCards(),this.getUserInfo()])}addLike(e){return fetch(this.baseUrl+"/cards/likes/"+e.getId(),{headers:this.headers,method:"PUT"}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}removeLike(e){return fetch(this.baseUrl+"/cards/likes/"+e.getId(),{headers:this.headers,method:"DELETE"}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}updateUserInfo({name:e,about:t}){return fetch(this.baseUrl+"/users/me",{headers:this.headers,method:"PATCH",body:JSON.stringify({name:e,about:t})}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}setUserAvatar({avatar:e}){return fetch(this.baseUrl+"/users/me/avatar",{headers:this.headers,method:"PATCH",body:JSON.stringify({avatar:e})}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}}({baseUrl:"https://around.nomoreparties.co/v1/group-42",headers:{authorization:"c56e30dc-2883-4270-a59e-b2f7bae969c6","Content-Type":"application/json"}});function h(t,s,r){return new e({cardData:t,isLiked:e=>void 0!==e.find((e=>e._id===s._id)),isOwner:e=>s._id===e,onCardClick:e=>{u.open(e)},deleteCardHandler:(e,t)=>{const s=new _(".delete-card",(()=>{m.removeCard(e).then((e=>t.removeCard())).catch((e=>console.log(e))).finally((function(){s.close()}))}));s.open()},likeHandler:e=>{void 0!==e._likes.find((e=>e._id===s._id))?m.removeLike(e).then((t=>{e._likes=t.likes,e.setLikes(t.likes.length)})):m.addLike(e).then((t=>{e._likes=t.likes,e.setLikes(t.likes.length)}))}},"#card")}m.getAppInfo().then((([e,t])=>{const r=new s({data:e,renderer:function(e){const s=h(e,t);r.addItem(s.generateCard())}},".cards__grid");r.setItems(),user.setUserInfo({name:t.name,job:t.about}),user.setUserAvatar({avatar:t.avatar});const i=new c(".add-card",(e=>{m.addCard({name:e.name,link:e.link}).then((e=>{const s=h(e,t);r.addItem(s.generateCard())})).catch((e=>console.log(e))).finally((function(){i.close()}))}));n.addEventListener("click",(()=>{E.resetValidation(),i.open()}))})).catch((e=>console.log(e)));const u=new class extends d{openup=e=>{const t=e.target;this._modalElement.querySelector(".modal__big-image").src=t.src,this._modalElement.querySelector(".modal__big-image").alt=t.alt,this._modalElement.querySelector(".modal__image-caption").textContent=t.alt,this.open()}}(".modal_type_big-image");u.setEventListeners();const p=new class{constructor({name:e,job:t,avatar:s}){this._name=document.querySelector(`${e}`),this._job=document.querySelector(`${t}`),this._avatar=document.querySelector(`${s}`)}getUserInfo(){return{name:this._name.textContent,job:this._job.textContent,avatar:this._avatar.src}}setUserInfo(e){const{name:t,job:s}=e;this._name.textContent=t,this._job.textContent=s}setUserAvatar({avatar:e}){this._avatar.src=e}}(".profile__title",".profile__subtitle");p.setUserInfo({name:"Artiom Shlyusberg",job:"Junior Web Dev"});const b=new c(".modal_type_edit",(e=>{p.setUserInfo(b.getInputValues()),b.close()}));b.setEventListeners(),r.addEventListener("click",(()=>{b.setInputValues(p.getUserInfo()),v.resetValidation(),b.open()}));const k=new c(".modal_type_add-card",(()=>{const e=k.getInputValues();cardsSection.prependItem(createCard(e)),k.close()}));k.setEventListeners();const v=new t(l,i);v.enableValidation();const E=new t(l,o);E.enableValidation()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,