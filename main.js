!function(){"use strict";class e{constructor(e,t){this._formConfig=e,this._formElement=t,this.inputs=Array.from(this._formElement.querySelectorAll(this._formConfig.inputSelector)),this._buttonElement=this._formElement.querySelector(this._formConfig.submitButtonSelector)}_showInputError=(e,t)=>{const{inputErrorClass:s,errorMessageClass:r}=this._formConfig,n=this._formElement.querySelector(` #${e.id}_error `);n.textContent=t,n.classList.add(r),e.classList.add(s)};_hideInputError=e=>{const{inputErrorClass:t,errorMessageClass:s}=this._formConfig,r=this._formElement.querySelector(` #${e.id}_error `);r.textContent="",r.classList.remove(s),e.classList.remove(t)};_checkInput=e=>{e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)};_checkIValid=()=>this.inputs.every((e=>e.validity.valid));_toggleSubmitButton(){this._checkIValid()?(this._buttonElement.disabled=!1,this._buttonElement.classList.remove(this._formConfig.inactiveButtonClass)):(this._buttonElement.disabled=!0,this._buttonElement.classList.add(this._formConfig.inactiveButtonClass))}_setEventListeners=()=>(this.inputs.forEach((e=>{e.addEventListener("input",(()=>{this._checkInput(e),this._toggleSubmitButton()}))})),this._formElement);enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}}class t{constructor(e,t,s,r,n,i,o){this._name=e.name,this._link=e.link,this._ownerId=e.owner._id,this._cardId=e._id,this._likes=e.likes,this._userId=o,this._template=i,this._onCardClick=t,this._likeAddHandler=r,this._likeRemoveHandler=n,this._removeHandler=s}_getTemplate(){return this._template.content.querySelector(".card").cloneNode(!0)}_setAttributes(e,t){for(const s in t)e.setAttribute(s,t[s])}deleteCard(){const e=document.getElementById(id);e&&e.parentNode.removeChild(e),this._cardElement=null}showLikes(e){this._cardElement.querySelector(".card__like-count").textContent=e}_handelLike(e){e.classList.toggle("card__like-button_active")}_setEventListeners(){this._cardLikeBtn=this._cardElement.querySelector(".card__like-button"),this._cardLikeBtn.addEventListener("click",(()=>{this._cardElement.classList.contains("card__like-button_active")?(this._likeRemoveHandler(this._cardId),this._handelLike(this._cardLikeBtn)):(this._likeAddHandler(this._cardId),this._handelLike(this._cardLikeBtn))})),this._cardElement.querySelector(".card__delete-button").addEventListener("click",(()=>{this._removeHandler(this._id)})),this._cardElement.querySelector(".card__image").addEventListener("click",(()=>{this._onCardClick(this._name,this._link)}))}_showDeleteIcon(){this._userId!=this._ownerId&&this._cardElement.querySelector(".card__delete-button").classList.add("card__delete-button_hidden")}getCardId(){return this._id}generateCard(){return this._cardElement=this._getTemplate(),this._card=this._cardElement,this._setAttributes(this._cardElement.querySelector(".card__image"),{src:this._link,alt:this._name}),this._cardElement.querySelector(".card__title").textContent=this._name,this._showDeleteIcon(),this.showLikes(this._likes.length),this._setEventListeners(),this._cardElement}}class s{constructor(e,t){this._modalElement=document.querySelector(e),this._escapeKeyHandler=this._escapeKeyHandler.bind(this),this._checkKeyPress=t}open(){this._modalElement.classList.add("modal_visible"),document.addEventListener("keyup",this._escapeKeyHandler)}close(){this._modalElement.classList.remove("modal_visible"),document.removeEventListener("keyup",this._escapeKeyHandler)}_escapeKeyHandler(e){this._checkKeyPress(e.key)&&this.close()}setEventListeners(){this._modalElement.addEventListener("click",(e=>{e.target.classList.contains("modal__close-button")&&this.close(),e.target.classList.contains("modal_visible")&&this.close()}))}}class r extends s{constructor(e,t,s){super(e,t),this._handleSubmit=s,this._submitButton=this._modalElement.querySelector(".modal__submit-button"),this._form=document.querySelector(".modal__container"),this._textInButton=this._submitButton.textContent}getInputValues(){this._inputList=this._modalElement.querySelectorAll(".modal__input");const e={};return this._inputList.forEach((t=>{e[t.name]=t.value})),e||this._entredValue}setInputValues(e){this._entredValue=e}setEventListeners(){super.setEventListeners(),this._modalElement.addEventListener("submit",(e=>{e.preventDefault(),this._submitButton.textContent="Saving...",this._handleSubmit(this.getInputValues())}))}close(){this._submitButton.textContent=this._textInButton,this._form.reset(),super.close()}}class n{constructor({items:e,renderer:t},s){this._renderedElements=e,this._renderer=t,this._container=document.querySelector(s)}renderItems(){this._renderedElements.forEach((e=>{this._renderer(e)}))}addItem(e){this._container.prepend(e)}}const i=document.querySelector(".profile__edit-button"),o=document.querySelector(".modal_type_edit"),a=document.querySelector(".profile__title"),l=document.querySelector(".modal__input_type_title"),d=document.querySelector(".profile__subtitle"),_=document.querySelector(".modal__input_type_subtitle"),c=(document.querySelector(".modal__close-button_type_edit"),document.querySelector(".profile__image")),h=document.querySelector(".profile__image_overlay"),u=document.querySelector(".modal_type_avatar"),m=u.querySelector(".modal__input_type_avatar"),p=(document.querySelector(".modal__close-button_type_avatar"),document.querySelector(".profile__add-button")),y=document.querySelector(".modal_type_add-card"),b=document.querySelector(".modal__input_type_name"),E=document.querySelector(".modal__input_type_link"),v=(document.querySelector(".modal__close-button_type_add-card"),document.forms.add),g=(v.elements.title,v.elements.link,document.querySelector(".modal__submit-button"),document.querySelector(".cards__grid"),document.querySelector("#card__template")),S=document.querySelector(".modal_type_big-image"),f=S.querySelector(".modal__big-image"),k=S.querySelector(".modal__image-caption"),C=(document.querySelector(".modal__close-button_type_big-image"),document.querySelector(".modal_type_delete-card"),{formSelector:".modal__container",inputSelector:".modal__input",submitButtonSelector:".modal__submit-button",inactiveButtonClass:"modal__submit-button_disabled",inputErrorClass:"modal__input_error",errorMessageClass:"modal__error_visible"}),L=e=>"Escape"===e,I=()=>{b.value="",E.value=""};new e(C,o).enableValidation(),new e(C,u).enableValidation(),new e(C,y).enableValidation();const q=e=>console.log(e),U=new class{constructor(e){this._baseUrl=e.baseUrl,this._headers=e.headers}_response(e){return e.ok?e.json():Promise.reject(`Error: ${e.status} - ${e.statusText}`)}getCardList(){return fetch(`${this._baseUrl}/cards`,{headers:this._headers}).then(this._response)}getUserInfo(){return fetch(`${this._baseUrl}/users/me`,{headers:this._headers}).then(this._response)}setUserInfo(e,t){return fetch(`${this._baseUrl}/users/me`,{headers:this._headers,method:"PATCH",body:JSON.stringify(e,t)}).then(this._response)}addCard(e){return console.log(e),fetch(`${this._baseUrl}/cards`,{headers:this._headers,method:"POST",body:JSON.stringify(e.titleInput,e.linkInput)}).then(this._response)}removeCard(e){return fetch(`${this._baseUrl}/cards/${e}`,{headers:this._headers,method:"DELETE"}).then(this._response)}likeCard(e){return fetch(`${this._baseUrl}/cards/likes/${e}`,{headers:this._headers,method:"PUT"}).then(this._response)}unlikeCard(e){return fetch(`${this._baseUrl}/cards/likes/${e}`,{headers:this._headers,method:"DELETE"}).then(this._response)}setUserAvatar(e){return fetch(`${this._baseUrl}/users/me/avatar`,{headers:this._headers,method:"PATCH",body:JSON.stringify(e)}).then(this._response)}}({baseUrl:"https://around.nomoreparties.co/v1/group-12",headers:{authorization:"709a0d9d-db06-4890-a594-b07e7309a353","Content-Type":"application/json"}}),w=new class{constructor(e,t,s){this._nameElement=e,this._titleElement=t,this._pictureElement=s}getUserInfo(){return{name:this._name.textContent,job:this._job.textContent}}getUserData(){return this._data}setUserInfo(e,t){this._name=e,this._job=t,this._nameElement.textContent=this._name,this._titleElement.textContent=this._job}}(a,d);U.getUserInfo().then((e=>(w.setUserInfo(e.name,e.about),c.src=e.avatar,w))).then((e=>{U.getCardList().then((s=>{const i=(e,t)=>{A.open(e,t)},o=e=>{$.setInputValues(e),$.open()},a=e=>{U.likeCard(e)},l=e=>{U.unlikeCard(e)},d=e=>new t(e,i,o,a,l,g),_=new n({items:s,renderer:t=>{const s=d(t);_.addItem(s.generateCard(e.id))}},".cards__grid");_.renderItems();const c=new r(".modal_type_add-card",L,(({titleInput:e,linkInput:t})=>{U.addCard({title:e,link:t}).then((()=>{d({title:e,link:t}),_.addItem(cardInstance.generateCard(user.id)),I(),c.close(I)})).catch(q)}));c.setEventListeners(),p.addEventListener("click",(()=>{c.open()}))})).catch(q)})).catch(q);const x=new r(".modal_type_edit",L,(({nameInput:e,jobInput:t})=>{U.setUserInfo({name:e,about:t}).then((()=>{x.close()})).catch(q)}));x.setEventListeners(),i.addEventListener("click",(()=>{l.value=a.textContent,_.value=d.textContent,x.open()}));const B=new r(".modal_type_avatar",L,(({avatarLinkInput:e})=>{U.setUserAvatar({avatar:e}).then((()=>{B.close()})).catch(q)}));B.setEventListeners(),h.addEventListener("click",(()=>{m.value="",B.open()}));const $=new r(".modal_type_delete-card",L,(e=>{U.deleteCard(e.getCardId()).then((()=>{e.deleteCard(),$.close()})).catch(q)}));$.setEventListeners();const A=new class extends s{constructor(e,t){super(e,t),this._modalImage=document.querySelector(".modal__big-image"),this._modalTitle=document.querySelector(".modal__image-caption")}open(e,t){this._modalTitle.textContent=e,this._modalImage.setAttribute("src",t),super.open()}}(".modal_type_big-image",L,f,k);A.setEventListeners()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,