!function(){"use strict";var e={d:function(t,r){for(var s in r)e.o(r,s)&&!e.o(t,s)&&Object.defineProperty(t,s,{enumerable:!0,get:r[s]})},o:function(e,t){return Object.prototype.hasOwnProperty.call(e,t)}};e.d({},{b7:function(){return h},ED:function(){return _},rC:function(){return d}});class t{constructor(e,t){this._formConfig=e,this._formElement=t}_showInputError=(e,t)=>{const{inputErrorClass:r,errorMessageClass:s}=this._formConfig,n=this._formElement.querySelector(` #${e.id}_error `);n.textContent=t,n.classList.add(s),e.classList.add(r)};_hideInputError=e=>{const{inputErrorClass:t,errorMessageClass:r}=this._formConfig,s=this._formElement.querySelector(` #${e.id}_error `);s.textContent="",s.classList.remove(r),e.classList.remove(t)};resetValidation(){this.inputs.forEach((e=>{this._hideInputError(e)})),this._toggleSubmitButton()}_checkInput=e=>{e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)};_checkIfFormValid=()=>this.inputs.every((e=>e.validity.valid));_toggleSubmitButton(){const{inactiveButtonClass:e,submitButtonSelector:t}=this._formConfig,r=this._formElement.querySelector(t);this._checkIfFormValid()?(r.disabled=!1,r.classList.remove(e)):(r.disabled=!0,r.classList.add(e))}_setEventListeners=()=>{const{inputSelector:e}=this._formConfig;return this.inputs=Array.from(this._formElement.querySelectorAll(e)),this.inputs.forEach((e=>{e.addEventListener("input",(()=>{this._checkInput(e),this._toggleSubmitButton()}))})),this._formElement};enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}}class r{constructor(e,t,r,{onCardClick:s,removeHandler:n,likeHandler:o}){this._name=e.name,this._link=e.link,this._likes=e.likes,this._ownerId=e.owner._id,this._id=e._id,this._template=t,this._userId=r,this._onCardClick=s,this._likeHandler=o,this._removeHandler=n}_getTemplate(){return this._template.content.querySelector(".card").cloneNode(!0)}_setAttributes(e,t){for(const r in t)e.setAttribute(r,t[r])}deleteCard(){const e=document.getElementById(id);e&&e.parentNode.removeChild(e),this._cardElement=null}_renderLikes(){this._likes.forEach((e=>e._id===this._userId?this.likeCard():this.unlikeCard()))}showLikes(e){this._cardElement.querySelector(".card__like-count").textContent=e}_setEventListeners(){this._cardElement.querySelector(".card__like-button").addEventListener("click",(e=>{this._likeCard(e)})),this._cardElement.querySelector(".card__delete-button").addEventListener("click",(()=>{this._removeHandler(this._id)})),this._cardImage.addEventListener("click",(e=>{this._onCardClick(e)}))}_showDeleteIcon(){this._userId!=this._owner._id&&this._cardElement.querySelector(".card__delete-button").classList.add("card__delete-button_hidden")}isLiked(){return this.likeIcon.classList.contains("card__like-button_active")}generateCard(){return this._cardElement=this._getTemplate(),this.likeIcon=this._cardElement.querySelector(".card__like-button"),this._setAttributes(this._cardElement.querySelector(".card__image"),{src:this._image,alt:this._name}),this._cardElement.querySelector(".card__title").textContent=this.name,this._showDeleteIcon(),this.showLikes(this._likes.length),this._setEventListeners(),this._renderLikes(),this._cardElement}likeCard(){this.likeIcon.classList.add("card__like-button_active")}unlikeCard(){this.likeIcon.classList.remove("card__like-button_active")}}class s{constructor(e){this._modal=e}open(){this._modal.classList.add(".modal_visible"),this.setEventListeners()}close(){this._modal.classList.remove(".modal_visible"),this.removeEventListeners()}_clickEscHandler=e=>{"Escape"===e.key&&this.close()};_clickOnCloseButtonHandler=()=>{this.close()};_clickOnOverlayHandler=e=>{e.target===e.currentTarget&&this.close()};setEventListeners(){this._modal=document.querySelector(".modal__container_type_form"),this._modal.querySelector(".modal__close-button").addEventListener("click",this._clickOnCloseButtonHandler),this._modal.addEventListener("click",this._clickOnOverlayHandler),document.addEventListener("keydown",this._clickEscHandler)}removeEventListeners(){this._modal=document.querySelector(".modal__container_type_form"),this._modal.querySelector(".modal__close-button").removeEventListener("click",this._clickOnCloseButtonHandler),this._modal.removeEventListener("click",this._clickOnOverlayHandler),document.removeEventListener("keydown",this._clickEscHandler)}}class n extends s{constructor({modal:e,handleSubmit:t}){super(e),this._handleSubmit=t,this._form=document.querySelector(".modal__container_type_form"),this._formElement=this._form.querySelectorAll(".modal__input")}_getInputValues(){return this._formInputValues={},inputList.forEach((e=>{this._formInputValues[e.name]=e.value})),inputValues}setEventListeners(){super.setEventListeners(),this._form.addEventListener("submit",this.handleSubmit)}removeEventListeners(){super.removeEventListeners(),this._form.removeEventListener("submit",this.handleSubmit)}handleSubmit=e=>(e.preventDefault(),this._handleSubmit(this._getInputValues));handleRemove(e){this._handleSubmit=e}close(){super.close(),this._form.reset()}}class o{constructor({items:e,renderer:t},r){this._renderedElements=e,this._renderer=t,this._container=document.querySelector(r)}renderer(){this._renderedElements.forEach((e=>this._renderer(e)))}addItem(e){this._container.append(e)}prependItem(e){this._container.prepend(e)}}class i{constructor(e,t,r){this._name=e,this._job=t,this._avatar=r}getUserInfo(){return this._userInfo={title:this._name.textContent,job:this._job.textContent}}setUserInfo(e,t,r){this._userInfo={title:e,job:t,userAvatar:r},r?(h.src=this._userInfo.userAvatar,d.textContent=this._userInfo.title,_.textContent=this._userInfo.job):(d.textContent=this._userInfo.title,_.textContent=this._userInfo.job)}}const a=document.querySelector(".profile__edit-button"),l=document.querySelector(".modal_type_edit"),d=document.querySelector(".profile__title"),c=document.querySelector(".modal__input_type_title"),_=document.querySelector(".profile__subtitle"),u=document.querySelector(".modal__input_type_subtitle"),h=(document.querySelector(".modal__close-button_type_edit"),document.querySelector(".profile__image")),m=document.querySelector(".profile__image-edit"),p=document.querySelector(".modal_type_avatar"),f=(p.querySelector(".modal__input_type_avatar"),document.querySelector(".modal__close-button_type_avatar"),document.querySelector(".profile__add-button")),b=document.querySelector(".modal_type_add-card"),v=(document.querySelector(".modal__input_type_name"),document.querySelector(".modal__input_type_link"),document.querySelector(".modal__close-button_type_add-card"),document.forms.add),y=(v.elements.title,v.elements.link,document.querySelector(".modal__submit-button"),document.querySelector(".cards__grid"),document.querySelector("#card__template")),E=document.querySelector(".modal_type_big-image"),k=(document.querySelector(".modal__big-image"),document.querySelector(".modal__image-caption"),document.querySelector(".modal__close-button_type_big-image"),document.querySelector(".modal_type_delete-card")),S={formSelector:".modal__container",inputSelector:".modal__input",submitButtonSelector:".modal__submit-button",inactiveButtonClass:"modal__submit-button_disabled",inputErrorClass:"modal__input_error",errorMessageClass:"modal__error_visible"},g=new class extends s{openup=e=>{const t=e.target;this._modalElement.querySelector(".modal__big-image").src=t.src,this._modalElement.querySelector(".modal__big-image").alt=t.alt,this._modalElement.querySelector(".modal__image-caption").textContent=t.alt,this.open()}}(E);g.setEventListeners();const C=new n({modal:k});function L(e,t){t.querySelector(".modal__submit-button").textContent=e?"Saving...":"Save"}C.setEventListeners();const I=new class{constructor({baseUrl:e,headers:t}){this._baseUrl=e,this._headers=t}getCardList(){return fetch(this._baseUrl+"/cards",{headers:this._headers}).then((function(e){if(e.ok)return e.json().then((e=>e));Promise.reject("Error!"+e.statusText)}))}getUserInfo(){return fetch(this._baseUrl+"/users/me",{headers:this._headers}).then((e=>e.ok?e.json():Promise.reject("Error!"+e.statusText)))}getAppInfo(){return Promise.all([this.getCardList(),this.getUserInfo()])}addCard(e){const{name:t,link:r}=e;return fetch(this._baseUrl+"/cards",{headers:this._headers,method:"POST",body:JSON.stringify({name:t,link:r})}).then((e=>{if(e.ok)return e.json();Promise.reject("Error!"+e.statusText)}))}removeCard(e){return fetch(this._baseUrl+"/cards/"+e,{headers:this._headers,method:"DELETE"}).then((e=>e.ok?e.json():Promise.reject("Error!"+e.statusText)))}likeCard(e){return fetch(this._baseUrl+"/cards/likes/"+e,{headers:this._headers,method:"PUT"}).then((e=>{if(e.ok)return e.json();Promise.reject("Error!"+e.statusText)}))}unlikeCard(e){return fetch(this._baseUrl+"/cards/likes/"+e,{headers:this._headers,method:"DELETE"}).then((e=>e.ok?e.json():Promise.reject("Error!"+e.statusText)))}setUserInfo(e){const{name:t,job:r}=e;return fetch(this._baseUrl+"/users/me",{headers:this._headers,method:"PATCH",body:JSON.stringify({name:t,job:r})}).then((e=>e.ok?e.json():Promise.reject("Error!"+e.statusText+e.status)))}setUserAvatar({avatar:e}){return fetch(this._baseUrl+"/users/me/avatar",{headers:this._headers,method:"PATCH",body:JSON.stringify({avatar:e})}).then((e=>e.ok?e.json():Promise.reject("Error!"+e.statusText)))}updateUserInfo(e){const{name:t,job:r}=e;return fetch(this._baseUrl+"/users/me",{headers:this._headers,method:"PATCH",body:JSON.stringify({name:t,job:r})}).then((e=>e.ok?e.json():Promise.reject("Error!"+e.statusText)))}}({baseUrl:"https://around.nomoreparties.co/v1/group-12",headers:{authorization:"709a0d9d-db06-4890-a594-b07e7309a353","Content-Type":"application/json"}});I.getAppInfo().then((([e,t])=>{const s=new i(d,_,h);s.setUserInfo(t);const m=e=>{const s=new r(e,y,t._id,{onCardClick:({name:e,link:t})=>{g.open(t,e)},removeHandler:e=>{C.open(),C.handleRemove((()=>{I.removeCard(e).then((()=>{s.deleteCardModal(),C.close()})).catch((e=>console.log(e)))}))},likeHandler:e=>{s.isLiked()?I.unlikeCard(e).then((e=>{s.unlikeCard(),s.showLikes(e.likes.lenght)})):I.likeCard(e).then((e=>{s.unlikeCard(),s.showLikes(e.likes.lenght)})).catch((e=>console.log(e)))}});return s},v=new o({items:e,renderer:e=>{v.addItem(m(e).generateCard())}},".cards__grid");console.log(e),v.renderer();const E=new n({modal:b,handleSubmit:e=>{L(!0,b),I.addCard(e).then((e=>{v.prependItem(m(e).generateCard())})).then((()=>{E.close()})).catch((e=>console.log(e))).finally((()=>L(!1,b)))}});f.addEventListener("click",(()=>{w.resetValidation(),addNewCardModal.open()})),addNewCardModal.setEventListeners();const k=new n({modal:l,handleSubmit:e=>{L(!0,l),I.updateUserInfo(i).then((e=>{s.setUserInfo(e)})).then((()=>{k.close()})).catch((e=>console.log(e))).finally((()=>L(!1,l)))}});a.addEventListener("click",(()=>{j.resetValidation();const{name:e,job:t}=s.getUserInfo();c.value=e,u.value=t,k.open()}));const S=new n({modal:p,handleSubmit:e=>{L(!0,p),I.updateUserInfo(e.avatar).then((e=>{s.setUserInfo(e)})).then((()=>{S.close()})).catch((e=>console.log(e))).finally((()=>{L(!1,p)}))}})})).catch((e=>console.log(e)));const q=new n({modalSelector:p,modalSubmition:e=>{!function(e){L(!0,p),I.setUserAvatar({avatar:e.avatarURL}).then((e=>{h.src=e.avatar,L(!1,p),q.close()})).catch((e=>console.log(e)))}(e)}});m.addEventListener("click",(()=>{q.open()})),q.setEventListeners();const j=new t(S,l);j.enableValidation(),new t(S,p).enableValidation();const w=new t(S,b);w.enableValidation()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFjRSxFQUFZd0osR0FDNURxRCxFQUFzQnRLLG1CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2ViX3Byb2plY3RfNC93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly93ZWJfcHJvamVjdF80L3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly93ZWJfcHJvamVjdF80L3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vd2ViX3Byb2plY3RfNC8uL3NyYy9jb21wb25lbnRzL3NjcmlwdHMvRm9ybVZhbGlkYXRvci5qcyIsIndlYnBhY2s6Ly93ZWJfcHJvamVjdF80Ly4vc3JjL2NvbXBvbmVudHMvc2NyaXB0cy9DYXJkLmpzIiwid2VicGFjazovL3dlYl9wcm9qZWN0XzQvLi9zcmMvY29tcG9uZW50cy9zY3JpcHRzL01vZGFsLmpzIiwid2VicGFjazovL3dlYl9wcm9qZWN0XzQvLi9zcmMvY29tcG9uZW50cy9zY3JpcHRzL01vZGFsV2l0aEZvcm0uanMiLCJ3ZWJwYWNrOi8vd2ViX3Byb2plY3RfNC8uL3NyYy9jb21wb25lbnRzL3NjcmlwdHMvU2VjdGlvbi5qcyIsIndlYnBhY2s6Ly93ZWJfcHJvamVjdF80Ly4vc3JjL2NvbXBvbmVudHMvc2NyaXB0cy9Vc2VySW5mby5qcyIsIndlYnBhY2s6Ly93ZWJfcHJvamVjdF80Ly4vc3JjL2NvbXBvbmVudHMvdXRpbHMvY29uc3RhbnRzLmpzIiwid2VicGFjazovL3dlYl9wcm9qZWN0XzQvLi9zcmMvcGFnZXMvSW5kZXguanMiLCJ3ZWJwYWNrOi8vd2ViX3Byb2plY3RfNC8uL3NyYy9jb21wb25lbnRzL3NjcmlwdHMvTW9kYWxXaXRoSW1hZ2UuanMiLCJ3ZWJwYWNrOi8vd2ViX3Byb2plY3RfNC8uL3NyYy9jb21wb25lbnRzL3NjcmlwdHMvQXBpLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFRoZSByZXF1aXJlIHNjb3BlXG52YXIgX193ZWJwYWNrX3JlcXVpcmVfXyA9IHt9O1xuXG4iLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBkZWZpbml0aW9uKSB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iaiwgcHJvcCkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCk7IH0iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBGb3JtVmFsaWRhdG9yIHtcclxuICBjb25zdHJ1Y3Rvcihmb3JtQ29uZmlnLCBmb3JtRWxlbWVudCkge1xyXG4gICAgdGhpcy5fZm9ybUNvbmZpZyA9IGZvcm1Db25maWc7XHJcbiAgICB0aGlzLl9mb3JtRWxlbWVudCA9IGZvcm1FbGVtZW50O1xyXG4gIH1cclxuXHJcbiAgX3Nob3dJbnB1dEVycm9yID0gKGlucHV0RWxlbWVudCwgZXJyb3JNZXNzYWdlKSA9PiB7XHJcbiAgICBjb25zdCB7IGlucHV0RXJyb3JDbGFzcywgZXJyb3JNZXNzYWdlQ2xhc3MgfSA9IHRoaXMuX2Zvcm1Db25maWc7XHJcbiAgICBjb25zdCBlcnJvckVsZW1lbnQgPSB0aGlzLl9mb3JtRWxlbWVudC5xdWVyeVNlbGVjdG9yKGAgIyR7aW5wdXRFbGVtZW50LmlkfV9lcnJvciBgKTtcclxuICAgIGVycm9yRWxlbWVudC50ZXh0Q29udGVudCA9IGVycm9yTWVzc2FnZTtcclxuICAgIGVycm9yRWxlbWVudC5jbGFzc0xpc3QuYWRkKGVycm9yTWVzc2FnZUNsYXNzKTtcclxuICAgIGlucHV0RWxlbWVudC5jbGFzc0xpc3QuYWRkKGlucHV0RXJyb3JDbGFzcyk7XHJcbiAgfTtcclxuICBcclxuICBfaGlkZUlucHV0RXJyb3IgPSAoaW5wdXRFbGVtZW50KSA9PiB7XHJcbiAgICBjb25zdCB7IGlucHV0RXJyb3JDbGFzcywgZXJyb3JNZXNzYWdlQ2xhc3MgfSA9IHRoaXMuX2Zvcm1Db25maWc7XHJcbiAgICBjb25zdCBlcnJvckVsZW1lbnQgPSB0aGlzLl9mb3JtRWxlbWVudC5xdWVyeVNlbGVjdG9yKGAgIyR7aW5wdXRFbGVtZW50LmlkfV9lcnJvciBgKTtcclxuICAgIGVycm9yRWxlbWVudC50ZXh0Q29udGVudCA9IFwiXCI7XHJcbiAgICBlcnJvckVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShlcnJvck1lc3NhZ2VDbGFzcyk7XHJcbiAgICBpbnB1dEVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShpbnB1dEVycm9yQ2xhc3MpO1xyXG4gIH07XHJcblxyXG4gIHJlc2V0VmFsaWRhdGlvbigpIHtcclxuICAgIHRoaXMuaW5wdXRzLmZvckVhY2goKGlucHV0KSA9PiB7XHJcbiAgICAgIHRoaXMuX2hpZGVJbnB1dEVycm9yKGlucHV0KTtcclxuICAgIH0pO1xyXG4gICAgdGhpcy5fdG9nZ2xlU3VibWl0QnV0dG9uKCk7XHJcbiAgfVxyXG5cclxuICBfY2hlY2tJbnB1dCA9IChpbnB1dEVsZW1lbnQpID0+IHtcclxuICAgIGlmICghaW5wdXRFbGVtZW50LnZhbGlkaXR5LnZhbGlkKSB7XHJcbiAgICAgIHRoaXMuX3Nob3dJbnB1dEVycm9yKGlucHV0RWxlbWVudCwgaW5wdXRFbGVtZW50LnZhbGlkYXRpb25NZXNzYWdlKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuX2hpZGVJbnB1dEVycm9yKGlucHV0RWxlbWVudCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBfY2hlY2tJZkZvcm1WYWxpZCA9ICgpID0+IHRoaXMuaW5wdXRzLmV2ZXJ5KChpbnB1dCkgPT4gaW5wdXQudmFsaWRpdHkudmFsaWQpO1xyXG5cclxuICBfdG9nZ2xlU3VibWl0QnV0dG9uKCkge1xyXG4gICAgY29uc3QgeyBpbmFjdGl2ZUJ1dHRvbkNsYXNzLCBzdWJtaXRCdXR0b25TZWxlY3RvciB9ID0gdGhpcy5fZm9ybUNvbmZpZztcclxuICAgIGNvbnN0IGJ1dHRvbkVsZW1lbnQgPSB0aGlzLl9mb3JtRWxlbWVudC5xdWVyeVNlbGVjdG9yKHN1Ym1pdEJ1dHRvblNlbGVjdG9yKTtcclxuXHJcbiAgICBpZiAodGhpcy5fY2hlY2tJZkZvcm1WYWxpZCgpKSB7XHJcbiAgICAgIGJ1dHRvbkVsZW1lbnQuZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgICAgYnV0dG9uRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKGluYWN0aXZlQnV0dG9uQ2xhc3MpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgYnV0dG9uRWxlbWVudC5kaXNhYmxlZCA9IHRydWU7XHJcbiAgICAgIGJ1dHRvbkVsZW1lbnQuY2xhc3NMaXN0LmFkZChpbmFjdGl2ZUJ1dHRvbkNsYXNzKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIF9zZXRFdmVudExpc3RlbmVycyA9ICgpID0+IHtcclxuICAgIGNvbnN0IHsgaW5wdXRTZWxlY3RvciB9ID0gdGhpcy5fZm9ybUNvbmZpZztcclxuICAgIHRoaXMuaW5wdXRzID0gQXJyYXkuZnJvbSh0aGlzLl9mb3JtRWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKGlucHV0U2VsZWN0b3IpKTtcclxuXHJcbiAgICB0aGlzLmlucHV0cy5mb3JFYWNoKChpbnB1dCkgPT4ge1xyXG4gICAgICBpbnB1dC5hZGRFdmVudExpc3RlbmVyKFwiaW5wdXRcIiwgKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuX2NoZWNrSW5wdXQoaW5wdXQpO1xyXG4gICAgICAgIHRoaXMuX3RvZ2dsZVN1Ym1pdEJ1dHRvbigpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIHRoaXMuX2Zvcm1FbGVtZW50O1xyXG4gIH07XHJcblxyXG4gIGVuYWJsZVZhbGlkYXRpb24oKSB7XHJcbiAgICB0aGlzLl9mb3JtRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwic3VibWl0XCIsIChldmVudCkgPT4ge1xyXG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgfSk7XHJcbiAgICB0aGlzLl9zZXRFdmVudExpc3RlbmVycygpO1xyXG4gIH1cclxufSIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIENhcmQge1xyXG4gIGNvbnN0cnVjdG9yKCBkYXRhLCB0ZW1wbGF0ZSwgdXNlcklkLCBcclxuICAgIHsgb25DYXJkQ2xpY2ssIHJlbW92ZUhhbmRsZXIsIGxpa2VIYW5kbGVyIH0gKSBcclxuICB7XHJcbiAgICB0aGlzLl9uYW1lID0gZGF0YS5uYW1lO1xyXG4gICAgdGhpcy5fbGluayA9IGRhdGEubGluaztcclxuICAgIHRoaXMuX2xpa2VzID0gZGF0YS5saWtlcztcclxuICAgIHRoaXMuX293bmVySWQgPSBkYXRhLm93bmVyLl9pZDtcclxuICAgIHRoaXMuX2lkID0gZGF0YS5faWQ7XHJcbiAgICB0aGlzLl90ZW1wbGF0ZSA9IHRlbXBsYXRlO1xyXG4gICAgdGhpcy5fdXNlcklkID0gdXNlcklkO1xyXG5cclxuICAgIHRoaXMuX29uQ2FyZENsaWNrID0gb25DYXJkQ2xpY2s7XHJcbiAgICB0aGlzLl9saWtlSGFuZGxlciA9IGxpa2VIYW5kbGVyO1xyXG4gICAgdGhpcy5fcmVtb3ZlSGFuZGxlciA9IHJlbW92ZUhhbmRsZXI7XHJcbiAgfVxyXG4gIC8vIC0tLSBHZXQgY2FyZCB0ZW1wbGF0ZSAtLS0gLy9cclxuICBfZ2V0VGVtcGxhdGUoKSB7XHJcbiAgICBjb25zdCBjYXJkRWxlbWVudCA9IHRoaXMuX3RlbXBsYXRlXHJcbiAgICAuY29udGVudFxyXG4gICAgLnF1ZXJ5U2VsZWN0b3IoJy5jYXJkJylcclxuICAgIC5jbG9uZU5vZGUodHJ1ZSk7XHJcblxyXG4gICAgcmV0dXJuIGNhcmRFbGVtZW50O1xyXG4gIH1cclxuXHJcbiAgX3NldEF0dHJpYnV0ZXMoY2FyZEVsZW1lbnQsIGF0dHJpYnMpIHtcclxuICAgIGZvciAoY29uc3Qga2V5IGluIGF0dHJpYnMpIHtcclxuICAgICAgY2FyZEVsZW1lbnQuc2V0QXR0cmlidXRlKGtleSwgYXR0cmlic1trZXldKTtcclxuICAgIH1cclxuICB9XHJcbiAgLy8gLS0tIENhcmQgZGVsZXRpbmcgbWV0aG9kIC0tLSAvL1xyXG4gIGRlbGV0ZUNhcmQoKSB7XHJcbiAgICBjb25zdCBjYXJkRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKTtcclxuICAgIGlmKGNhcmRFbGVtZW50KXtcclxuICAgICAgY2FyZEVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChjYXJkRWxlbWVudCk7XHJcbiAgICB9XHJcbiAgICB0aGlzLl9jYXJkRWxlbWVudCA9IG51bGw7XHJcbiAgfVxyXG4gIC8vIC0tLSAgLS0tIC8vXHJcbiAgX3JlbmRlckxpa2VzICgpIHtcclxuICAgIHRoaXMuX2xpa2VzLmZvckVhY2goKGxpa2UpID0+IFxyXG4gICAgICBsaWtlLl9pZCA9PT0gdGhpcy5fdXNlcklkID8gdGhpcy5saWtlQ2FyZCgpIDogdGhpcy51bmxpa2VDYXJkKClcclxuICAgICk7XHJcbiAgfVxyXG4gIC8vIC0tLSBTaG93IHRoZSBsaWtlIGFtb3VudCAtLS0gLy9cclxuICBzaG93TGlrZXMoY291bnQpe1xyXG4gICAgdGhpcy5fY2FyZEVsZW1lbnQucXVlcnlTZWxlY3RvcignLmNhcmRfX2xpa2UtY291bnQnKS50ZXh0Q29udGVudCA9IGNvdW50O1xyXG4gIH1cclxuXHJcbiAgLy8gLS0tIFNldCBldmVudHMgbGlzdGVuZXJzIGZvciB0aGUgY2FyZHMgdGhhdCB3aWxsIGJlIGNyZWF0ZWQhIC0tLSAvL1xyXG4gIF9zZXRFdmVudExpc3RlbmVycygpIHtcclxuICAgIHRoaXMuX2NhcmRFbGVtZW50XHJcbiAgICAgIC5xdWVyeVNlbGVjdG9yKCcuY2FyZF9fbGlrZS1idXR0b24nKVxyXG4gICAgICAuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChldmVudCkgPT4ge1xyXG4gICAgICAgIHRoaXMuX2xpa2VDYXJkKGV2ZW50KTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgdGhpcy5fY2FyZEVsZW1lbnRcclxuICAgICAgLnF1ZXJ5U2VsZWN0b3IoJy5jYXJkX19kZWxldGUtYnV0dG9uJylcclxuICAgICAgLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5fcmVtb3ZlSGFuZGxlcih0aGlzLl9pZCk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgIHRoaXMuX2NhcmRJbWFnZS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGV2ZW50KSA9PiB7XHJcbiAgICAgIHRoaXMuX29uQ2FyZENsaWNrKGV2ZW50KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgX3Nob3dEZWxldGVJY29uKCkge1xyXG4gICAgaWYodGhpcy5fdXNlcklkICE9IHRoaXMuX293bmVyLl9pZCkge1xyXG4gICAgICB0aGlzLl9jYXJkRWxlbWVudC5xdWVyeVNlbGVjdG9yKCcuY2FyZF9fZGVsZXRlLWJ1dHRvbicpLmNsYXNzTGlzdC5hZGQoJ2NhcmRfX2RlbGV0ZS1idXR0b25faGlkZGVuJyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBpc0xpa2VkKCkge1xyXG4gICAgcmV0dXJuIHRoaXMubGlrZUljb24uY2xhc3NMaXN0LmNvbnRhaW5zKCdjYXJkX19saWtlLWJ1dHRvbl9hY3RpdmUnKTtcclxuICB9XHJcblxyXG4gIC8vIC0tLSBDcmVhdGluZyB0aGUgY2FyZCBhbmQgY2FyZCBlbGVtZW50cyAtLS0gLy9cclxuICBnZW5lcmF0ZUNhcmQoKSB7XHJcbiAgICB0aGlzLl9jYXJkRWxlbWVudCA9IHRoaXMuX2dldFRlbXBsYXRlKCk7XHJcbiAgICB0aGlzLmxpa2VJY29uID0gdGhpcy5fY2FyZEVsZW1lbnQucXVlcnlTZWxlY3RvcignLmNhcmRfX2xpa2UtYnV0dG9uJyk7XHJcbiAgICB0aGlzLl9zZXRBdHRyaWJ1dGVzKHRoaXMuX2NhcmRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jYXJkX19pbWFnZScpLCB7XHJcbiAgICAgIHNyYzogdGhpcy5faW1hZ2UsXHJcbiAgICAgIGFsdDogdGhpcy5fbmFtZVxyXG4gICAgfSk7XHJcbiAgICB0aGlzLl9jYXJkRWxlbWVudC5xdWVyeVNlbGVjdG9yKCcuY2FyZF9fdGl0bGUnKS50ZXh0Q29udGVudCA9IHRoaXMubmFtZTtcclxuXHJcbiAgICB0aGlzLl9zaG93RGVsZXRlSWNvbigpO1xyXG4gICAgdGhpcy5zaG93TGlrZXModGhpcy5fbGlrZXMubGVuZ3RoKTtcclxuICAgIHRoaXMuX3NldEV2ZW50TGlzdGVuZXJzKCk7XHJcbiAgICB0aGlzLl9yZW5kZXJMaWtlcygpO1xyXG5cclxuICAgIHJldHVybiB0aGlzLl9jYXJkRWxlbWVudDtcclxuICB9XHJcblxyXG4gIGxpa2VDYXJkKCkge1xyXG4gICAgdGhpcy5saWtlSWNvbi5jbGFzc0xpc3QuYWRkKCdjYXJkX19saWtlLWJ1dHRvbl9hY3RpdmUnKTtcclxuICB9XHJcblxyXG4gIHVubGlrZUNhcmQoKSB7XHJcbiAgICB0aGlzLmxpa2VJY29uLmNsYXNzTGlzdC5yZW1vdmUoJ2NhcmRfX2xpa2UtYnV0dG9uX2FjdGl2ZScpO1xyXG4gIH1cclxufVxyXG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBNb2RhbCB7XHJcbiAgY29uc3RydWN0b3IobW9kYWwpIHtcclxuICAgIHRoaXMuX21vZGFsID0gbW9kYWw7XHJcbiAgfVxyXG4gIC8vIC0tLSBPcGVuIG1vZGFsIG1ldGhvZCAtLS0gLy8gXHJcbiAgb3BlbigpIHtcclxuICAgIHRoaXMuX21vZGFsLmNsYXNzTGlzdC5hZGQoXCIubW9kYWxfdmlzaWJsZVwiKTtcclxuICAgIHRoaXMuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuICB9XHJcbiAgLy8gLS0tIENsb3NlIG1vZGFsIG1ldGhvZCAtLS0gLy9cclxuICBjbG9zZSgpIHtcclxuICAgIHRoaXMuX21vZGFsLmNsYXNzTGlzdC5yZW1vdmUoXCIubW9kYWxfdmlzaWJsZVwiKTtcclxuICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcnMoKVxyXG4gIH1cclxuICAvLyAtLS0gQ2xvc2UgbW9kYWwgb24gRVNDIG1ldGhvZCAtLS0gLy9cclxuICBfY2xpY2tFc2NIYW5kbGVyID0gKGV2ZW50KSA9PiB7XHJcbiAgICBpZiAoZXZlbnQua2V5ID09PSBcIkVzY2FwZVwiKSB7XHJcbiAgICAgIHRoaXMuY2xvc2UoKTtcclxuICAgIH1cclxuICB9XHJcbiAgLy8gLS0tIENsb3NlIG1vZGFsIG9uIGNsb3NlKCdYJykgYnV0dG9uIHByZXNzIG1ldGhvZCAtLS0gLy9cclxuICBfY2xpY2tPbkNsb3NlQnV0dG9uSGFuZGxlciA9ICgpID0+IHtcclxuICAgIHRoaXMuY2xvc2UoKTtcclxuICB9O1xyXG4gIC8vIC0tLSBDbG9zZSBtb2RhbCBvbiBvdmVybGF5IG1vdXNlIGNsaWNrIG1ldGhvZCAtLS0gLy9cclxuICBfY2xpY2tPbk92ZXJsYXlIYW5kbGVyID0gKGV2ZW50KSA9PiB7XHJcbiAgICBpZiAoZXZlbnQudGFyZ2V0ID09PSBldmVudC5jdXJyZW50VGFyZ2V0KSB7XHJcbiAgICAgIHRoaXMuY2xvc2UoKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICBzZXRFdmVudExpc3RlbmVycygpIHtcclxuICAgIHRoaXMuX21vZGFsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm1vZGFsX19jb250YWluZXJfdHlwZV9mb3JtJyk7XHJcbiAgICB0aGlzLl9tb2RhbFxyXG4gICAgICAucXVlcnlTZWxlY3RvcignLm1vZGFsX19jbG9zZS1idXR0b24nKVxyXG4gICAgICAuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLl9jbGlja09uQ2xvc2VCdXR0b25IYW5kbGVyKTtcclxuICAgIHRoaXMuX21vZGFsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5fY2xpY2tPbk92ZXJsYXlIYW5kbGVyKVxyXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMuX2NsaWNrRXNjSGFuZGxlcik7XHJcbiAgfVxyXG5cclxuICByZW1vdmVFdmVudExpc3RlbmVycygpIHtcclxuICAgIHRoaXMuX21vZGFsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm1vZGFsX19jb250YWluZXJfdHlwZV9mb3JtJyk7XHJcbiAgICB0aGlzLl9tb2RhbFxyXG4gICAgICAucXVlcnlTZWxlY3RvcignLm1vZGFsX19jbG9zZS1idXR0b24nKVxyXG4gICAgICAucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLl9jbGlja09uQ2xvc2VCdXR0b25IYW5kbGVyKTtcclxuICAgIHRoaXMuX21vZGFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5fY2xpY2tPbk92ZXJsYXlIYW5kbGVyKVxyXG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMuX2NsaWNrRXNjSGFuZGxlcik7XHJcbiAgfVxyXG59IiwiaW1wb3J0IE1vZGFsIGZyb20gXCIuL01vZGFsLmpzXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNb2RhbFdpdGhGb3JtIGV4dGVuZHMgTW9kYWwge1xyXG4gIGNvbnN0cnVjdG9yKHttb2RhbCwgaGFuZGxlU3VibWl0fSkge1xyXG4gICAgc3VwZXIobW9kYWwpO1xyXG4gICAgdGhpcy5faGFuZGxlU3VibWl0ID0gaGFuZGxlU3VibWl0O1xyXG4gICAgdGhpcy5fZm9ybSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tb2RhbF9fY29udGFpbmVyX3R5cGVfZm9ybScpO1xyXG4gICAgdGhpcy5fZm9ybUVsZW1lbnQgPSB0aGlzLl9mb3JtLnF1ZXJ5U2VsZWN0b3JBbGwoJy5tb2RhbF9faW5wdXQnKTtcclxuICB9XHJcblxyXG4gIF9nZXRJbnB1dFZhbHVlcygpIHtcclxuICAgIHRoaXMuX2Zvcm1JbnB1dFZhbHVlcyA9IHt9O1xyXG4gICAgaW5wdXRMaXN0LmZvckVhY2goKGlucHV0KSA9PiB7XHJcbiAgICAgIHRoaXMuX2Zvcm1JbnB1dFZhbHVlc1tpbnB1dC5uYW1lXSA9IGlucHV0LnZhbHVlO1xyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIGlucHV0VmFsdWVzO1xyXG4gIH1cclxuXHJcbiAgc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XHJcbiAgICBzdXBlci5zZXRFdmVudExpc3RlbmVycygpO1xyXG4gICAgdGhpcy5fZm9ybS5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCB0aGlzLmhhbmRsZVN1Ym1pdCk7XHJcbiAgfVxyXG5cclxuICByZW1vdmVFdmVudExpc3RlbmVycygpIHtcclxuICAgIHN1cGVyLnJlbW92ZUV2ZW50TGlzdGVuZXJzKCk7XHJcbiAgICB0aGlzLl9mb3JtLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIHRoaXMuaGFuZGxlU3VibWl0KTtcclxuICB9XHJcblxyXG4gIGhhbmRsZVN1Ym1pdCA9IChldmVudCkgPT57XHJcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgY29uc3QgaW5wdXRWYWx1ZXMgPSB0aGlzLl9oYW5kbGVTdWJtaXQodGhpcy5fZ2V0SW5wdXRWYWx1ZXMpO1xyXG5cclxuICAgIHJldHVybiBpbnB1dFZhbHVlcztcclxuICB9XHJcblxyXG4gIGhhbmRsZVJlbW92ZShoYW5kbGUpIHtcclxuICAgIHRoaXMuX2hhbmRsZVN1Ym1pdCA9IGhhbmRsZTtcclxuICB9XHJcblxyXG4gIGNsb3NlKCkge1xyXG4gICAgc3VwZXIuY2xvc2UoKTtcclxuICAgIHRoaXMuX2Zvcm0ucmVzZXQoKTtcclxuICB9XHJcbn0iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBTZWN0aW9uIHtcclxuICBjb25zdHJ1Y3Rvcih7IGl0ZW1zLCByZW5kZXJlciB9LCBjb250YWluZXJTZWxlY3Rvcikge1xyXG4gICAgdGhpcy5fcmVuZGVyZWRFbGVtZW50cyA9IGl0ZW1zO1xyXG4gICAgdGhpcy5fcmVuZGVyZXIgPSByZW5kZXJlcjtcclxuICAgIHRoaXMuX2NvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoY29udGFpbmVyU2VsZWN0b3IpO1xyXG4gIH1cclxuXHJcbiAgcmVuZGVyZXIoKSB7XHJcbiAgICB0aGlzLl9yZW5kZXJlZEVsZW1lbnRzLmZvckVhY2goKGl0ZW0pID0+IHRoaXMuX3JlbmRlcmVyKGl0ZW0pKTtcclxuICB9XHJcbiAgXHJcbiAgYWRkSXRlbShpdGVtKSB7XHJcbiAgICB0aGlzLl9jb250YWluZXIuYXBwZW5kKGl0ZW0pO1xyXG4gIH1cclxuXHJcbiAgcHJlcGVuZEl0ZW0oaXRlbSkge1xyXG4gICAgdGhpcy5fY29udGFpbmVyLnByZXBlbmQoaXRlbSk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7cHJvZmlsZU5hbWUsIHByb2ZpbGVKb2IsIGF2YXRhckltYWdlfSBmcm9tICcuLi8uLi9wYWdlcy9JbmRleC5qcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBVc2VySW5mbyB7XHJcbiAgY29uc3RydWN0b3IobmFtZSwgam9iLCBhdmF0YXIpIHtcclxuICAgIHRoaXMuX25hbWUgPSBuYW1lO1xyXG4gICAgdGhpcy5fam9iID0gam9iO1xyXG4gICAgdGhpcy5fYXZhdGFyID0gYXZhdGFyO1xyXG4gIH1cclxuXHJcbiAgZ2V0VXNlckluZm8oKSB7XHJcbiAgICByZXR1cm4gKHRoaXMuX3VzZXJJbmZvID0ge1xyXG4gICAgICB0aXRsZTogdGhpcy5fbmFtZS50ZXh0Q29udGVudCxcclxuICAgICAgam9iOiB0aGlzLl9qb2IudGV4dENvbnRlbnRcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgc2V0VXNlckluZm8odGl0bGUsIGpvYiwgdXNlckF2YXRhcikge1xyXG4gICAgdGhpcy5fdXNlckluZm8gPSB7IHRpdGxlLCBqb2IsIHVzZXJBdmF0YXIgfTtcclxuICAgIGlmICh1c2VyQXZhdGFyKSB7XHJcbiAgICAgIGF2YXRhckltYWdlLnNyYyA9IHRoaXMuX3VzZXJJbmZvLnVzZXJBdmF0YXI7XHJcbiAgICAgIHByb2ZpbGVOYW1lLnRleHRDb250ZW50ID0gdGhpcy5fdXNlckluZm8udGl0bGU7XHJcbiAgICAgIHByb2ZpbGVKb2IudGV4dENvbnRlbnQgPSB0aGlzLl91c2VySW5mby5qb2I7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBwcm9maWxlTmFtZS50ZXh0Q29udGVudCA9IHRoaXMuX3VzZXJJbmZvLnRpdGxlO1xyXG4gICAgICBwcm9maWxlSm9iLnRleHRDb250ZW50ID0gdGhpcy5fdXNlckluZm8uam9iO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iLCIvLyAtLS0gJ0VkaXQgcHJvZmlsZScgbW9kYWwgY29uc3RzIC0tLSAvL1xyXG5leHBvcnQgY29uc3QgZWRpdEJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wcm9maWxlX19lZGl0LWJ1dHRvbicpO1xyXG5leHBvcnQgY29uc3QgcHJvZmlsZU1vZGFsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm1vZGFsX3R5cGVfZWRpdCcpO1xyXG5leHBvcnQgY29uc3QgcHJvZmlsZU5hbWUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucHJvZmlsZV9fdGl0bGUnKTtcclxuZXhwb3J0IGNvbnN0IG5hbWVJbnB1dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tb2RhbF9faW5wdXRfdHlwZV90aXRsZScpO1xyXG5leHBvcnQgY29uc3QgcHJvZmlsZUpvYiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wcm9maWxlX19zdWJ0aXRsZScpO1xyXG5leHBvcnQgY29uc3Qgam9iSW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubW9kYWxfX2lucHV0X3R5cGVfc3VidGl0bGUnKTtcclxuZXhwb3J0IGNvbnN0IGVkaXRDbG9zZUJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tb2RhbF9fY2xvc2UtYnV0dG9uX3R5cGVfZWRpdCcpO1xyXG4vLyAtLS0gJ0F2YXRhclwiIG1vZGFsIGNvbnN0cyAtLS0gLy9cclxuZXhwb3J0IGNvbnN0IGF2YXRhckltYWdlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByb2ZpbGVfX2ltYWdlJyk7XHJcbmV4cG9ydCBjb25zdCBhdmF0YXJFZGl0QnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByb2ZpbGVfX2ltYWdlLWVkaXQnKTtcclxuZXhwb3J0IGNvbnN0IGF2YXRhck1vZGFsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm1vZGFsX3R5cGVfYXZhdGFyJyk7XHJcbmV4cG9ydCBjb25zdCBhdmF0YXJNb2RhbElucHV0ID0gYXZhdGFyTW9kYWwucXVlcnlTZWxlY3RvcignLm1vZGFsX19pbnB1dF90eXBlX2F2YXRhcicpO1xyXG5leHBvcnQgY29uc3QgYXZhdGFyQ2xvc2VCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubW9kYWxfX2Nsb3NlLWJ1dHRvbl90eXBlX2F2YXRhcicpXHJcbi8vIC0tLSAnQWRkLWNhcmQnIG1vZGFsIGNvbnN0cyAtLS0gLy9cclxuZXhwb3J0IGNvbnN0IGFkZENhcmRCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucHJvZmlsZV9fYWRkLWJ1dHRvbicpO1xyXG5leHBvcnQgY29uc3QgYWRkQ2FyZE1vZGFsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm1vZGFsX3R5cGVfYWRkLWNhcmQnKTtcclxuZXhwb3J0IGNvbnN0IGNhcmRJbnB1dFRpdGxlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm1vZGFsX19pbnB1dF90eXBlX25hbWUnKTtcclxuZXhwb3J0IGNvbnN0IGNhcmRJbnB1dExpbmsgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubW9kYWxfX2lucHV0X3R5cGVfbGluaycpO1xyXG5leHBvcnQgY29uc3QgYWRkQ2FyZENsb3NlQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm1vZGFsX19jbG9zZS1idXR0b25fdHlwZV9hZGQtY2FyZCcpO1xyXG4vLyAtLS0gJ0FkZC1DYXJkJyBmb3JtIGNvbnN0cyAtLS0gLy9cclxuZXhwb3J0IGNvbnN0IGFkZENhcmRGb3JtID0gZG9jdW1lbnQuZm9ybXMuYWRkO1xyXG5leHBvcnQgY29uc3QgYWRkQ2FyZEZvcm1UaXRlbCA9IGFkZENhcmRGb3JtLmVsZW1lbnRzLnRpdGxlO1xyXG5leHBvcnQgY29uc3QgYWRkQ2FyZEZvcm1MaW5rID0gYWRkQ2FyZEZvcm0uZWxlbWVudHMubGluaztcclxuLy8gLS0tIEdlbmVyYWwgY29uc3QgLS0tIC8vXHJcbmV4cG9ydCBjb25zdCBzdWJtaXRCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubW9kYWxfX3N1Ym1pdC1idXR0b24nKTtcclxuZXhwb3J0IGNvbnN0IGNhcmRMaXN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNhcmRzX19ncmlkJyk7XHJcbmV4cG9ydCBjb25zdCBjYXJkVGVtcGxhdGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjY2FyZF9fdGVtcGxhdGUnKTtcclxuLy8gLS0tIEJpZyBpbWFnZSBtb2RhbCBjb25zdHMgLS0tIC8vXHJcbmV4cG9ydCBjb25zdCBjYXJkQmlnTW9kYWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubW9kYWxfdHlwZV9iaWctaW1hZ2UnKTtcclxuZXhwb3J0IGNvbnN0IGNhcmRCaWdNb2RhbEltYWdlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm1vZGFsX19iaWctaW1hZ2UnKTtcclxuZXhwb3J0IGNvbnN0IGNhcmRCaWdNb2RhbFRleHQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubW9kYWxfX2ltYWdlLWNhcHRpb24nKTtcclxuZXhwb3J0IGNvbnN0IGNhcmRCaWdNb2RhbENsb3NlSWNvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tb2RhbF9fY2xvc2UtYnV0dG9uX3R5cGVfYmlnLWltYWdlJyk7XHJcbi8vIC0tLSAnRGVsZXRlIGNhcmQnIG1vZGFsIGNvbnN0cyAtLS0gLy9cclxuZXhwb3J0IGNvbnN0IGRlbGV0ZUNhcmQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm1vZGFsX3R5cGVfZGVsZXRlLWNhcmRcIik7XHJcbi8vIC0tLSBGb3JtIGNvbmZpZyBjb25zdHMgLS0tIC8vXHJcbmV4cG9ydCBjb25zdCBmb3JtQ29uZmlnID0ge1xyXG4gIGZvcm1TZWxlY3RvcjogXCIubW9kYWxfX2NvbnRhaW5lclwiLFxyXG4gIGlucHV0U2VsZWN0b3I6IFwiLm1vZGFsX19pbnB1dFwiLFxyXG4gIHN1Ym1pdEJ1dHRvblNlbGVjdG9yOiBcIi5tb2RhbF9fc3VibWl0LWJ1dHRvblwiLFxyXG4gIGluYWN0aXZlQnV0dG9uQ2xhc3M6IFwibW9kYWxfX3N1Ym1pdC1idXR0b25fZGlzYWJsZWRcIixcclxuICBpbnB1dEVycm9yQ2xhc3M6IFwibW9kYWxfX2lucHV0X2Vycm9yXCIsXHJcbiAgZXJyb3JNZXNzYWdlQ2xhc3M6IFwibW9kYWxfX2Vycm9yX3Zpc2libGVcIlxyXG59O1xyXG4iLCJpbXBvcnQgXCIuL2luZGV4LmNzc1wiO1xyXG5pbXBvcnQgRm9ybVZhbGlkYXRvciBmcm9tIFwiLi4vY29tcG9uZW50cy9zY3JpcHRzL0Zvcm1WYWxpZGF0b3IuanNcIjtcclxuaW1wb3J0IENhcmQgZnJvbSBcIi4uL2NvbXBvbmVudHMvc2NyaXB0cy9DYXJkLmpzXCI7XHJcbmltcG9ydCBNb2RhbFdpdGhJbWFnZSBmcm9tIFwiLi4vY29tcG9uZW50cy9zY3JpcHRzL01vZGFsV2l0aEltYWdlLmpzXCI7XHJcbmltcG9ydCBNb2RhbFdpdGhGb3JtIGZyb20gXCIuLi9jb21wb25lbnRzL3NjcmlwdHMvTW9kYWxXaXRoRm9ybS5qc1wiO1xyXG5pbXBvcnQgQXBpIGZyb20gXCIuLi9jb21wb25lbnRzL3NjcmlwdHMvQXBpLmpzXCJcclxuaW1wb3J0IFNlY3Rpb24gZnJvbSBcIi4uL2NvbXBvbmVudHMvc2NyaXB0cy9TZWN0aW9uLmpzXCI7XHJcbmltcG9ydCBVc2VySW5mbyBmcm9tIFwiLi4vY29tcG9uZW50cy9zY3JpcHRzL1VzZXJJbmZvLmpzXCI7XHJcbmltcG9ydCB7XHJcbiAgcHJvZmlsZU5hbWUsXHJcbiAgbmFtZUlucHV0LFxyXG4gIHByb2ZpbGVKb2IsXHJcbiAgam9iSW5wdXQsXHJcbiAgZWRpdEJ1dHRvbixcclxuICBwcm9maWxlTW9kYWwsXHJcbiAgY2FyZFRlbXBsYXRlLFxyXG4gIGFkZENhcmRCdXR0b24sXHJcbiAgYWRkQ2FyZE1vZGFsLFxyXG4gIGF2YXRhck1vZGFsLFxyXG4gIGF2YXRhckltYWdlLFxyXG4gIGF2YXRhckVkaXRCdXR0b24sXHJcbiAgY2FyZEJpZ01vZGFsLFxyXG4gIGRlbGV0ZUNhcmQsXHJcbiAgZm9ybUNvbmZpZ1xyXG59IGZyb20gXCIuLi9jb21wb25lbnRzL3V0aWxzL2NvbnN0YW50cy5qc1wiO1xyXG5cclxuLy8gPT09PT0gTW9kYWxzID09PT09IC8vXHJcbi8vIC0tLSBCaWcgaW1hZ2UgbW9kYWwgaW5zdGFuY2UgLS0tIC8vXHJcbmNvbnN0IGJpZ0ltYWdlID0gbmV3IE1vZGFsV2l0aEltYWdlKGNhcmRCaWdNb2RhbCk7XHJcbmJpZ0ltYWdlLnNldEV2ZW50TGlzdGVuZXJzKCk7XHJcbi8vIC0tLSBEZWxldGUgY2FyZCBtb2RhbCBpbnN0YW5jZSBhbmQgZXZlbnRzIC0tLSAvL1xyXG5jb25zdCBkZWxldGVDYXJkTW9kYWwgPSBuZXcgTW9kYWxXaXRoRm9ybSh7XHJcbiAgbW9kYWw6IGRlbGV0ZUNhcmRcclxufSk7XHJcbmRlbGV0ZUNhcmRNb2RhbC5zZXRFdmVudExpc3RlbmVycygpO1xyXG4vLyAtLS0gVVggZm9yIG1vZGFscyAtLS0gLy9cclxuZnVuY3Rpb24gbG9hZGluZ01vZGFsKGlzTG9hZGluZywgbW9kYWwpIHtcclxuICBpZiAoaXNMb2FkaW5nKSB7IG1vZGFsLnF1ZXJ5U2VsZWN0b3IoXCIubW9kYWxfX3N1Ym1pdC1idXR0b25cIikudGV4dENvbnRlbnQgPSBcIlNhdmluZy4uLlwiOyB9IFxyXG4gIGVsc2UgeyBtb2RhbC5xdWVyeVNlbGVjdG9yKFwiLm1vZGFsX19zdWJtaXQtYnV0dG9uXCIpLnRleHRDb250ZW50ID0gXCJTYXZlXCI7IH1cclxufVxyXG5cclxuLy8gPT09PT0gQVBJID09PT09IC8vXHJcbi8vIC0tLSBTZXR0aW5nIHRoZSBkZWZhdWx0IGZldGNoaW5nIHVybCBhbmQgdG9rZW4gLS0tIC8vXHJcbmNvbnN0IGFwaSA9IG5ldyBBcGkoe1xyXG4gIGJhc2VVcmw6IFwiaHR0cHM6Ly9hcm91bmQubm9tb3JlcGFydGllcy5jby92MS9ncm91cC0xMlwiLFxyXG4gIGhlYWRlcnM6IFxyXG4gIHtcclxuICAgIGF1dGhvcml6YXRpb246IFwiNzA5YTBkOWQtZGIwNi00ODkwLWE1OTQtYjA3ZTczMDlhMzUzXCIsXHJcbiAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nIFxyXG4gIH1cclxufSk7XHJcbi8vIC0tLSBHZXRBcHBJbmZvIG1ldGhvZCAtLS0gLy9cclxuYXBpXHJcbiAgLmdldEFwcEluZm8oKVxyXG4gIC50aGVuKCAoW2NhcmRMaXN0LCB1c2VyRGF0YV0pID0+IHtcclxuICAgIC8vIC0tLSAnUHJvZmlsZScgaW5mbyBlZGl0aW5nIC0tLSAvL1xyXG4gICAgY29uc3QgcHJvZmlsZSA9IG5ldyBVc2VySW5mbyhwcm9maWxlTmFtZSwgcHJvZmlsZUpvYiwgYXZhdGFySW1hZ2UpO1xyXG4gICAgcHJvZmlsZS5zZXRVc2VySW5mbyh1c2VyRGF0YSk7XHJcbiAgICAvLyAtLS0gTmV3IGNhcmQgYWRkaW5nIC0tLSAvL1xyXG4gICAgY29uc3QgYWRkaW5nTmV3Q2FyZCA9IChkYXRhKSA9PntcclxuICAgICAgY29uc3QgY2FyZEluc3RhbmNlID0gbmV3IENhcmQoZGF0YSwgY2FyZFRlbXBsYXRlLCB1c2VyRGF0YS5faWQsIHtcclxuICAgICAgICBvbkNhcmRDbGljazogKHtuYW1lLCBsaW5rfSkgPT4ge1xyXG4gICAgICAgICAgYmlnSW1hZ2Uub3BlbihsaW5rLCBuYW1lKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHJlbW92ZUhhbmRsZXI6IChjYXJkSWQpID0+IHtcclxuICAgICAgICAgIGRlbGV0ZUNhcmRNb2RhbC5vcGVuKCk7XHJcbiAgICAgICAgICBkZWxldGVDYXJkTW9kYWwuaGFuZGxlUmVtb3ZlKCgpID0+IHtcclxuICAgICAgICAgICAgYXBpXHJcbiAgICAgICAgICAgICAgLnJlbW92ZUNhcmQoY2FyZElkKVxyXG4gICAgICAgICAgICAgIC50aGVuKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIGNhcmRJbnN0YW5jZS5kZWxldGVDYXJkTW9kYWwoKTtcclxuICAgICAgICAgICAgICAgIGRlbGV0ZUNhcmRNb2RhbC5jbG9zZSgpO1xyXG4gICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgLmNhdGNoKGVyciA9PiBjb25zb2xlLmxvZyhlcnIpKTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbGlrZUhhbmRsZXI6IChjYXJkSWQpID0+e1xyXG4gICAgICAgICAgY29uc3QgbGlrZVRvZ2dsZSA9IGNhcmRJbnN0YW5jZS5pc0xpa2VkKCk7XHJcbiAgICAgICAgICBpZihsaWtlVG9nZ2xlKSB7XHJcbiAgICAgICAgICAgIGFwaVxyXG4gICAgICAgICAgICAgIC51bmxpa2VDYXJkKGNhcmRJZClcclxuICAgICAgICAgICAgICAudGhlbigoY291bnQpID0+IHtcclxuICAgICAgICAgICAgICAgIGNhcmRJbnN0YW5jZS51bmxpa2VDYXJkKCk7XHJcbiAgICAgICAgICAgICAgICBjYXJkSW5zdGFuY2Uuc2hvd0xpa2VzKGNvdW50Lmxpa2VzLmxlbmdodCk7XHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgYXBpXHJcbiAgICAgICAgICAgICAgLmxpa2VDYXJkKGNhcmRJZClcclxuICAgICAgICAgICAgICAudGhlbigoY291bnQpID0+IHtcclxuICAgICAgICAgICAgICAgIGNhcmRJbnN0YW5jZS51bmxpa2VDYXJkKCk7XHJcbiAgICAgICAgICAgICAgICBjYXJkSW5zdGFuY2Uuc2hvd0xpa2VzKGNvdW50Lmxpa2VzLmxlbmdodCk7XHJcbiAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAuY2F0Y2goKGVycikgPT4gY29uc29sZS5sb2coZXJyKSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgICAgcmV0dXJuIGNhcmRJbnN0YW5jZTtcclxuICAgIH07XHJcbiAgICAvLyAtLS0gQ2FyZHMgc2VjdGlvbiBjcmVhdGlvbiAtLS0gLy9cclxuICAgIGNvbnN0IGNhcmRzTGlzdCA9IG5ldyBTZWN0aW9uKHtcclxuICAgICAgaXRlbXM6IGNhcmRMaXN0LFxyXG4gICAgICByZW5kZXJlcjogKGRhdGEpID0+IHtcclxuICAgICAgICBjYXJkc0xpc3QuYWRkSXRlbShhZGRpbmdOZXdDYXJkKGRhdGEpLmdlbmVyYXRlQ2FyZCgpKTtcclxuICAgICAgfVxyXG4gICAgfSwgXHJcbiAgICAnLmNhcmRzX19ncmlkJyk7XHJcbiAgICBjb25zb2xlLmxvZyhjYXJkTGlzdCk7XHJcbiAgICAvLyAtLS0gUmVuZGVyIGNhcmRzIC0tLSAvL1xyXG4gICAgY2FyZHNMaXN0LnJlbmRlcmVyKCk7XHJcbiAgICAvLyAtLS0gTmV3IGNhcmQgYWRkaW5nIGZvcm0gLS0tIC8vXHJcbiAgICBjb25zdCBhZGRDYXJkRm9ybSA9IG5ldyBNb2RhbFdpdGhGb3JtKHtcclxuICAgICAgbW9kYWw6IGFkZENhcmRNb2RhbCxcclxuICAgICAgaGFuZGxlU3VibWl0OiAoZGF0YSkgPT57XHJcbiAgICAgICAgbG9hZGluZ01vZGFsKHRydWUsIGFkZENhcmRNb2RhbCk7XHJcbiAgICAgICAgYXBpXHJcbiAgICAgICAgICAuYWRkQ2FyZChkYXRhKVxyXG4gICAgICAgICAgLnRoZW4oKHJlcykgPT4ge1xyXG4gICAgICAgICAgICBjYXJkc0xpc3QucHJlcGVuZEl0ZW0oYWRkaW5nTmV3Q2FyZChyZXMpLmdlbmVyYXRlQ2FyZCgpKTtcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgICAudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgIGFkZENhcmRGb3JtLmNsb3NlKCk7XHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgICAgLmNhdGNoKChlcnIpID0+IGNvbnNvbGUubG9nKGVycikpXHJcbiAgICAgICAgICAuZmluYWxseSgoKSA9PiBsb2FkaW5nTW9kYWwoZmFsc2UsIGFkZENhcmRNb2RhbCkpO1xyXG4gICAgICB9LFxyXG4gICAgfSk7XHJcbiAgICAvLyAtLS0gQWRkIGNhcmQgYnV0dG9uIGZ1bmN0aW9uYWwgYWRkaW5nIC0tLSAvL1xyXG4gICAgYWRkQ2FyZEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgICBhZGRDYXJkRm9ybVZhbGlkYXRpb24ucmVzZXRWYWxpZGF0aW9uKCk7XHJcbiAgICAgIGFkZE5ld0NhcmRNb2RhbC5vcGVuKCk7XHJcbiAgICB9KTtcclxuICAgIGFkZE5ld0NhcmRNb2RhbC5zZXRFdmVudExpc3RlbmVycygpO1xyXG4gICAgLy8gLS0tIFByb2ZpbGUgZWRpdCBmb3JtIC0tLSAvL1xyXG4gICAgY29uc3QgcHJvZmlsZUZvcm0gPSBuZXcgTW9kYWxXaXRoRm9ybSh7XHJcbiAgICAgIG1vZGFsOiBwcm9maWxlTW9kYWwsIFxyXG4gICAgICBoYW5kbGVTdWJtaXQ6ICh1c2VySW5mbykgPT4ge1xyXG4gICAgICAgIGxvYWRpbmdNb2RhbCh0cnVlLCBwcm9maWxlTW9kYWwpO1xyXG4gICAgICAgIGFwaVxyXG4gICAgICAgIC51cGRhdGVVc2VySW5mbyhVc2VySW5mbylcclxuICAgICAgICAudGhlbigocmVzKSA9PiB7XHJcbiAgICAgICAgICBwcm9maWxlLnNldFVzZXJJbmZvKHJlcylcclxuICAgICAgICB9KVxyXG4gICAgICAgIC50aGVuKCgpID0+IHtcclxuICAgICAgICAgIHByb2ZpbGVGb3JtLmNsb3NlKClcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5jYXRjaCgoZXJyKSA9PiBjb25zb2xlLmxvZyhlcnIpKVxyXG4gICAgICAgIC5maW5hbGx5KCgpID0+IGxvYWRpbmdNb2RhbChmYWxzZSxwcm9maWxlTW9kYWwpKVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIC8vIC0tLSBPcGVuICdQcm9maWxlJyBmb3JtIHdpdGggY3VycmVudCB2YWx1ZXMgYXMgaW5wdXRzIC0tLSAvL1xyXG4gICAgZWRpdEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgICAgcHJvZmlsZUZvcm1WYWxpZGF0aW9uLnJlc2V0VmFsaWRhdGlvbigpO1xyXG4gICAgICBjb25zdCB7IG5hbWUsIGpvYiB9ID0gcHJvZmlsZS5nZXRVc2VySW5mbygpO1xyXG4gICAgICBuYW1lSW5wdXQudmFsdWUgPSBuYW1lO1xyXG4gICAgICBqb2JJbnB1dC52YWx1ZSA9IGpvYjtcclxuICAgICAgcHJvZmlsZUZvcm0ub3BlbigpO1xyXG4gICAgfSk7XHJcbiAgICAvLyAtLS0gJ0F2YXRhcicgZWRpdC91cGRhdGUgZm9ybSAtLS0gLy9cclxuICAgIGNvbnN0IGF2YXRhckZvcm0gPSBuZXcgTW9kYWxXaXRoRm9ybSh7XHJcbiAgICAgIG1vZGFsOiBhdmF0YXJNb2RhbCxcclxuICAgICAgaGFuZGxlU3VibWl0OiAoaW1nTGluaykgPT4ge1xyXG4gICAgICAgIGxvYWRpbmdNb2RhbCh0cnVlLCBhdmF0YXJNb2RhbCk7XHJcbiAgICAgICAgYXBpXHJcbiAgICAgICAgICAudXBkYXRlVXNlckluZm8oaW1nTGluay5hdmF0YXIpXHJcbiAgICAgICAgICAudGhlbigocmVzKSA9PiB7XHJcbiAgICAgICAgICAgIHByb2ZpbGUuc2V0VXNlckluZm8ocmVzKTtcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgICAudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgIGF2YXRhckZvcm0uY2xvc2UoKTtcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgICAuY2F0Y2goKGVycikgPT4gY29uc29sZS5sb2coZXJyKSlcclxuICAgICAgICAgIC5maW5hbGx5KCgpID0+IHtcclxuICAgICAgICAgICAgbG9hZGluZ01vZGFsKGZhbHNlLCBhdmF0YXJNb2RhbCk7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgfSxcclxuICAgIH0pO1xyXG59KVxyXG4uY2F0Y2goKGVycikgPT4gY29uc29sZS5sb2coZXJyKSk7XHJcblxyXG4vLyA9PT09PSBBdmF0YXIgPT09PT0gLy9cclxuLy8gLS0tICdBdmF0YXInIGZvcm0gZnVuY3Rpb25hbCAtLS0gLy9cclxuZnVuY3Rpb24gaGFuZGxlQXZhdGFyRWRpdChkYXRhKSB7XHJcbiAgbG9hZGluZ01vZGFsKHRydWUsIGF2YXRhck1vZGFsKTtcclxuICBhcGkuc2V0VXNlckF2YXRhcih7XHJcbiAgICBhdmF0YXI6IGRhdGEuYXZhdGFyVVJMXHJcbiAgfSlcclxuICAudGhlbihyZXMgPT4ge1xyXG4gICAgYXZhdGFySW1hZ2Uuc3JjID0gcmVzLmF2YXRhcjtcclxuICAgIGxvYWRpbmdNb2RhbChmYWxzZSwgYXZhdGFyTW9kYWwpO1xyXG4gICAgZWRpdEF2YXRhci5jbG9zZSgpO1xyXG4gIH0pXHJcbiAgLmNhdGNoKGVyciA9PiBjb25zb2xlLmxvZyhlcnIpKTtcclxufVxyXG4vLyAtLS0gJ0F2YXRhcicgZm9ybSBjcmVhdGlvbiAtLS0gLy9cclxuY29uc3QgZWRpdEF2YXRhciA9IG5ldyBNb2RhbFdpdGhGb3JtKHtcclxuICBtb2RhbFNlbGVjdG9yOiBhdmF0YXJNb2RhbCxcclxuICBtb2RhbFN1Ym1pdGlvbjogKGRhdGEpID0+IHtcclxuICAgIGhhbmRsZUF2YXRhckVkaXQoZGF0YSlcclxuICB9XHJcbn0pO1xyXG4vLyAtLS0gT3BlbiBhdmF0YXIgZWRpdCBtb2RhbCBvbiBjbGljayAtLS0gLy9cclxuYXZhdGFyRWRpdEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gIGVkaXRBdmF0YXIub3BlbigpO1xyXG59KTtcclxuLy8gLS0tICdBdmF0YXInIGZvcm0gaGFuZGxlciAtLS0gLy9cclxuZWRpdEF2YXRhci5zZXRFdmVudExpc3RlbmVycygpO1xyXG5cclxuLy8gPT09PT0gVmFsaWRhdGlvbiA9PT09PSAvL1xyXG4vLyAtLS0gJ0VkaXQgcHJvZmlsZScgZm9ybSB2YWxpZGF0aW9uIGFkZGluZyAtLS0gLy9cclxuY29uc3QgcHJvZmlsZUZvcm1WYWxpZGF0aW9uID0gbmV3IEZvcm1WYWxpZGF0b3IoZm9ybUNvbmZpZywgcHJvZmlsZU1vZGFsKTtcclxucHJvZmlsZUZvcm1WYWxpZGF0aW9uLmVuYWJsZVZhbGlkYXRpb24oKTtcclxuLy8gLS0tICdBdmF0YXInIGZvcm0gdmFsaWRhdGlvbiBhZGRpbmcgLS0tIC8vXHJcbmNvbnN0IGF2YXRhckZvcm1WYWxpZGF0aW9uID0gbmV3IEZvcm1WYWxpZGF0b3IoZm9ybUNvbmZpZywgYXZhdGFyTW9kYWwpO1xyXG5hdmF0YXJGb3JtVmFsaWRhdGlvbi5lbmFibGVWYWxpZGF0aW9uKCk7XHJcbi8vIC0tLSAnQWRkIGNhcmQnIGZvcm0gdmFsaWRhdGlvbiBhZGRpbmcgLS0tIC8vXHJcbmNvbnN0IGFkZENhcmRGb3JtVmFsaWRhdGlvbiA9IG5ldyBGb3JtVmFsaWRhdG9yKGZvcm1Db25maWcsIGFkZENhcmRNb2RhbCk7XHJcbmFkZENhcmRGb3JtVmFsaWRhdGlvbi5lbmFibGVWYWxpZGF0aW9uKCk7XHJcblxyXG5leHBvcnQgeyBwcm9maWxlTmFtZSwgcHJvZmlsZUpvYiwgYmlnSW1hZ2UsIGF2YXRhckltYWdlIH0iLCJpbXBvcnQgTW9kYWwgZnJvbSBcIi4vTW9kYWwuanNcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1vZGFsV2l0aEltYWdlIGV4dGVuZHMgTW9kYWwge1xyXG4gIC8vIC0tLSBPcGVuIGJpZyBpbWFnZSBtb2RhbCBtZXRob2QgLS0tIC8vXHJcbiAgb3BlbnVwID0gKGV2ZW50KSA9PiB7XHJcbiAgICBjb25zdCBiaWdJbWFnZSA9IGV2ZW50LnRhcmdldDtcclxuICAgIHRoaXMuX21vZGFsRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLm1vZGFsX19iaWctaW1hZ2VcIikuc3JjID0gYmlnSW1hZ2Uuc3JjO1xyXG4gICAgdGhpcy5fbW9kYWxFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubW9kYWxfX2JpZy1pbWFnZVwiKS5hbHQgPSBiaWdJbWFnZS5hbHQ7XHJcbiAgICB0aGlzLl9tb2RhbEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5tb2RhbF9faW1hZ2UtY2FwdGlvblwiKS50ZXh0Q29udGVudCA9IGJpZ0ltYWdlLmFsdDtcclxuXHJcbiAgICB0aGlzLm9wZW4oKTtcclxuICB9XHJcbn0iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBBcGkge1xyXG4gIGNvbnN0cnVjdG9yKHsgYmFzZVVybCwgaGVhZGVycyB9KSB7XHJcbiAgICB0aGlzLl9iYXNlVXJsID0gYmFzZVVybDtcclxuICAgIHRoaXMuX2hlYWRlcnMgPSBoZWFkZXJzO1xyXG4gIH1cclxuXHJcbiAgLy8gPT09IEdldHRpbmcgaW5mbyBmcm9tIHNlcnZlciA9PT0gLy9cclxuICAvLyAtLS0gR2V0IGNhcmQgbGlzdCBmcm9tIHRoZSBzZXJ2ZXIgLS0tIC8vXHJcbiAgZ2V0Q2FyZExpc3QoKSB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICBmZXRjaCh0aGlzLl9iYXNlVXJsICsgXCIvY2FyZHNcIiwge1xyXG4gICAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXHJcbiAgICAgIH0pXHJcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlcykge1xyXG4gICAgICAgICAgaWYgKHJlcy5vaykge1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzLmpzb24oKS50aGVuKChkYXRhKSA9PiB7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIGRhdGE7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgUHJvbWlzZS5yZWplY3QoXCJFcnJvciFcIiArIHJlcy5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgKTtcclxuICB9XHJcbiAgLy8gLS0tIEdldCB1c2VyIGluZm8gZnJvbSB0aGUgc2VydmVyIC0tLSAvL1xyXG4gIGdldFVzZXJJbmZvKCkge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgZmV0Y2godGhpcy5fYmFzZVVybCArIFwiL3VzZXJzL21lXCIsIHtcclxuICAgICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzLFxyXG4gICAgICB9KVxyXG4gICAgICAgIC50aGVuKChyZXMpID0+XHJcbiAgICAgICAgICByZXMub2sgPyByZXMuanNvbigpIDogUHJvbWlzZS5yZWplY3QoXCJFcnJvciFcIiArIHJlcy5zdGF0dXNUZXh0KVxyXG4gICAgICAgIClcclxuICAgICk7XHJcbiAgfVxyXG4gIC8vIC0tLSBDaGVjayBpZiBhbGwgaW5mbyBmZXRjaGVkIC0tLSAvL1xyXG4gIGdldEFwcEluZm8oKSB7XHJcbiAgICByZXR1cm4gUHJvbWlzZS5hbGwoW3RoaXMuZ2V0Q2FyZExpc3QoKSwgdGhpcy5nZXRVc2VySW5mbygpXSk7XHJcbiAgfVxyXG5cclxuICAvLyA9PT0gQWRkaW5nL1JlbW92aW5nL0VkaXRpbmcgPT09IC8vXHJcbiAgLy8gLS0tIEFkZGluZyBuZXcgY2FyZCAtLS0gLy9cclxuICBhZGRDYXJkKGRhdGEpIHtcclxuICAgIGNvbnN0IHtuYW1lLCBsaW5rfSA9IGRhdGE7XHJcbiAgICByZXR1cm4gZmV0Y2godGhpcy5fYmFzZVVybCArIFwiL2NhcmRzXCIsIHtcclxuICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVycyxcclxuICAgICAgbWV0aG9kOiBcIlBPU1RcIixcclxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xyXG4gICAgICAgIG5hbWUsXHJcbiAgICAgICAgbGluayxcclxuICAgICAgfSksXHJcbiAgICB9KS50aGVuKChyZXMpID0+IHtcclxuICAgICAgaWYgKHJlcy5vaykge1xyXG4gICAgICAgIHJldHVybiByZXMuanNvbigpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIFByb21pc2UucmVqZWN0KFwiRXJyb3IhXCIgKyByZXMuc3RhdHVzVGV4dCk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuICAvLyAtLS0gUmVtb3ZpbmcgYSBjYXJkIC0tLSAvL1xyXG4gIHJlbW92ZUNhcmQoY2FyZElkKSB7XHJcbiAgICByZXR1cm4gZmV0Y2godGhpcy5fYmFzZVVybCArIFwiL2NhcmRzL1wiICsgY2FyZElkLCB7XHJcbiAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXHJcbiAgICAgIG1ldGhvZDogXCJERUxFVEVcIixcclxuICAgIH0pLnRoZW4oKHJlcykgPT5cclxuICAgICAgcmVzLm9rID8gcmVzLmpzb24oKSA6IFByb21pc2UucmVqZWN0KFwiRXJyb3IhXCIgKyByZXMuc3RhdHVzVGV4dClcclxuICAgICk7XHJcbiAgfVxyXG4gIC8vIC0tLSBMaWtlIGEgY2FyZCAtLS0gLy9cclxuICBsaWtlQ2FyZChjYXJkSWQpIHtcclxuICAgIHJldHVybiBmZXRjaCh0aGlzLl9iYXNlVXJsICsgXCIvY2FyZHMvbGlrZXMvXCIgKyBjYXJkSWQsIHtcclxuICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVycyxcclxuICAgICAgbWV0aG9kOiBcIlBVVFwiLFxyXG4gICAgfSkudGhlbigocmVzKSA9PiB7XHJcbiAgICAgIGlmIChyZXMub2spIHtcclxuICAgICAgICByZXR1cm4gcmVzLmpzb24oKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBQcm9taXNlLnJlamVjdChcIkVycm9yIVwiICsgcmVzLnN0YXR1c1RleHQpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcbiAgLy8gLS0tIFVubGlrZSBhIGNhcmQgLS0tIC8vXHJcbiAgdW5saWtlQ2FyZChjYXJkSWQpIHtcclxuICAgIHJldHVybiBmZXRjaCh0aGlzLl9iYXNlVXJsICsgXCIvY2FyZHMvbGlrZXMvXCIgKyBjYXJkSWQsIHtcclxuICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVycyxcclxuICAgICAgbWV0aG9kOiBcIkRFTEVURVwiLFxyXG4gICAgfSkudGhlbigocmVzKSA9PlxyXG4gICAgICByZXMub2sgPyByZXMuanNvbigpIDogUHJvbWlzZS5yZWplY3QoXCJFcnJvciFcIiArIHJlcy5zdGF0dXNUZXh0KVxyXG4gICAgKTtcclxuICB9XHJcbiAgLy8gLS0tIFNldHRpbmcgdXNlciBwcm9maWxlIGluZm8gLS0tIC8vXHJcbiAgc2V0VXNlckluZm8oIHVzZXJJbmZvICkge1xyXG4gICAgY29uc3QgeyBuYW1lLCBqb2IgfSA9IHVzZXJJbmZvO1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgZmV0Y2godGhpcy5fYmFzZVVybCArIFwiL3VzZXJzL21lXCIsIHtcclxuICAgICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzLFxyXG4gICAgICAgIG1ldGhvZDogXCJQQVRDSFwiLFxyXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcclxuICAgICAgICAgIG5hbWUsXHJcbiAgICAgICAgICBqb2IsXHJcbiAgICAgICAgfSksXHJcbiAgICAgIH0pXHJcbiAgICAgICAgLnRoZW4oKHJlcykgPT4ge1xyXG4gICAgICAgICAgcmV0dXJuIHJlcy5va1xyXG4gICAgICAgICAgICA/IHJlcy5qc29uKClcclxuICAgICAgICAgICAgOiBQcm9taXNlLnJlamVjdChcIkVycm9yIVwiICsgcmVzLnN0YXR1c1RleHQgKyByZXMuc3RhdHVzKTtcclxuICAgICAgICB9KVxyXG4gICAgKTtcclxuICB9XHJcbiAgLy8gLS0tIFNldHRpbmcgdXNlciBwcm9maWxlIGF2YXRhciAtLS0gLy9cclxuICBzZXRVc2VyQXZhdGFyKHsgYXZhdGFyIH0pIHtcclxuICAgIHJldHVybiBmZXRjaCh0aGlzLl9iYXNlVXJsICsgXCIvdXNlcnMvbWUvYXZhdGFyXCIsIHtcclxuICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVycyxcclxuICAgICAgbWV0aG9kOiBcIlBBVENIXCIsXHJcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcclxuICAgICAgICBhdmF0YXIsXHJcbiAgICAgIH0pLFxyXG4gICAgfSkudGhlbigocmVzKSA9PlxyXG4gICAgICByZXMub2sgPyByZXMuanNvbigpIDogUHJvbWlzZS5yZWplY3QoXCJFcnJvciFcIiArIHJlcy5zdGF0dXNUZXh0KVxyXG4gICAgKTtcclxuICB9XHJcbiAgLy8gLS0tIFVwZGF0aW5nL0VkaXRpbmcgdXNlciBwcm9maWxlIGluZm8gLS0tIC8vXHJcbiAgdXBkYXRlVXNlckluZm8odXNlckluZm8pIHtcclxuICAgIGNvbnN0IHsgbmFtZSwgam9iIH0gPSB1c2VySW5mbztcclxuICAgIHJldHVybiBmZXRjaCh0aGlzLl9iYXNlVXJsICsgXCIvdXNlcnMvbWVcIiwge1xyXG4gICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzLFxyXG4gICAgICBtZXRob2Q6IFwiUEFUQ0hcIixcclxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xyXG4gICAgICAgIG5hbWUsXHJcbiAgICAgICAgam9iLFxyXG4gICAgICB9KSxcclxuICAgIH0pLnRoZW4oKHJlcykgPT4ge1xyXG4gICAgICByZXR1cm4gcmVzLm9rID8gcmVzLmpzb24oKSA6IFByb21pc2UucmVqZWN0KFwiRXJyb3IhXCIgKyByZXMuc3RhdHVzVGV4dCk7XHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuIl0sIm5hbWVzIjpbIl9fd2VicGFja19yZXF1aXJlX18iLCJleHBvcnRzIiwiZGVmaW5pdGlvbiIsImtleSIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJvYmoiLCJwcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiRm9ybVZhbGlkYXRvciIsImNvbnN0cnVjdG9yIiwiZm9ybUNvbmZpZyIsImZvcm1FbGVtZW50IiwidGhpcyIsIl9mb3JtQ29uZmlnIiwiX2Zvcm1FbGVtZW50IiwiX3Nob3dJbnB1dEVycm9yIiwiaW5wdXRFbGVtZW50IiwiZXJyb3JNZXNzYWdlIiwiaW5wdXRFcnJvckNsYXNzIiwiZXJyb3JNZXNzYWdlQ2xhc3MiLCJlcnJvckVsZW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiaWQiLCJ0ZXh0Q29udGVudCIsImNsYXNzTGlzdCIsImFkZCIsIl9oaWRlSW5wdXRFcnJvciIsInJlbW92ZSIsInJlc2V0VmFsaWRhdGlvbiIsImlucHV0cyIsImZvckVhY2giLCJpbnB1dCIsIl90b2dnbGVTdWJtaXRCdXR0b24iLCJfY2hlY2tJbnB1dCIsInZhbGlkaXR5IiwidmFsaWQiLCJ2YWxpZGF0aW9uTWVzc2FnZSIsIl9jaGVja0lmRm9ybVZhbGlkIiwiZXZlcnkiLCJpbmFjdGl2ZUJ1dHRvbkNsYXNzIiwic3VibWl0QnV0dG9uU2VsZWN0b3IiLCJidXR0b25FbGVtZW50IiwiZGlzYWJsZWQiLCJfc2V0RXZlbnRMaXN0ZW5lcnMiLCJpbnB1dFNlbGVjdG9yIiwiQXJyYXkiLCJmcm9tIiwicXVlcnlTZWxlY3RvckFsbCIsImFkZEV2ZW50TGlzdGVuZXIiLCJlbmFibGVWYWxpZGF0aW9uIiwiZXZlbnQiLCJwcmV2ZW50RGVmYXVsdCIsIkNhcmQiLCJkYXRhIiwidGVtcGxhdGUiLCJ1c2VySWQiLCJvbkNhcmRDbGljayIsInJlbW92ZUhhbmRsZXIiLCJsaWtlSGFuZGxlciIsIl9uYW1lIiwibmFtZSIsIl9saW5rIiwibGluayIsIl9saWtlcyIsImxpa2VzIiwiX293bmVySWQiLCJvd25lciIsIl9pZCIsIl90ZW1wbGF0ZSIsIl91c2VySWQiLCJfb25DYXJkQ2xpY2siLCJfbGlrZUhhbmRsZXIiLCJfcmVtb3ZlSGFuZGxlciIsIl9nZXRUZW1wbGF0ZSIsImNvbnRlbnQiLCJjbG9uZU5vZGUiLCJfc2V0QXR0cmlidXRlcyIsImNhcmRFbGVtZW50IiwiYXR0cmlicyIsInNldEF0dHJpYnV0ZSIsImRlbGV0ZUNhcmQiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwiX2NhcmRFbGVtZW50IiwiX3JlbmRlckxpa2VzIiwibGlrZSIsImxpa2VDYXJkIiwidW5saWtlQ2FyZCIsInNob3dMaWtlcyIsImNvdW50IiwiX2xpa2VDYXJkIiwiX2NhcmRJbWFnZSIsIl9zaG93RGVsZXRlSWNvbiIsIl9vd25lciIsImlzTGlrZWQiLCJsaWtlSWNvbiIsImNvbnRhaW5zIiwiZ2VuZXJhdGVDYXJkIiwic3JjIiwiX2ltYWdlIiwiYWx0IiwibGVuZ3RoIiwiTW9kYWwiLCJtb2RhbCIsIl9tb2RhbCIsIm9wZW4iLCJzZXRFdmVudExpc3RlbmVycyIsImNsb3NlIiwicmVtb3ZlRXZlbnRMaXN0ZW5lcnMiLCJfY2xpY2tFc2NIYW5kbGVyIiwiX2NsaWNrT25DbG9zZUJ1dHRvbkhhbmRsZXIiLCJfY2xpY2tPbk92ZXJsYXlIYW5kbGVyIiwidGFyZ2V0IiwiY3VycmVudFRhcmdldCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJNb2RhbFdpdGhGb3JtIiwiaGFuZGxlU3VibWl0Iiwic3VwZXIiLCJfaGFuZGxlU3VibWl0IiwiX2Zvcm0iLCJfZ2V0SW5wdXRWYWx1ZXMiLCJfZm9ybUlucHV0VmFsdWVzIiwiaW5wdXRMaXN0IiwidmFsdWUiLCJpbnB1dFZhbHVlcyIsImhhbmRsZVJlbW92ZSIsImhhbmRsZSIsInJlc2V0IiwiU2VjdGlvbiIsIml0ZW1zIiwicmVuZGVyZXIiLCJjb250YWluZXJTZWxlY3RvciIsIl9yZW5kZXJlZEVsZW1lbnRzIiwiX3JlbmRlcmVyIiwiX2NvbnRhaW5lciIsIml0ZW0iLCJhZGRJdGVtIiwiYXBwZW5kIiwicHJlcGVuZEl0ZW0iLCJwcmVwZW5kIiwiVXNlckluZm8iLCJqb2IiLCJhdmF0YXIiLCJfam9iIiwiX2F2YXRhciIsImdldFVzZXJJbmZvIiwiX3VzZXJJbmZvIiwidGl0bGUiLCJzZXRVc2VySW5mbyIsInVzZXJBdmF0YXIiLCJhdmF0YXJJbWFnZSIsInByb2ZpbGVOYW1lIiwicHJvZmlsZUpvYiIsImVkaXRCdXR0b24iLCJwcm9maWxlTW9kYWwiLCJuYW1lSW5wdXQiLCJqb2JJbnB1dCIsImF2YXRhckVkaXRCdXR0b24iLCJhdmF0YXJNb2RhbCIsImFkZENhcmRCdXR0b24iLCJhZGRDYXJkTW9kYWwiLCJhZGRDYXJkRm9ybSIsImZvcm1zIiwiY2FyZFRlbXBsYXRlIiwiZWxlbWVudHMiLCJjYXJkQmlnTW9kYWwiLCJmb3JtU2VsZWN0b3IiLCJiaWdJbWFnZSIsIm9wZW51cCIsIl9tb2RhbEVsZW1lbnQiLCJkZWxldGVDYXJkTW9kYWwiLCJsb2FkaW5nTW9kYWwiLCJpc0xvYWRpbmciLCJhcGkiLCJiYXNlVXJsIiwiaGVhZGVycyIsIl9iYXNlVXJsIiwiX2hlYWRlcnMiLCJnZXRDYXJkTGlzdCIsImZldGNoIiwidGhlbiIsInJlcyIsIm9rIiwianNvbiIsIlByb21pc2UiLCJyZWplY3QiLCJzdGF0dXNUZXh0IiwiZ2V0QXBwSW5mbyIsImFsbCIsImFkZENhcmQiLCJtZXRob2QiLCJib2R5IiwiSlNPTiIsInN0cmluZ2lmeSIsInJlbW92ZUNhcmQiLCJjYXJkSWQiLCJ1c2VySW5mbyIsInN0YXR1cyIsInNldFVzZXJBdmF0YXIiLCJ1cGRhdGVVc2VySW5mbyIsImF1dGhvcml6YXRpb24iLCJjYXJkTGlzdCIsInVzZXJEYXRhIiwicHJvZmlsZSIsImFkZGluZ05ld0NhcmQiLCJjYXJkSW5zdGFuY2UiLCJjYXRjaCIsImVyciIsImNvbnNvbGUiLCJsb2ciLCJsZW5naHQiLCJjYXJkc0xpc3QiLCJmaW5hbGx5IiwiYWRkQ2FyZEZvcm1WYWxpZGF0aW9uIiwiYWRkTmV3Q2FyZE1vZGFsIiwicHJvZmlsZUZvcm0iLCJwcm9maWxlRm9ybVZhbGlkYXRpb24iLCJhdmF0YXJGb3JtIiwiaW1nTGluayIsImVkaXRBdmF0YXIiLCJtb2RhbFNlbGVjdG9yIiwibW9kYWxTdWJtaXRpb24iLCJhdmF0YXJVUkwiLCJoYW5kbGVBdmF0YXJFZGl0Il0sInNvdXJjZVJvb3QiOiIifQ==