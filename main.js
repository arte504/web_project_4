!function(){"use strict";class e{constructor(e,t){this._formConfig=e,this._formElement=t,this.inputs=Array.from(this._formElement.querySelectorAll(this._formConfig.inputSelector)),this._buttonElement=this._formElement.querySelector(this._formConfig.submitButtonSelector)}_showInputError=(e,t)=>{const{inputErrorClass:s,errorMessageClass:r}=this._formConfig,n=this._formElement.querySelector(` #${e.id}_error `);n.textContent=t,n.classList.add(r),e.classList.add(s)};_hideInputError=e=>{const{inputErrorClass:t,errorMessageClass:s}=this._formConfig,r=this._formElement.querySelector(` #${e.id}_error `);r.textContent="",r.classList.remove(s),e.classList.remove(t)};_checkInput=e=>{e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)};_checkIValid=()=>this.inputs.every((e=>e.validity.valid));_toggleSubmitButton(){this._checkIValid()?(this._buttonElement.disabled=!1,this._buttonElement.classList.remove(this._formConfig.inactiveButtonClass)):(this._buttonElement.disabled=!0,this._buttonElement.classList.add(this._formConfig.inactiveButtonClass))}_setEventListeners=()=>(this.inputs.forEach((e=>{e.addEventListener("input",(()=>{this._checkInput(e),this._toggleSubmitButton()}))})),this._formElement);enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}}class t{constructor(e,t,s,r,n,i){this._name=e.name,this._link=e.link,this._likes=e.likes,this._ownerId=e.owner._id,this._id=e._id,this._template=n,this._userId=i,this._onCardClick=t,this._likeHandler=r,this._removeHandler=s}_getTemplate(){return this._template.content.querySelector(".card").cloneNode(!0)}_setAttributes(e,t){for(const s in t)e.setAttribute(s,t[s])}deleteCard(){const e=document.getElementById(id);e&&e.parentNode.removeChild(e),this._cardElement=null}_renderLikes(){this._likes.forEach((e=>e._id===this._userId?this._likeCard():this._unlikeCard()))}showLikes(e){this._cardElement.querySelector(".card__like-count").textContent=e}isLiked(){return this._liked}_checkForLike(e){return this._likes.find((t=>t._id===e))?this._liked=!0:this._liked=!1,this._liked}_setEventListeners(){this._cardElement.querySelector(".card__like-button").addEventListener("click",(e=>{this._likeCard(e)})),this._cardElement.querySelector(".card__delete-button").addEventListener("click",(()=>{this._removeHandler(this._id)})),this._cardElement.querySelector(".card__image").addEventListener("click",(()=>{this._onCardClick(this._name,this._link)}))}_showDeleteIcon(){this._userId!=this._ownerId&&this._cardElement.querySelector(".card__delete-button").classList.add("card__delete-button_hidden")}getCardId(){return this._id}generateCard(){return this._cardElement=this._getTemplate(),this.likeIcon=this._cardElement.querySelector(".card__like-button"),this._setAttributes(this._cardElement.querySelector(".card__image"),{src:this._link,alt:this._name}),this._cardElement.querySelector(".card__title").textContent=this._name,this._showDeleteIcon(),this.showLikes(this._likes.length),this._setEventListeners(),this._renderLikes(),this._cardElement}_likeCard(){this.likeIcon.classList.add("card__like-button_active")}_unlikeCard(){this.likeIcon.classList.remove("card__like-button_active")}updateCard(){this._likes=data.likes,this._checkForLike(user.id)?this._likeCard:this._unlikeCard,this._cardElement.querySelector(".card__like-count").textContent=this._likes.length}}class s{constructor(e,t){this._modalElement=document.querySelector(e),this._escapeKeyHandler=this._escapeKeyHandler.bind(this),this._checkKeyPress=t}open(){this._modalElement.classList.add("modal_visible"),document.addEventListener("keyup",this._escapeKeyHandler)}close(){this._modalElement.classList.remove("modal_visible"),document.removeEventListener("keyup",this._escapeKeyHandler)}_escapeKeyHandler(e){this._checkKeyPress(e.key)&&this.close()}setEventListeners(){this._modalElement.addEventListener("click",(e=>{e.target.classList.contains("modal__close-button")&&this.close(),e.target.classList.contains("modal_visible")&&this.close()}))}}class r extends s{constructor(e,t,s){super(e,t),this._handleSubmit=s,this._submitButton=this._modalElement.querySelector(".modal__submit-button"),this._form=document.querySelector(".modal__container"),this._textInButton=this._submitButton.textContent}getInputValues(){this._inputList=this._modalElement.querySelectorAll(".modal__input");const e={};return this._inputList.forEach((t=>{e[t.name]=t.value})),e||this._entredValue}setInputValues(e){this._entredValue=e}setEventListeners(){super.setEventListeners(),this._modalElement.addEventListener("submit",(e=>{e.preventDefault(),this._submitButton.textContent="Saving...",this._handleSubmit(this.getInputValues())}))}close(){this._submitButton.textContent=this._textInButton,this._form.reset(),super.close()}}class n{constructor({items:e,renderer:t},s){this._renderedElements=e,this._renderer=t,this._container=document.querySelector(s)}renderItems(){this._renderedElements.forEach((e=>{this._renderer(e)}))}addItem(e){this._container.prepend(e)}}const i=document.querySelector(".profile__edit-button"),o=document.querySelector(".modal_type_edit"),a=document.querySelector(".profile__title"),l=document.querySelector(".modal__input_type_title"),d=document.querySelector(".profile__subtitle"),_=document.querySelector(".modal__input_type_subtitle"),c=(document.querySelector(".modal__close-button_type_edit"),document.querySelector(".profile__image")),h=document.querySelector(".profile__image_overlay"),u=document.querySelector(".modal_type_avatar"),m=u.querySelector(".modal__input_type_avatar"),p=(document.querySelector(".modal__close-button_type_avatar"),document.querySelector(".profile__add-button")),y=document.querySelector(".modal_type_add-card"),b=document.querySelector(".modal__input_type_name"),E=document.querySelector(".modal__input_type_link"),v=(document.querySelector(".modal__close-button_type_add-card"),document.forms.add),k=(v.elements.title,v.elements.link,document.querySelector(".modal__submit-button"),document.querySelector(".cards__grid"),document.querySelector("#card__template")),C=document.querySelector(".modal_type_big-image"),g=C.querySelector(".modal__big-image"),f=C.querySelector(".modal__image-caption"),S=(document.querySelector(".modal__close-button_type_big-image"),document.querySelector(".modal_type_delete-card"),{formSelector:".modal__container",inputSelector:".modal__input",submitButtonSelector:".modal__submit-button",inactiveButtonClass:"modal__submit-button_disabled",inputErrorClass:"modal__input_error",errorMessageClass:"modal__error_visible"}),L=e=>"Escape"===e,I=()=>{b.value="",E.value=""};new e(S,o).enableValidation(),new e(S,u).enableValidation(),new e(S,y).enableValidation();const q=e=>console.log(e),U=new class{constructor(e){this._baseUrl=e.baseUrl,this._headers=e.headers}_response(e){return e.ok?e.json():Promise.reject(`Error: ${e.status} - ${e.statusText}`)}getCardList(){return fetch(`${this._baseUrl}/cards`,{headers:this._headers}).then(this._response)}getUserInfo(){return fetch(`${this._baseUrl}/users/me`,{headers:this._headers}).then(this._response)}setUserInfo(e,t){return fetch(`${this._baseUrl}/users/me`,{headers:this._headers,method:"PATCH",body:JSON.stringify({name:e,about:t})}).then(this._response)}addCard(e){return fetch(`${this._baseUrl}/cards`,{headers:this._headers,method:"POST",body:JSON.stringify(e)}).then(this._response)}removeCard(e){return fetch(`${this._baseUrl}/cards/${e}`,{headers:this._headers,method:"DELETE"}).then(this._response)}likeCard(e,t){return fetch(`${this._baseUrl}/cards/likes/${e}`,{headers:this._headers,method:"PUT",body:JSON.stringify(t)}).then(this._response)}unlikeCard(e){return fetch(`${this._baseUrl}/cards/likes/${e}`,{headers:this._headers,method:"DELETE"}).then(this._response)}setUserAvatar(e){return fetch(`${this._baseUrl}/users/me/avatar`,{headers:this._headers,method:"PATCH",body:JSON.stringify({avatar:e})}).then(this._response)}}({baseUrl:"https://around.nomoreparties.co/v1/group-12",headers:{authorization:"709a0d9d-db06-4890-a594-b07e7309a353","Content-Type":"application/json"}}),w=new class{constructor(e,t,s){this._nameElement=e,this._titleElement=t,this._pictureElement=s}getUserInfo(){return{name:this._name.textContent,job:this._job.textContent}}getUserData(){return this._data}setUserInfo(e,t){this._name=e,this._job=t,this._nameElement.textContent=this._name,this._titleElement.textContent=this._job}}(a,d);U.getUserInfo().then((e=>(w.setUserInfo(e.name,e.about),c.src=e.avatar,w))).then((e=>{U.getCardList().then((s=>{const i=(e,t)=>{T.open(e,t)},o=e.getUserInfo(),a=e=>{B.setInputValues(e),B.open()},l=t=>{t.isLiked()?U.unlikeCard(t.getCardId()).then((e=>{t.updateCard(e,o)})).catch(q):U.likeCard(t.getCardId(),e.getUserInfo()).then((e=>{t.updateCard(e,o)})).catch(q)},d=e=>new t(e,i,a,l,k),_=new n({items:s,renderer:t=>{const s=d(t);_.addItem(s.generateCard(e.id))}},".cards__grid");_.renderItems();const c=new r(".modal_type_add-card",L,(e=>{U.addCard(e).then((e=>{const t=d(e);_.addItem(t.generateCard(user.id)),I(),c.close(I)})).catch(q)}));c.setEventListeners(),p.addEventListener("click",(()=>{c.open()}))})).catch(q)})).catch(q);const x=new r(".modal_type_edit",L,(({name:e,job:t})=>{U.setUserInfo({name:e,job:t}).then((e=>{w.setUserInfo(e.avatar),x.close()})).catch(q)}));x.setEventListeners(),i.addEventListener("click",(()=>{l.value=a.textContent,_.value=d.textContent,x.open()}));const $=new r(".modal_type_avatar",L,(({avatarLink:e})=>{U.setUserAvatar({avatar:e}).then((e=>{w.setUserInfo(e),$.close()})).catch(q)}));$.setEventListeners(),h.addEventListener("click",(()=>{m.value="",$.open()}));const B=new r(".modal_type_delete-card",L,(e=>{U.deleteCard(e.getCardId()).then((()=>{e.deleteCard(),B.close()})).catch(q)}));B.setEventListeners();const T=new class extends s{constructor(e,t){super(e,t),this._modalImage=document.querySelector(".modal__big-image"),this._modalTitle=document.querySelector(".modal__image-caption")}open(e,t){this._modalTitle.textContent=e,this._modalImage.setAttribute("src",t),super.open()}}(".modal_type_big-image",L,g,f);T.setEventListeners()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,