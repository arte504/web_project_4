!function(){"use strict";class e{constructor(e,t){this._formConfig=e,this._formElement=t}_showInputError=(e,t)=>{const{inputErrorClass:r,errorMessageClass:s}=this._formConfig,n=this._formElement.querySelector(` #${e.id}_error `);n.textContent=t,n.classList.add(s),e.classList.add(r)};_hideInputError=e=>{const{inputErrorClass:t,errorMessageClass:r}=this._formConfig,s=this._formElement.querySelector(` #${e.id}_error `);s.textContent="",s.classList.remove(r),e.classList.remove(t)};resetValidation(){this.inputs.forEach((e=>{this._hideInputError(e)})),this._toggleSubmitButton()}_checkInput=e=>{e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)};_checkIfFormValid=()=>this.inputs.every((e=>e.validity.valid));_toggleSubmitButton(){const{inactiveButtonClass:e,submitButtonSelector:t}=this._formConfig,r=this._formElement.querySelector(t);this._checkIfFormValid()?(r.disabled=!1,r.classList.remove(e)):(r.disabled=!0,r.classList.add(e))}_setEventListeners=()=>{const{inputSelector:e}=this._formConfig;return this.inputs=Array.from(this._formElement.querySelectorAll(e)),this.inputs.forEach((e=>{e.addEventListener("input",(()=>{this._checkInput(e),this._toggleSubmitButton()}))})),this._formElement};enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}}class t{constructor({data:e,onCardClick:t,removeHandler:r,likeHandler:s},n,o){this._name=e.name,this._link=e.link,this._likes=e.likes,this._ownerId=e.owner._id,this._id=e._id,this._template=n,this._userId=o,this._onCardClick=t,this._likeHandler=s,this._removeHandler=r}_getTemplate(){return this._template.content.querySelector(".card").cloneNode(!0)}_setAttributes(e,t){for(const r in t)e.setAttribute(r,t[r])}deleteCard(){const e=document.getElementById(id);e&&e.parentNode.removeChild(e),this._cardElement=null}_renderLikes(){this._likes.forEach((e=>e._id===this._userId?this._likeCard():this._unlikeCard()))}showLikes(e){this._cardElement.querySelector(".card__like-count").textContent=e}_setEventListeners(){this._cardElement.querySelector(".card__like-button").addEventListener("click",(e=>{this._likeCard(e)})),this._cardElement.querySelector(".card__delete-button").addEventListener("click",(()=>{this._removeHandler(this._id)})),this._cardElement.addEventListener("click",(e=>{this._onCardClick(e)}))}_showDeleteIcon(){this._userId!=this._ownerId&&this._cardElement.querySelector(".card__delete-button").classList.add("card__delete-button_hidden")}isLiked(){return this.likeIcon.classList.contains("card__like-button_active")}generateCard(){return this._cardElement=this._getTemplate(),this.likeIcon=this._cardElement.querySelector(".card__like-button"),this._setAttributes(this._cardElement.querySelector(".card__image"),{src:this._link,alt:this._name}),this._cardElement.querySelector(".card__title").textContent=this._name,this._showDeleteIcon(),this.showLikes(this._likes.length),this._setEventListeners(),this._renderLikes(),this._cardElement}_likeCard(){this.likeIcon.classList.add("card__like-button_active")}_unlikeCard(){this.likeIcon.classList.remove("card__like-button_active")}}class r{constructor(e){this._modal=e}open(){this._modal.classList.add("modal_visible"),document.addEventListener("keyup",this._clickEscHandler),console.log(this._modal)}close(){this._modal.classList.remove("modal_visible"),document.removeEventListener("keyup",this._clickEscHandler)}_clickEscHandler=e=>{"Escape"===e.key&&this.close()};setEventListeners(){this._modal.querySelector(".modal__close-button").addEventListener("click",(e=>{this.close(e)})),this._modal.addEventListener("click",(e=>{e.target.classList.contains("modal_visible")&&this.close(e)}))}}class s extends r{constructor({modal:e,handleSubmit:t}){super(e),this._handleSubmit=t,this._form=document.querySelector(".modal__container")}_getInputValues(){return this._inputList=Array.from(this._form.querySelectorAll(".modal__input")),this._formInputValues={},this._inputList.forEach((e=>{this._formInputValues[e.name]=e.value})),this._inputValues}setEventListeners(){super.setEventListeners(),this._form.addEventListener("submit",(e=>{e.preventDefault(),this._handleSubmit(this._getInputValues())}))}handleRemove(e){this._handleSubmit=e}close(){super.close(),this._form.removeEventListener("submit",this.handleSubmit),this._form.reset()}}class n{constructor({items:e,renderer:t},r){this._renderedElements=e,this._renderer=t,this._container=document.querySelector(r)}renderer(){this._renderedElements.forEach((e=>this._renderer(e)))}addItem(e){this._container.append(e)}prependItem(e){this._container.prepend(e)}}class o{constructor(e,t,r){this._name=e,this._job=t,this._avatar=r}getUserInfo(){return this._userInfo={name:this._name.textContent,job:this._job.textContent}}setUserInfo(e){const{name:t,job:r,userAvatar:s}=e;this._name.textContent=t,this._job.textContent=r,this._avatar.src=s}}const i=document.querySelector(".profile__edit-button"),a=document.querySelector(".modal_type_edit"),l=document.querySelector(".profile__title"),d=document.querySelector(".modal__input_type_title"),c=document.querySelector(".profile__subtitle"),_=document.querySelector(".modal__input_type_subtitle"),u=(document.querySelector(".modal__close-button_type_edit"),document.querySelector(".profile__image")),h=document.querySelector(".profile__image-edit"),m=document.querySelector(".modal_type_avatar"),p=(m.querySelector(".modal__input_type_avatar"),document.querySelector(".modal__close-button_type_avatar"),document.querySelector(".profile__add-button")),b=document.querySelector(".modal_type_add-card"),E=(document.querySelector(".modal__input_type_name"),document.querySelector(".modal__input_type_link"),document.querySelector(".modal__close-button_type_add-card"),document.forms.add),f=(E.elements.title,E.elements.link,document.querySelector(".modal__submit-button"),document.querySelector(".cards__grid"),document.querySelector("#card__template"),document.querySelector(".modal_type_big-image")),k=(document.querySelector(".modal__big-image"),document.querySelector(".modal__image-caption"),document.querySelector(".modal__close-button_type_big-image"),document.querySelector(".modal_type_delete-card")),v={formSelector:".modal__container",inputSelector:".modal__input",submitButtonSelector:".modal__submit-button",inactiveButtonClass:"modal__submit-button_disabled",inputErrorClass:"modal__input_error",errorMessageClass:"modal__error_visible"},y=new class extends r{openup=e=>{const t=e.target;this._modalElement.querySelector(".modal__big-image").src=t.src,this._modalElement.querySelector(".modal__big-image").alt=t.alt,this._modalElement.querySelector(".modal__image-caption").textContent=t.alt,this.open()}}(f);y.setEventListeners();const g=new s({modal:k});function S(e,t){t.querySelector(".modal__submit-button").textContent=e?"Saving...":"Save"}g.setEventListeners();const C=new class{constructor({baseUrl:e,headers:t}){this._baseUrl=e,this._headers=t}getCardList(){return fetch(this._baseUrl+"/cards",{headers:this._headers}).then((function(e){if(e.ok)return e.json().then((e=>e));Promise.reject("Error!"+e.statusText)}))}getUserInfo(){return fetch(this._baseUrl+"/users/me",{headers:this._headers}).then((e=>e.ok?e.json():Promise.reject("Error!"+e.statusText)))}getAppInfo(){return Promise.all([this.getCardList(),this.getUserInfo()])}addCard({name:e,link:t}){return fetch(this._baseUrl+"/cards",{headers:this._headers,method:"POST",body:JSON.stringify({name:e,link:t})}).then((e=>{if(e.ok)return e.json();Promise.reject("Error!"+e.statusText)}))}removeCard(e){return fetch(this._baseUrl+"/cards/"+e,{headers:this._headers,method:"DELETE"}).then((e=>e.ok?e.json():Promise.reject("Error!"+e.statusText)))}likeCard(e){return fetch(this._baseUrl+"/cards/likes/"+e,{headers:this._headers,method:"PUT"}).then((e=>{if(e.ok)return e.json();Promise.reject("Error!"+e.statusText)}))}unlikeCard(e){return fetch(this._baseUrl+"/cards/likes/"+e,{headers:this._headers,method:"DELETE"}).then((e=>e.ok?e.json():Promise.reject("Error!"+e.statusText)))}setUserInfo({name:e,job:t}){return fetch(this._baseUrl+"/users/me",{headers:this._headers,method:"PATCH",body:JSON.stringify({name:e,job:t})}).then((e=>e.ok?e.json():Promise.reject("Error!"+e.statusText+e.status)))}setUserAvatar({avatar:e}){return fetch(this._baseUrl+"/users/me/avatar",{headers:this._headers,method:"PATCH",body:JSON.stringify({avatar:e})}).then((e=>e.ok?e.json():Promise.reject("Error!"+e.statusText)))}updateUserInfo({name:e,job:t}){return fetch(this._baseUrl+"/users/me",{headers:this._headers,method:"PATCH",body:JSON.stringify({name:e,about:t})}).then((e=>e.ok?e.json():Promise.reject("Error!"+e.statusText)))}}({baseUrl:"https://around.nomoreparties.co/v1/group-12",headers:{authorization:"709a0d9d-db06-4890-a594-b07e7309a353","Content-Type":"application/json"}});C.getAppInfo().then((([e,r])=>{const h=new n({items:e,renderer:e=>{h.addItem(E(e).generateCard())}},".cards__grid");C.getUserInfo().then((e=>{f.setUserInfo(e.name,e.job,e.userAvatar)})),e.renderer();const m=new s({modal:b,handleSubmit:e=>{S(!0,b),C.addCard(e).then((e=>{h.prependItem(E(e).generateCard())})).then((()=>{m.close()})).catch((e=>console.log(e))).finally((()=>S(!1,b)))}});function E(s){const n=new t({data:s},{onCardClick:({name:e,link:t})=>{y.open(t,e)},removeHandler:e=>{g.open(),g.handleRemove((()=>{C.removeCard(e).then((()=>{n.deleteCardModal(),g.close()})).catch((e=>console.log(e)))}))},likeHandler:e=>{n.isLiked()?C.unlikeCard(e).then((e=>{n.unlikeCard(),n.showLikes(e.likes.lenght)})):C.likeCard(e).then((e=>{n.unlikeCard(),n.showLikes(e.likes.lenght)})).catch((e=>console.log(e)))}},r._id,".card__template"),o=n.generateCard();e.addItem(o),S(!1,m)}p.addEventListener("click",(()=>{I.resetValidation(),m.open()})),m.setEventListeners(),console.log(e);const f=new o(l,c,u),k=new s({modal:a,handleSubmit:e=>{S(!0,a),C.updateUserInfo({name:e.name,job:e.job}).then((e=>{S(!1,a),f.setUserInfo(e.name,e.job)})).then((()=>{k.close(),console.log(res)})).catch((e=>console.log(e))).finally((()=>S(!1,a)))}});k.setEventListeners(),i.addEventListener("click",(()=>{q.resetValidation();const{name:e,job:t}=f.getUserInfo();d.value=e,_.value=t,k.open()}))})).catch((e=>console.log(e)));const L=new s({modal:m,modalSubmition:e=>{!function(e){S(!0,m),C.setUserAvatar({avatar:e.avatarLink}).then((e=>{u.src=e.avatar,S(!1,m),L.close()})).catch((e=>console.log(e)))}(e)}});h.addEventListener("click",(()=>{L.open()})),L.setEventListeners();const q=new e(v,a);q.enableValidation(),new e(v,m).enableValidation();const I=new e(v,b);I.enableValidation()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,