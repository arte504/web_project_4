!function(){"use strict";class e{constructor(e,t){this._formConfig=e,this._formElement=t,this.inputs=Array.from(this._formElement.querySelectorAll(this._formConfig.inputSelector))}_showInputError=(e,t)=>{const{inputErrorClass:s,errorMessageClass:r}=this._formConfig,n=this._formElement.querySelector(` #${e.id}_error `);n.textContent=t,n.classList.add(r),e.classList.add(s)};_hideInputError=e=>{const{inputErrorClass:t,errorMessageClass:s}=this._formConfig,r=this._formElement.querySelector(` #${e.id}_error `);r.textContent="",r.classList.remove(s),e.classList.remove(t)};resetValidation(){this.inputs.forEach((e=>{this._hideInputError(e)})),this._toggleSubmitButton()}_checkInput=e=>{e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)};_checkIfFormValid=()=>this.inputs.every((e=>e.validity.valid));_toggleSubmitButton(){const{inactiveButtonClass:e,submitButtonSelector:t}=this._formConfig,s=this._formElement.querySelector(t);this._checkIfFormValid()?(s.disabled=!1,s.classList.remove(e)):(s.disabled=!0,s.classList.add(e))}_setEventListeners=()=>(this.inputs.forEach((e=>{e.addEventListener("input",(()=>{this._checkInput(e),this._toggleSubmitButton()}))})),this._formElement);enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}}class t{constructor({data:e,onCardClick:t,removeHandler:s,likeHandler:r},n,i){this._name=e.name,this._link=e.link,this._likes=e.likes,this._ownerId=e.owner._id,this._id=e._id,this._template=n,this._userId=i,this._onCardClick=t,this._likeHandler=r,this._removeHandler=s}_getTemplate(){return this._template.content.querySelector(".card").cloneNode(!0)}_setAttributes(e,t){for(const s in t)e.setAttribute(s,t[s])}deleteCard(){const e=document.getElementById(id);e&&e.parentNode.removeChild(e),this._cardElement=null}_renderLikes(){this._likes.forEach((e=>e._id===this._userId?this._likeCard():this._unlikeCard()))}showLikes(e){this._cardElement.querySelector(".card__like-count").textContent=e}isLiked(){return this._liked}_checkForLike(e){return this._likes.find((t=>t._id===e))?this._liked=!0:this._liked=!1,this._liked}_setEventListeners(){this._cardElement.querySelector(".card__like-button").addEventListener("click",(e=>{this._likeCard(e)})),this._cardElement.querySelector(".card__delete-button").addEventListener("click",(()=>{this._removeHandler(this._id)})),this._cardElement.addEventListener("click",(e=>{this._onCardClick(e)}))}_showDeleteIcon(){this._userId!=this._ownerId&&this._cardElement.querySelector(".card__delete-button").classList.add("card__delete-button_hidden")}getCardId(){return this._id}generateCard(){return this._cardElement=this._getTemplate(),this.likeIcon=this._cardElement.querySelector(".card__like-button"),this._setAttributes(this._cardElement.querySelector(".card__image"),{src:this._link,alt:this._name}),this._cardElement.querySelector(".card__title").textContent=this._name,this._showDeleteIcon(),this.showLikes(this._likes.length),this._setEventListeners(),this._renderLikes(),this._cardElement}_likeCard(){this.likeIcon.classList.add("card__like-button_active")}_unlikeCard(){this.likeIcon.classList.remove("card__like-button_active")}updateCard(){this._likes=data.likes,this._checkForLike(user.id)?this._likeCard:this._unlikeCard,this._cardElement.querySelector(".card__like-count").textContent=this._likes.length}}class s{constructor(e,t){this._modalElement=document.querySelector(e),this._escapeKeyHandler=this._escapeKeyHandler.bind(this),this._checkKeyPress=t}open(){this._modalElement.classList.add("modal_visible"),document.addEventListener("keyup",this._escapeKeyHandler)}close(){this._modalElement.classList.remove("modal_visible"),document.removeEventListener("keyup",this._escapeKeyHandler)}_escapeKeyHandler(e){this._checkKeyPress(e.key)&&this.close()}setEventListeners(){this._modalElement.addEventListener("click",(e=>{e.target.classList.contains("modal__close-button")&&this.close(),e.target.classList.contains("modal_visible")&&this.close()}))}}class r extends s{constructor(e,t,s){super(e,t),this._handleSubmit=s,this._submitButton=this._modalElement.querySelector(".modal__submit-button"),this._form=document.querySelector(".modal__container"),this._textInButton=this._submitButton.textContent}getInputValues(){this._inputList=this._modalElement.querySelectorAll(".modal__input");const e={};return this._inputList.forEach((t=>{e[t.name]=t.value})),e||this._entredValue}setInputValues(e){this._entredValue=e}setEventListeners(){super.setEventListeners(),this._modalElement.addEventListener("submit",(e=>{e.preventDefault(),this._submitButton.textContent="Saving...",this._handleSubmit(this.getInputValues())}))}close(){this._submitButton.textContent=this._textInButton,this._form.reset(),super.close()}}class n{constructor({items:e,renderer:t},s){this._renderedElements=e,this._renderer=t,this._container=document.querySelector(s)}renderItems(){this._renderedElements.forEach((e=>{this._renderer(e)}))}addItem(e){this._container.prepend(e)}}const i=document.querySelector(".profile__edit-button"),a=document.querySelector(".modal_type_edit"),o=(document.querySelector(".profile__title"),document.querySelector(".modal__input_type_title"),document.querySelector(".profile__subtitle"),document.querySelector(".modal__input_type_subtitle"),document.querySelector(".modal__close-button_type_edit"),document.querySelector(".profile__image"),document.querySelector(".profile__image-edit")),d=document.querySelector(".modal_type_avatar"),l=d.querySelector(".modal__input_type_avatar"),_=(document.querySelector(".modal__close-button_type_avatar"),document.querySelector(".profile__add-button")),c=document.querySelector(".modal_type_add-card"),h=document.querySelector(".modal__input_type_name"),u=document.querySelector(".modal__input_type_link"),m=(document.querySelector(".modal__close-button_type_add-card"),document.forms.add),p=(m.elements.title,m.elements.link,document.querySelector(".modal__submit-button"),document.querySelector(".cards__grid"),document.querySelector("#card__template")),y=document.querySelector(".modal_type_big-image"),b=y.querySelector(".modal__image"),k=y.querySelector(".modal__image-caption"),E=(document.querySelector(".modal__close-button_type_big-image"),document.querySelector(".modal_type_delete-card"),{formSelector:".modal__container",inputSelector:".modal__input",submitButtonSelector:".modal__submit-button",inactiveButtonClass:"modal__submit-button_disabled",inputErrorClass:"modal__input_error",errorMessageClass:"modal__error_visible"}),v=e=>"Escape"===e,f=()=>{h.value="",u.value=""},C=new e(E,a);C.enableValidation();const g=new e(E,d);g.enableValidation();const S=new e(E,c);S.enableValidation();const I=e=>console.log(e),L=new class{constructor(e){this._baseUrl=e.baseUrl,this._headers=e.headers}_response(e){return e.ok?e.json():Promise.reject(`Error: ${e.status} - ${e.statusText}`)}getCardList(){return fetch(`${this._baseUrl}/cards`,{headers:this._headers}).then(this._response)}getUserInfo(){return fetch(`${this._baseUrl}/users/me`,{headers:this._headers}).then(this._response)}updateUserInfo(e){return fetch(`${this._baseURL}/users/me`,{headers:this._headers,method:"PATCH",body:JSON.stringify(e)}).then(this._response)}addCard(e){return fetch(`${this._baseUrl}/cards`,{headers:this._headers,method:"POST",body:JSON.stringify(e)}).then(this._response)}removeCard(e){return fetch(`${this._baseUrl}/cards/${e}`,{headers:this._headers,method:"DELETE"}).then(this._response)}likeCard(e,t){return fetch(`${this._baseUrl}/cards/likes/${e}`,{headers:this._headers,method:"PUT",body:JSON.stringify(t)}).then(this._response)}unlikeCard(e){return fetch(`${this._baseUrl}/cards/likes/${e}`,{headers:this._headers,method:"DELETE"}).then(this._response)}updateUserAvatar(e){return fetch(`${this._baseUrl}/users/me/avatar`,{headers:this._headers,method:"PATCH",body:JSON.stringify(e)}).then(this._response)}}({baseUrl:"https://around.nomoreparties.co/v1/group-12",headers:{authorization:"709a0d9d-db06-4890-a594-b07e7309a353","Content-Type":"application/json"}}),q=new class{constructor({name:e,job:t,avatar:s}){this._name=document.querySelector(e),this._job=document.querySelector(t),this._avatar=document.querySelector(s),this.setUserInfo=this.setUserInfo.bind(this)}getUserInfo(){return this._userInfo={name:this._name.textContent,job:this._job.textContent}}setUserInfo(e){this._name.textContent=e.name,this._job.textContent=e.job}setUserAvatar(e){this._avatar.style.backgroundImage=`url('${e}')`}}({name:".profile__title",job:".profile__subtitle",avatar:".profile__image"});L.getUserInfo().then((e=>(q.setUserInfo(e),q))).then((e=>{L.getCardList().then((s=>{const i=e.getUserInfo(),a=e=>{x.setInputValues(e),x.open()},o=t=>{t.isLiked()?L.unlikeCard(t.getCardId()).then((e=>{t.updateCard(e,i)})).catch(I):L.likeCard(t.getCardId(),e.getUserInfo()).then((e=>{t.updateCard(e,i)})).catch(I)},d=(e,t)=>{y.open({url:e,text:t})},l=e=>new t({data:e,onCardClick:d,deleteCardHandler:a,likeButtonClickHandler:o},p),c=new n({items:s,renderer:t=>{const s=l(t);c.addItem(s.generateCard(e.id))}},".cards__grid");c.renderItems();const h=new r(".modal_type_add-card",v,(({cardInputTitle:e,cardInputLink:t})=>{L.addCard({name:e,link:t}).then((e=>{const t=l(e);c.addItem(t.generateCard(user.id)),f(),h.close(f)})).catch(I)}));h.setEventListeners(),x.setEventListeners(),_.addEventListener("click",(()=>{S.resetValidation(),h.open()}))})).catch(I)})).catch(I);const U=new r(".modal_type_edit",v,(({nameInput:e,jobInput:t})=>{L.updateUserInfo({name:e,job:t}).then((e=>{q.setUserInfo(e.avatar),U.close()})).catch(I)}));U.setEventListeners(),i.addEventListener("click",(()=>{f(),C.resetValidation(),U.open()}));const w=new r(".modal_type_avatar",v,(({avatarModalInput:e})=>{L.updateUserAvatar({avatar:e}).then((e=>{q.setUserInfo(e),w.close()})).catch(I)}));w.setEventListeners(),o.addEventListener("click",(()=>{l.value="",g.resetValidation(),w.open()}));const x=new r(".modal_type_delete-card",v,(e=>{L.deleteCard(e.getCardId()).then((()=>{e.deleteCard(),x.close()})).catch(I)}));new class extends s{constructor(e){super(e),this._modalImage=document.querySelector(".modal__image"),this._modalTitle=document.querySelector(".modal__image-caption")}open(e,t){super.open(e,t),this._modalTitle.textContent=t,this._modalImage.src=e,this._modalImage.alt=t}}(".modal_type_big-image",v,b,k).setEventListeners()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,