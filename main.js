!function(){"use strict";class e{constructor(e,t){this._formConfig=e,this._formElement=t}_showInputError=(e,t)=>{const{inputErrorClass:s,errorMessageClass:r}=this._formConfig,o=this._formElement.querySelector(` #${e.id}_error `);o.textContent=t,o.classList.add(r),e.classList.add(s)};_hideInputError=e=>{const{inputErrorClass:t,errorMessageClass:s}=this._formConfig,r=this._formElement.querySelector(` #${e.id}_error `);r.textContent="",r.classList.remove(s),e.classList.remove(t)};resetValidation(){this.inputs.forEach((e=>{this._hideInputError(e)})),this._toggleSubmitButton()}_checkInput=e=>{e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)};_checkIfFormValid=()=>this.inputs.every((e=>e.validity.valid));_toggleSubmitButton(){const{inactiveButtonClass:e,submitButtonSelector:t}=this._formConfig,s=this._formElement.querySelector(t);this._checkIfFormValid()?(s.disabled=!1,s.classList.remove(e)):(s.disabled=!0,s.classList.add(e))}_setEventListeners=()=>{const{inputSelector:e}=this._formConfig;return this.inputs=Array.from(this._formElement.querySelectorAll(e)),this.inputs.forEach((e=>{e.addEventListener("input",(()=>{this._checkInput(e),this._toggleSubmitButton()}))})),this._formElement};enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}}class t{constructor({data:e,onCardClick:t,removeHandler:s,likeHandler:r},o,n){this._name=e.name,this._link=e.link,this._owner=e.owner,this._cardTemplateSelector=n,this._likes=e.likes,this._userId=o,this._onCardClick=t,this._likeHandler=r,this._id=e._id,this._removeHandler=s}id(){return this._id}deleteCard(){const e=document.getElementById(id);e&&e.parentNode.removeChild(e),this._cardElement=null}_renderLikes(){this._likes.some((e=>e._id===this._userId))&&this._cardElement.querySelector(".card__like-button").classList.add("card__like-button_active")}showLikes(e){this._cardElement.querySelector(".card__like-count").textContent=e}updateLikes(e){this._likes=e,this._renderLikes()}_setEventListeners(){this._cardElement.querySelector(".card__like-button").addEventListener("click",(e=>{this._likeCard(e)})),this._cardElement.querySelector(".card__delete-button").addEventListener("click",(()=>{this._removeHandler(this._id)})),this._cardImage.addEventListener("click",(e=>{this._onCardClick(e)}))}_showDeleteIcon(){this._owner._id!==this._userId&&this._cardElement.querySelector(".card__delete-button").classList.add("card__delete-button_hidden")}generateCard(){return this._cardTemplate=document.querySelector(this._cardTemplateSelector).content.querySelector(".card"),console.log(this._cardTemplate),this._cardElement=this._cardTemplate.cloneNode(!0),this._cardImage=this._item.querySelector(".card__image"),this._item.querySelector(".card__title").textContent=this._name,this._cardImage.src=this._link,this._cardImage.alt=`Image of  ${this._name} `,this._renderLikes(),this.showLikes(this._likes.length),this._showDeleteIcon(),this._cardElement.id=this._id,this._setEventListeners(),this._item}}class s{constructor(e){this._modalSelector=e,this._checkForEscClose=this._checkForEscClose.bind(this)}_checkForEscClose=e=>{"Escape"===e.key&&this.close()};open=()=>{this._modalSelector.classList.add("modal_visible"),document.addEventListener("keyup",this._checkForEscClose)};close=()=>{this._modalSelector.classList.remove("modal_visible"),document.removeEventListener("keyup",this._checkForEscClose)};setEventListeners(){this._modalSelector.addEventListener("click",(e=>{(e.target.classList.contains("modal")||e.target.classList.contains("modal__close-button")||e.target.classList.contains("modal_visible"))&&this.close()}))}}class r extends s{constructor({modalSelector:e,handleSubmit:t}){super(e),this._handleSubmitBtn=t,this._formElement=this._modalSelector.querySelector(".modal__container")}getInputValues(){const e=Array.from(this._formElement.querySelectorAll(".modal__input")),t={};return e.forEach((e=>{t[e.name]=e.value})),t}setInputValues(e){Array.from(this._formElement.querySelectorAll(".modal__input")).forEach((t=>{t.value=e[t.name]}))}setEventListeners(){super.setEventListeners(),this._formElement.addEventListener("submit",(e=>{e.preventDefault(),this._handleSubmitBtn(this.getInputValues())}))}setSubmitHandler(e){this._handleSubmitBtn=e}close(){super.close(),this._formElement.reset()}}class o{constructor({items:e,renderer:t},s){this._items=e,this._renderer=t,this._container=document.querySelector(s)}addItem(e){this._container.prepend(e)}clear(){this._container.innerHTML=""}renderItems(){this.clear(),this._items.forEach((e=>{this._renderer(e)}))}}class n{constructor(e,t,s){this._name=e,this._job=t,this._avatar=s}getUserInfo(){return this._userInfo={title:this._title.textContent,job:this._job.textContent}}setUserInfo(e,t,s){this._userInfo={title:e,job:t,userAvatar:s},s?(avatarImage.src=this._userInfo.userAvatar,profileName.textContent=this._userInfo.title,profileJob.textContent=this._userInfo.job):(profileName.textContent=this._userInfo.title,profileJob.textContent=this._userInfo.job)}}const i=document.querySelector(".profile__edit-button"),a=document.forms.profile,l=document.querySelector(".profile__title"),c=(a.elements.name,document.querySelector(".profile__subtitle")),d=(a.elements.job,document.querySelector(".modal__close-button_type_edit"),document.querySelector(".profile__image")),_=document.querySelector(".profile__image-edit"),m=document.querySelector(".modal_type_avatar"),h=(m.querySelector(".modal__input_type_avatar"),document.querySelector(".modal__close-button_type_avatar"),document.querySelector(".profile__add-button")),u=document.querySelector(".modal_type_add-card"),b=(document.querySelector(".modal__input_type_name"),document.querySelector(".modal__input_type_link"),document.querySelector(".modal__close-button_type_add-card"),document.forms.add),f=(b.elements.title,b.elements.link,document.querySelector(".modal__submit-button"),document.querySelector(".cards__grid"),document.querySelector(".modal_type_big-image")),p=(document.querySelector(".modal__big-image"),document.querySelector(".modal__image-caption"),document.querySelector(".modal__close-button_type_big-image"),document.querySelector(".modal_type_delete-card")),E={formSelector:".modal__container",inputSelector:".modal__input",submitButtonSelector:".modal__submit-button",inactiveButtonClass:"modal__submit-button_disabled",inputErrorClass:"modal__input_error",errorMessageClass:"modal__error_visible"},g=new class extends s{openup=e=>{const t=e.target;this._modalElement.querySelector(".modal__big-image").src=t.src,this._modalElement.querySelector(".modal__big-image").alt=t.alt,this._modalElement.querySelector(".modal__image-caption").textContent=t.alt,this.open()}}(f);g.setEventListeners();const k=new r({modalSelector:p});function S(e,t){t.querySelector(".modal__submit-button").textContent=e?"Saving...":"Save"}k.setEventListeners();const v=new class{constructor({baseUrl:e,headers:t}){this._baseUrl=e,this._headers=t}getCardList(){return fetch(this._baseUrl+"/cards",{headers:this._headers}).then((function(e){if(e.ok)return e.json().then((e=>e));Promise.reject("Error!"+e.statusText)}))}getUserInfo(){return fetch(this._baseUrl+"/users/me",{headers:this._headers}).then((e=>e.ok?e.json():Promise.reject("Error!"+e.statusText)))}getAppInfo(){return Promise.all([this.getUserInfo(),this.getCardList()])}addCard({name:e,link:t}){return fetch(this._baseUrl+"/cards",{headers:this._headers,method:"POST",body:JSON.stringify({name:e,link:t})}).then((e=>{if(e.ok)return e.json();Promise.reject("Error!"+e.statusText)}))}removeCard(e){return fetch(this._baseUrl+"/cards/"+e,{headers:this._headers,method:"DELETE"}).then((e=>e.ok?e.json():Promise.reject("Error!"+e.statusText)))}addLike(e){return fetch(this._baseUrl+"/cards/likes/"+e,{headers:this._headers,method:"PUT"}).then((e=>{if(e.ok)return e.json();Promise.reject("Error!"+e.statusText)}))}removeLike(e){return fetch(this._baseUrl+"/cards/likes/"+e,{headers:this._headers,method:"DELETE"}).then((e=>e.ok?e.json():Promise.reject("Error!"+e.statusText)))}setUserInfo({name:e,job:t}){return fetch(this._baseUrl+"/users/me",{headers:this._headers,method:"PATCH",body:JSON.stringify({name:e,job:t})}).then((e=>e.ok?e.json():Promise.reject("Error!"+e.statusText+e.status)))}setUserAvatar({avatar:e}){return fetch(this._baseUrl+"/users/me/avatar",{headers:this._headers,method:"PATCH",body:JSON.stringify({avatar:e})}).then((e=>e.ok?e.json():Promise.reject("Error!"+e.statusText)))}updateUserInfo({name:e,job:t}){return fetch(this._baseUrl+"/users/me",{headers:this._headers,method:"PATCH",body:JSON.stringify({name:e,job:t})}).then((e=>e.ok?e.json():Promise.reject("Error!"+e.statusText)))}}({baseUrl:"https://around.nomoreparties.co/v1/group-12",headers:{authorization:"709a0d9d-db06-4890-a594-b07e7309a353","Content-Type":"application/json"}});v.getAppInfo().then((([e,s])=>{const a=new o({items:s,renderer:m},".cards__grid");a.renderItems();const _=new r({modalSelector:u,modalSubmition:e=>{S(!0,addImageModal),v.addCard(e).then((e=>{console.log(e),m(e),_.close(),S(!1,addImageModal)})).catch((e=>console.log(e)))}});function m(s){const r=new t({data:s,handleCardClick:({name:e,link:t})=>{g.open(t,e)},handleDeleteClick:e=>{k.open(e),k.setSubmitHandler((()=>{v.removeCard(e).then((()=>{r.deleteCardModal(),k.close()})).catch((e=>console.log(e)))}))},likeHandler:e=>{o.querySelector(".card__like-button").classList.contains("card__like-button_active")?v.deleteLike(e).then((e=>{o.querySelector(".card__like-button").classList.remove("card__like-button_active"),r.showLikes(e.likes.length),r._likes=e.likes})).catch((e=>console.log(e))):(r._cardElement.classList.toggle("card__like-button_active"),v.addLike(e).then((e=>{o.querySelector(".card__like-button").classList.add("card__like-button_active"),r.showLikes(e.likes.length),r._likes=e.likes})).catch((e=>console.log(e))))}},e._id,".card__template"),o=r.generateCard();a.addItem(o),S(!0,addImageModal)}h.addEventListener("click",(()=>{_.open(),S(!1,addImageModal)})),_.setEventListeners();const b=new n(l,c,d);v.getUserInfo().then((e=>{b.setUserInfo(e.name,e.job,e.avatar)}));const f=new r({modalSelector:editProfileModal,modalSubmition:e=>{S(!0,editProfileModal),v.setUserInfos({name:e.title,about:e.desc}).then((e=>{S(!1,editProfileModal),b.setUserInfo(e.name,e.about),f.close(),console.log(e)})).catch((e=>console.log(e)))}});f.setEventListeners(),i.addEventListener("click",(()=>{f.open();const e=b.getUserInfo();inputName.value=e.title,inputJob.value=e.job}))})).catch((e=>console.log(e)));const y=new r({modalSelector:m,modalSubmition:e=>{!function(e){S(!0,m),v.setUserAvatar({avatar:e.avatarURL}).then((e=>{d.src=e.avatar,S(!1,m),y.close()})).catch((e=>console.log(e)))}(e)}});_.addEventListener("click",(()=>{y.open()})),y.setEventListeners(),new e(E,a).enableValidation(),new e(E,m).enableValidation(),new e(E,u).enableValidation()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,