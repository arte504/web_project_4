!function(){var e={389:function(){}},t={};function r(s){var n=t[s];if(void 0!==n)return n.exports;var o=t[s]={exports:{}};return e[s](o,o.exports,r),o.exports}r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,{a:t}),t},r.d=function(e,t){for(var s in t)r.o(t,s)&&!r.o(e,s)&&Object.defineProperty(e,s,{enumerable:!0,get:t[s]})},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},function(){"use strict";var e=r(389),t=r.n(e);class s{constructor({cardData:e,user:t,onCardClick:r,removeHandler:s,likeHandler:n},o){this._name=e.name,this._link=e.link,this._cardId=e._id,this._ownerId=e.owner._id,this._userID=t,this._likes=e.likes,this._cardSelector=o,this._onCardClick=r,this._likeHandler=n,this._removeHandler=s}_getTemplate(){return document.querySelector("#card__template").content.querySelector(".card").cloneNode(!0)}deleteCard(){this._item.remove(),this._item=null}_renderLikes(){this.isLiked()?this._item.querySelector(".card__like-button").classList.add("card__like-button_active"):this._item.querySelector(".card__like-button").classList.remove("card__like-button_active"),this._item.querySelector(".card__like-counter").textContent=this._likes.length}isLiked(){return this._likes.some((e=>e._id===this._userId))}updateLikes(e){this._likes=e,this._renderLikes()}_setEventListeners(){this._item.querySelector(".card__like-button").addEventListener("click",(e=>{this._likeCard(e)})),this._item.querySelector(".card__delete-button").addEventListener("click",(()=>{this._removeHandler(this._cardId)})),this._cardImage.addEventListener("click",(e=>{this._onCardClick(e)}))}generateCard(){return this._item=this._getTemplate(),this._ownerId!==this._userId&&this._element.querySelector(".card__delete-button").classList.add("card__delete-button_hidden"),this._cardImage=this._item.querySelector(".card__image"),this._item.querySelector(".card__title").textContent=this._name,this._cardImage.src=this._link,this._cardImage.alt=`Image of  ${this._name} `,this._renderLikes(),this._setEventListeners(),this._item}}class n{constructor(e,t){this._formConfig=e,this._formElement=t}_showInputError=(e,t)=>{const{inputErrorClass:r,errorMessageClass:s}=this._formConfig,n=this._formElement.querySelector(` #${e.id}_error `);n.textContent=t,n.classList.add(s),e.classList.add(r)};_hideInputError=e=>{const{inputErrorClass:t,errorMessageClass:r}=this._formConfig,s=this._formElement.querySelector(` #${e.id}_error `);s.textContent="",s.classList.remove(r),e.classList.remove(t)};resetValidation(){this.inputs.forEach((e=>{this._hideInputError(e)})),this._toggleSubmitButton()}_checkInput=e=>{e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)};_checkIfFormValid=()=>this.inputs.every((e=>e.validity.valid));_toggleSubmitButton(){const{inactiveButtonClass:e,submitButtonSelector:t}=this._formConfig,r=this._formElement.querySelector(t);this._checkIfFormValid()?(r.disabled=!1,r.classList.remove(e)):(r.disabled=!0,r.classList.add(e))}_setEventListeners=()=>{const{inputSelector:e}=this._formConfig;return this.inputs=Array.from(this._formElement.querySelectorAll(e)),this.inputs.forEach((e=>{e.addEventListener("input",(()=>{this._checkInput(e),this._toggleSubmitButton()}))})),this._formElement};enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}}const o=document.querySelector(".profile__edit-button"),i=document.forms.profile,a=(i.elements.name,i.elements.job,document.querySelector(".modal__close-button_type_edit"),document.querySelector(".profile__image-edit")),l=document.querySelector(".modal_type_avatar"),c=(document.querySelector(".modal__input_type_avatar"),document.querySelector(".modal__close-button_type_avatar"),document.querySelector(".profile__add-button")),d=document.querySelector(".modal_type_add-card"),_=(document.querySelector(".modal__input_type_name"),document.querySelector(".modal__input_type_link"),document.querySelector(".modal__close-button_type_add-card"),document.forms.add),u=(_.elements.title,_.elements.link,document.querySelector(".modal__submit-button"),document.querySelector(".cards__grid"),document.querySelector(".modal_type_big-image"),document.querySelector(".modal__big-image"),document.querySelector(".modal__image-caption"),document.querySelector(".modal__close-button_type_big-image"),{formSelector:".modal__container",inputSelector:".modal__input",submitButtonSelector:".modal__submit-button",inactiveButtonClass:"modal__submit-button_disabled",inputErrorClass:"modal__input_error",errorMessageClass:"modal__error_visible"});class m{constructor(e){this._modalElement=document.querySelector(e)}_checkForEscClose=e=>{"Escape"===e.key&&this.close()};open=()=>{this._modalElement.classList.add("modal_visible"),document.addEventListener("keyup",this._checkForEscClose)};close=()=>{this._modalElement.classList.remove("modal_visible"),document.removeEventListener("keyup",this._checkForEscClose)};setEventListeners(){this._modalElement.querySelector(".modal__close-button").addEventListener("click",(e=>{this.close(e)})),this._modalElement.addEventListener("click",(e=>{e.target.classList.contains("modal_visible")&&this.close(e)}))}}class h extends m{constructor(e,t){super(e),this._handleSubmitBtn=t,this._formElement=this._modalElement.querySelector(".modal__container")}getInputValues(){const e=Array.from(this._formElement.querySelectorAll(".modal__input")),t={};return e.forEach((e=>{t[e.name]=e.value})),t}setInputValues(e){Array.from(this._formElement.querySelectorAll(".modal__input")).forEach((t=>{t.value=e[t.name]}))}saving(e){this._formElement.querySelector(".modal__submit-button").textContent=e?"Saving...":"Save"}setEventListeners(){super.setEventListeners(),this._formElement.addEventListener("submit",(()=>{this._handleSubmitBtn(this.getInputValues()),this.close()}))}close(){super.close(),this._formElement.reset()}}class p extends m{constructor(e,t){super(e),this._form=document.querySelector(this._selector),this._handleSubmit=t,this._handleSubmitHandler=this._handleSubmitHandler.bind(this)}_handleSubmitHandler(e){e.preventDefault(),this._handleSubmit(),super.close()}_setEventListeners(){super._setEventListeners(),this._form.addEventListener("submit",this._handleSubmitHandler)}_removeEventListeners(){super._removeEventListeners(),this._form.removeEventListener("submit",this._handleSubmitHandler)}}const v=new(t())({baseUrl:"https://around.nomoreparties.co/v1/group-2",headers:{authorization:"709a0d9d-db06-4890-a594-b07e7309a353","Content-Type":"application/json"}}),b=new class extends m{openup=e=>{const t=e.target;this._modalElement.querySelector(".modal__big-image").src=t.src,this._modalElement.querySelector(".modal__big-image").alt=t.alt,this._modalElement.querySelector(".modal__image-caption").textContent=t.alt,this.open()}}(".modal_type_big-image");new h(".modal_type_delete-card").setEventListeners();const y=new class{constructor({items:e,renderer:t},r){this._items=e,this._renderer=t,this._container=document.querySelector(r)}addItem(e){this._container.prepend(e)}clear(){this._container.innerHTML=""}renderItems(){this.clear(),this._items.forEach((e=>{this._renderer(e)}))}}((e=>{y.addItem(function(e){const t=new s({data:e,user:C,cardSelector:".cards__grid",handleCardClick:e=>{e.preventDefault();const t=e.target,r=t.src,s=t.alt;b.open(r,s),b.setEventListeners()},handleDeleteCard:e=>{p.open(),p.setAction((()=>v.deleteCard(e).then((e=>{t.deleteCard(),p.close()})).catch((e=>console.log(e)))))},handleLikes:e=>{t.isLiked()?v.removeLike(e).then((e=>{t.updateLikes(e.likes)})).catch((e=>console.log(e))):v.addLike(e).then((e=>{t.updateLikes(e.likes)})).catch((e=>console.log(e)))}});return t.generateCard()}(e))}),".cards__grid"),f=new class{constructor({name:e,job:t,avatar:r}){this._name=document.querySelector(`${e}`),this._job=document.querySelector(`${t}`),this._avatar=document.querySelector(`${r}`),this.setUserInfo=this.setUserInfo.bind(this)}getUserInfo(){const e={};return e.userName=this._name.textContent,e.userJob=this._job.textContent,e}setUserInfo(e){this._name.textContent=e.name,this._job.textContent=e.job}setUserAvatar({avatar:e}){this._avatar.style.backgroundImage=`url('${e}')`}}({name:".profile__title",about:".profile__subtitle",avatar:".profile__image"});v.getUserInfo().then((e=>{f.setUserInfo(e),C=e._id,f.setUserAvatar(e.avatar)})).catch((e=>console.log(e))),v.getInitialCards().then((e=>{y.renderItems(e)})).catch((e=>console.log(e)));const E=new h(".modal_type_edit",(()=>{f.setUserInfo(E.getInputValues()),E.close()}));E.setEventListeners(),o.addEventListener("click",(()=>{E.setInputValues(f.getUserInfo()),k.resetValidation(),E.open()}));const g=new h(".modal_type_avatar",(()=>{const e=g.getInputValues();setUserAvatar(e),g.close()}));g.setEventListeners(),a.addEventListener("click",(()=>{L.resetValidation(),g.open()}));const S=new h(".modal_type_add-card",(()=>{const e=S.getInputValues();y.addItem(generateCard(e)),S.close()}));S.setEventListeners(),c.addEventListener("click",(()=>{q.resetValidation(),S.open()}));const k=new n(u,i);k.enableValidation();const L=new n(u,l);L.enableValidation();const q=new n(u,d);let C;q.enableValidation()}()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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V25GLFdBSWJtRixFQUFXaEYsb0JBRVhoQixFQUFpQjlDLGlCQUFpQixTQUFTLEtBQ3pDZ0osRUFBcUIzSCxrQkFDckJ5SCxFQUFXbEYsVUFLYixNQUFNUixFQUFjLElBQUlhLEVBQWMsd0JBQXdCLEtBQzVELE1BQU1nRixFQUFVN0YsRUFBWWlCLGlCQUM1QnlCLEVBQWFPLFFBQVFqRyxhQUFhNkksSUFDbEM3RixFQUFZTyxXQUlkUCxFQUFZVSxvQkFHWlosRUFBY2xELGlCQUFpQixTQUFTLEtBQ3RDa0osRUFBc0I3SCxrQkFDdEIrQixFQUFZUSxVQUtkLE1BQU1pRixFQUF3QixJQUFJckksRUFBY0MsRUFBWWtDLEdBQzVEa0csRUFBc0JyRyxtQkFHdEIsTUFBTXdHLEVBQXVCLElBQUl4SSxFQUFjQyxFQUFZd0MsR0FDM0QrRixFQUFxQnhHLG1CQUdyQixNQUFNMEcsRUFBd0IsSUFBSTFJLEVBQWNDLEVBQVkwQyxHQUk1RCxJQUFJMkQsRUFISm9DLEVBQXNCMUcsbUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWJfcHJvamVjdF80L3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL3dlYl9wcm9qZWN0XzQvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vd2ViX3Byb2plY3RfNC93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vd2ViX3Byb2plY3RfNC93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL3dlYl9wcm9qZWN0XzQvLi9zcmMvY29tcG9uZW50cy9zY3JpcHRzL0NhcmQuanMiLCJ3ZWJwYWNrOi8vd2ViX3Byb2plY3RfNC8uL3NyYy9jb21wb25lbnRzL3NjcmlwdHMvRm9ybVZhbGlkYXRvci5qcyIsIndlYnBhY2s6Ly93ZWJfcHJvamVjdF80Ly4vc3JjL2NvbXBvbmVudHMvdXRpbHMvY29uc3RhbnRzLmpzIiwid2VicGFjazovL3dlYl9wcm9qZWN0XzQvLi9zcmMvY29tcG9uZW50cy9zY3JpcHRzL01vZGFsLmpzIiwid2VicGFjazovL3dlYl9wcm9qZWN0XzQvLi9zcmMvY29tcG9uZW50cy9zY3JpcHRzL01vZGFsV2l0aEZvcm0uanMiLCJ3ZWJwYWNrOi8vd2ViX3Byb2plY3RfNC8uL3NyYy9jb21wb25lbnRzL3NjcmlwdHMvTW9kYWxEZWxldGVDb25maXJtYXRpb24uanMiLCJ3ZWJwYWNrOi8vd2ViX3Byb2plY3RfNC8uL3NyYy9wYWdlcy9JbmRleC5qcyIsIndlYnBhY2s6Ly93ZWJfcHJvamVjdF80Ly4vc3JjL2NvbXBvbmVudHMvc2NyaXB0cy9Nb2RhbFdpdGhJbWFnZS5qcyIsIndlYnBhY2s6Ly93ZWJfcHJvamVjdF80Ly4vc3JjL2NvbXBvbmVudHMvc2NyaXB0cy9TZWN0aW9uLmpzIiwid2VicGFjazovL3dlYl9wcm9qZWN0XzQvLi9zcmMvY29tcG9uZW50cy9zY3JpcHRzL1VzZXJJbmZvLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdGZ1bmN0aW9uKCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuXHRcdGZ1bmN0aW9uKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgZGVmaW5pdGlvbikge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmosIHByb3ApIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApOyB9IiwiZXhwb3J0IGNsYXNzIENhcmQge1xyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgeyBjYXJkRGF0YSwgdXNlciwgb25DYXJkQ2xpY2ssIHJlbW92ZUhhbmRsZXIsIGxpa2VIYW5kbGVyIH0sXHJcbiAgICBjYXJkU2VsZWN0b3JcclxuICApIHtcclxuICAgIHRoaXMuX25hbWUgPSBjYXJkRGF0YS5uYW1lO1xyXG4gICAgdGhpcy5fbGluayA9IGNhcmREYXRhLmxpbms7XHJcbiAgICB0aGlzLl9jYXJkSWQgPSBjYXJkRGF0YS5faWQ7XHJcbiAgICB0aGlzLl9vd25lcklkID0gY2FyZERhdGEub3duZXIuX2lkO1xyXG4gICAgdGhpcy5fdXNlcklEID0gdXNlcjtcclxuICAgIHRoaXMuX2xpa2VzID0gY2FyZERhdGEubGlrZXM7XHJcbiAgICB0aGlzLl9jYXJkU2VsZWN0b3IgPSBjYXJkU2VsZWN0b3I7XHJcblxyXG4gICAgdGhpcy5fb25DYXJkQ2xpY2sgPSBvbkNhcmRDbGljaztcclxuICAgIHRoaXMuX2xpa2VIYW5kbGVyID0gbGlrZUhhbmRsZXI7XHJcbiAgICB0aGlzLl9yZW1vdmVIYW5kbGVyID0gcmVtb3ZlSGFuZGxlcjtcclxuICB9XHJcbiAgLy8gLS0tIEdldHRpbmcgdGhlIHRlbXBsYXRlIC0tLSAvL1xyXG4gIF9nZXRUZW1wbGF0ZSgpIHtcclxuICAgIGNvbnN0IGNhcmQgPSBkb2N1bWVudFxyXG4gICAgICAucXVlcnlTZWxlY3RvcihcIiNjYXJkX190ZW1wbGF0ZVwiKVxyXG4gICAgICAuY29udGVudC5xdWVyeVNlbGVjdG9yKFwiLmNhcmRcIilcclxuICAgICAgLmNsb25lTm9kZSh0cnVlKTtcclxuICAgIHJldHVybiBjYXJkO1xyXG4gIH1cclxuXHJcbiAgLy8gLS0tIENhcmQgZGVsZXRpbmcgbWV0aG9kIC0tLSAvL1xyXG4gIGRlbGV0ZUNhcmQoKSB7XHJcbiAgICB0aGlzLl9pdGVtLnJlbW92ZSgpO1xyXG4gICAgdGhpcy5faXRlbSA9IG51bGw7XHJcbiAgfVxyXG5cclxuICBfcmVuZGVyTGlrZXMoKSB7XHJcbiAgICBpZiAodGhpcy5pc0xpa2VkKCkpIHtcclxuICAgICAgdGhpcy5faXRlbVxyXG4gICAgICAgIC5xdWVyeVNlbGVjdG9yKFwiLmNhcmRfX2xpa2UtYnV0dG9uXCIpXHJcbiAgICAgICAgLmNsYXNzTGlzdC5hZGQoXCJjYXJkX19saWtlLWJ1dHRvbl9hY3RpdmVcIik7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLl9pdGVtXHJcbiAgICAgICAgLnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZF9fbGlrZS1idXR0b25cIilcclxuICAgICAgICAuY2xhc3NMaXN0LnJlbW92ZShcImNhcmRfX2xpa2UtYnV0dG9uX2FjdGl2ZVwiKTtcclxuICAgIH1cclxuICAgIHRoaXMuX2l0ZW0ucXVlcnlTZWxlY3RvcihcIi5jYXJkX19saWtlLWNvdW50ZXJcIikudGV4dENvbnRlbnQgPVxyXG4gICAgICB0aGlzLl9saWtlcy5sZW5ndGg7XHJcbiAgfVxyXG5cclxuICAvLyAtLS0gQ2hlY2sgaWYgY2FyZCBsaWtlZCBieSBhbm90aGVyIHVzZXIgLS0tIC8vXHJcbiAgaXNMaWtlZCgpIHtcclxuICAgIHJldHVybiB0aGlzLl9saWtlcy5zb21lKCh1c2VyKSA9PiB1c2VyLl9pZCA9PT0gdGhpcy5fdXNlcklkKTtcclxuICB9XHJcblxyXG4gIC8vIC0tLSBUb2dnbGUgbGlrZSBidXR0b24gbWV0aG9kIC0tLSAvL1xyXG4gIHVwZGF0ZUxpa2VzKG5ld0xpa2VzKSB7XHJcbiAgICB0aGlzLl9saWtlcyA9IG5ld0xpa2VzO1xyXG4gICAgdGhpcy5fcmVuZGVyTGlrZXMoKTtcclxuICB9XHJcblxyXG4gIC8vIC0tLSBTZXQgZXZlbnRzIGxpc3RlbmVycyBmb3IgdGhlIGNhcmRzIHRoYXQgd2lsbCBiZSBjcmVhdGVkISAtLS0gLy9cclxuICBfc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XHJcbiAgICB0aGlzLl9pdGVtXHJcbiAgICAgIC5xdWVyeVNlbGVjdG9yKFwiLmNhcmRfX2xpa2UtYnV0dG9uXCIpXHJcbiAgICAgIC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgdGhpcy5fbGlrZUNhcmQoZXZlbnQpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICB0aGlzLl9pdGVtXHJcbiAgICAgIC5xdWVyeVNlbGVjdG9yKFwiLmNhcmRfX2RlbGV0ZS1idXR0b25cIilcclxuICAgICAgLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5fcmVtb3ZlSGFuZGxlcih0aGlzLl9jYXJkSWQpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICB0aGlzLl9jYXJkSW1hZ2UuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChldmVudCkgPT4ge1xyXG4gICAgICB0aGlzLl9vbkNhcmRDbGljayhldmVudCk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8vIC0tLSBDcmVhdGluZyB0aGUgY2FyZCBhbmQgY2FyZCBlbGVtZW50cyAtLS0gLy9cclxuICBnZW5lcmF0ZUNhcmQoKSB7XHJcbiAgICB0aGlzLl9pdGVtID0gdGhpcy5fZ2V0VGVtcGxhdGUoKTtcclxuXHJcbiAgICBpZiAodGhpcy5fb3duZXJJZCAhPT0gdGhpcy5fdXNlcklkKSB7XHJcbiAgICAgIHRoaXMuX2VsZW1lbnRcclxuICAgICAgICAucXVlcnlTZWxlY3RvcihcIi5jYXJkX19kZWxldGUtYnV0dG9uXCIpXHJcbiAgICAgICAgLmNsYXNzTGlzdC5hZGQoXCJjYXJkX19kZWxldGUtYnV0dG9uX2hpZGRlblwiKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLl9jYXJkSW1hZ2UgPSB0aGlzLl9pdGVtLnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZF9faW1hZ2VcIik7XHJcbiAgICB0aGlzLl9pdGVtLnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZF9fdGl0bGVcIikudGV4dENvbnRlbnQgPSB0aGlzLl9uYW1lO1xyXG4gICAgdGhpcy5fY2FyZEltYWdlLnNyYyA9IHRoaXMuX2xpbms7XHJcbiAgICB0aGlzLl9jYXJkSW1hZ2UuYWx0ID0gXCJJbWFnZSBvZiBcIiArIGAgJHt0aGlzLl9uYW1lfSBgO1xyXG4gICAgdGhpcy5fcmVuZGVyTGlrZXMoKTtcclxuXHJcbiAgICB0aGlzLl9zZXRFdmVudExpc3RlbmVycygpO1xyXG5cclxuICAgIHJldHVybiB0aGlzLl9pdGVtO1xyXG4gIH1cclxufVxyXG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBGb3JtVmFsaWRhdG9yIHtcclxuICBjb25zdHJ1Y3Rvcihmb3JtQ29uZmlnLCBmb3JtRWxlbWVudCkge1xyXG4gICAgdGhpcy5fZm9ybUNvbmZpZyA9IGZvcm1Db25maWc7XHJcbiAgICB0aGlzLl9mb3JtRWxlbWVudCA9IGZvcm1FbGVtZW50O1xyXG4gIH1cclxuXHJcbiAgX3Nob3dJbnB1dEVycm9yID0gKGlucHV0RWxlbWVudCwgZXJyb3JNZXNzYWdlKSA9PiB7XHJcbiAgICBjb25zdCB7IGlucHV0RXJyb3JDbGFzcywgZXJyb3JNZXNzYWdlQ2xhc3MgfSA9IHRoaXMuX2Zvcm1Db25maWc7XHJcbiAgICBjb25zdCBlcnJvckVsZW1lbnQgPSB0aGlzLl9mb3JtRWxlbWVudC5xdWVyeVNlbGVjdG9yKGAgIyR7aW5wdXRFbGVtZW50LmlkfV9lcnJvciBgKTtcclxuICAgIGVycm9yRWxlbWVudC50ZXh0Q29udGVudCA9IGVycm9yTWVzc2FnZTtcclxuICAgIGVycm9yRWxlbWVudC5jbGFzc0xpc3QuYWRkKGVycm9yTWVzc2FnZUNsYXNzKTtcclxuICAgIGlucHV0RWxlbWVudC5jbGFzc0xpc3QuYWRkKGlucHV0RXJyb3JDbGFzcyk7XHJcbiAgfTtcclxuICBcclxuICBfaGlkZUlucHV0RXJyb3IgPSAoaW5wdXRFbGVtZW50KSA9PiB7XHJcbiAgICBjb25zdCB7IGlucHV0RXJyb3JDbGFzcywgZXJyb3JNZXNzYWdlQ2xhc3MgfSA9IHRoaXMuX2Zvcm1Db25maWc7XHJcbiAgICBjb25zdCBlcnJvckVsZW1lbnQgPSB0aGlzLl9mb3JtRWxlbWVudC5xdWVyeVNlbGVjdG9yKGAgIyR7aW5wdXRFbGVtZW50LmlkfV9lcnJvciBgKTtcclxuICAgIGVycm9yRWxlbWVudC50ZXh0Q29udGVudCA9IFwiXCI7XHJcbiAgICBlcnJvckVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShlcnJvck1lc3NhZ2VDbGFzcyk7XHJcbiAgICBpbnB1dEVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShpbnB1dEVycm9yQ2xhc3MpO1xyXG4gIH07XHJcblxyXG4gIHJlc2V0VmFsaWRhdGlvbigpIHtcclxuICAgIHRoaXMuaW5wdXRzLmZvckVhY2goKGlucHV0KSA9PiB7XHJcbiAgICAgIHRoaXMuX2hpZGVJbnB1dEVycm9yKGlucHV0KTtcclxuICAgIH0pO1xyXG4gICAgdGhpcy5fdG9nZ2xlU3VibWl0QnV0dG9uKCk7XHJcbiAgfVxyXG5cclxuICBfY2hlY2tJbnB1dCA9IChpbnB1dEVsZW1lbnQpID0+IHtcclxuICAgIGlmICghaW5wdXRFbGVtZW50LnZhbGlkaXR5LnZhbGlkKSB7XHJcbiAgICAgIHRoaXMuX3Nob3dJbnB1dEVycm9yKGlucHV0RWxlbWVudCwgaW5wdXRFbGVtZW50LnZhbGlkYXRpb25NZXNzYWdlKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuX2hpZGVJbnB1dEVycm9yKGlucHV0RWxlbWVudCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBfY2hlY2tJZkZvcm1WYWxpZCA9ICgpID0+IHRoaXMuaW5wdXRzLmV2ZXJ5KChpbnB1dCkgPT4gaW5wdXQudmFsaWRpdHkudmFsaWQpO1xyXG5cclxuICBfdG9nZ2xlU3VibWl0QnV0dG9uKCkge1xyXG4gICAgY29uc3QgeyBpbmFjdGl2ZUJ1dHRvbkNsYXNzLCBzdWJtaXRCdXR0b25TZWxlY3RvciB9ID0gdGhpcy5fZm9ybUNvbmZpZztcclxuICAgIGNvbnN0IGJ1dHRvbkVsZW1lbnQgPSB0aGlzLl9mb3JtRWxlbWVudC5xdWVyeVNlbGVjdG9yKHN1Ym1pdEJ1dHRvblNlbGVjdG9yKTtcclxuXHJcbiAgICBpZiAodGhpcy5fY2hlY2tJZkZvcm1WYWxpZCgpKSB7XHJcbiAgICAgIGJ1dHRvbkVsZW1lbnQuZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgICAgYnV0dG9uRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKGluYWN0aXZlQnV0dG9uQ2xhc3MpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgYnV0dG9uRWxlbWVudC5kaXNhYmxlZCA9IHRydWU7XHJcbiAgICAgIGJ1dHRvbkVsZW1lbnQuY2xhc3NMaXN0LmFkZChpbmFjdGl2ZUJ1dHRvbkNsYXNzKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIF9zZXRFdmVudExpc3RlbmVycyA9ICgpID0+IHtcclxuICAgIGNvbnN0IHsgaW5wdXRTZWxlY3RvciB9ID0gdGhpcy5fZm9ybUNvbmZpZztcclxuICAgIHRoaXMuaW5wdXRzID0gQXJyYXkuZnJvbSh0aGlzLl9mb3JtRWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKGlucHV0U2VsZWN0b3IpKTtcclxuXHJcbiAgICB0aGlzLmlucHV0cy5mb3JFYWNoKChpbnB1dCkgPT4ge1xyXG4gICAgICBpbnB1dC5hZGRFdmVudExpc3RlbmVyKFwiaW5wdXRcIiwgKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuX2NoZWNrSW5wdXQoaW5wdXQpO1xyXG4gICAgICAgIHRoaXMuX3RvZ2dsZVN1Ym1pdEJ1dHRvbigpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIHRoaXMuX2Zvcm1FbGVtZW50O1xyXG4gIH07XHJcblxyXG4gIGVuYWJsZVZhbGlkYXRpb24oKSB7XHJcbiAgICB0aGlzLl9mb3JtRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwic3VibWl0XCIsIChldmVudCkgPT4ge1xyXG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgfSk7XHJcbiAgICB0aGlzLl9zZXRFdmVudExpc3RlbmVycygpO1xyXG4gIH1cclxufSIsIi8vIC0tLSAnRWRpdCBwcm9maWxlJyBtb2RhbCBjb25zdHMgLS0tIC8vXHJcbmV4cG9ydCBjb25zdCBlZGl0QnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByb2ZpbGVfX2VkaXQtYnV0dG9uJyk7XHJcbmV4cG9ydCBjb25zdCBwcm9maWxlTW9kYWwgPSBkb2N1bWVudC5mb3Jtcy5wcm9maWxlO1xyXG5leHBvcnQgY29uc3QgbmFtZUlucHV0ID0gcHJvZmlsZU1vZGFsLmVsZW1lbnRzLm5hbWU7XHJcbmV4cG9ydCBjb25zdCBqb2JJbnB1dCA9IHByb2ZpbGVNb2RhbC5lbGVtZW50cy5qb2I7XHJcbmV4cG9ydCBjb25zdCBlZGl0Q2xvc2VCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubW9kYWxfX2Nsb3NlLWJ1dHRvbl90eXBlX2VkaXQnKTtcclxuLy8gLS0tICdBdmF0YXJcIiBtb2RhbCBjb25zdHMgLS0tIC8vXHJcbmV4cG9ydCBjb25zdCBhdmF0YXJFZGl0QnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByb2ZpbGVfX2ltYWdlLWVkaXQnKTtcclxuZXhwb3J0IGNvbnN0IGF2YXRhck1vZGFsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm1vZGFsX3R5cGVfYXZhdGFyJyk7XHJcbmV4cG9ydCBjb25zdCBhdmF0YXJNb2RhbElucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm1vZGFsX19pbnB1dF90eXBlX2F2YXRhcicpO1xyXG5leHBvcnQgY29uc3QgYXZhdGFyQ2xvc2VCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubW9kYWxfX2Nsb3NlLWJ1dHRvbl90eXBlX2F2YXRhcicpXHJcbi8vIC0tLSAnQWRkLWNhcmQnIG1vZGFsIGNvbnN0cyAtLS0gLy9cclxuZXhwb3J0IGNvbnN0IGFkZENhcmRCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucHJvZmlsZV9fYWRkLWJ1dHRvbicpO1xyXG5leHBvcnQgY29uc3QgYWRkQ2FyZE1vZGFsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm1vZGFsX3R5cGVfYWRkLWNhcmQnKTtcclxuZXhwb3J0IGNvbnN0IGNhcmRJbnB1dFRpdGxlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm1vZGFsX19pbnB1dF90eXBlX25hbWUnKTtcclxuZXhwb3J0IGNvbnN0IGNhcmRJbnB1dExpbmsgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubW9kYWxfX2lucHV0X3R5cGVfbGluaycpO1xyXG5leHBvcnQgY29uc3QgYWRkQ2FyZENsb3NlQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm1vZGFsX19jbG9zZS1idXR0b25fdHlwZV9hZGQtY2FyZCcpO1xyXG4vLyAtLS0gJ0FkZC1DYXJkJyBmb3JtIGNvbnN0cyAtLS0gLy9cclxuZXhwb3J0IGNvbnN0IGFkZENhcmRGb3JtID0gZG9jdW1lbnQuZm9ybXMuYWRkO1xyXG5leHBvcnQgY29uc3QgYWRkQ2FyZEZvcm1UaXRlbCA9IGFkZENhcmRGb3JtLmVsZW1lbnRzLnRpdGxlO1xyXG5leHBvcnQgY29uc3QgYWRkQ2FyZEZvcm1MaW5rID0gYWRkQ2FyZEZvcm0uZWxlbWVudHMubGluaztcclxuLy8gLS0tIEdlbmVyYWwgY29uc3QgLS0tIC8vXHJcbmV4cG9ydCBjb25zdCBzdWJtaXRCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubW9kYWxfX3N1Ym1pdC1idXR0b24nKTtcclxuZXhwb3J0IGNvbnN0IGNhcmRMaXN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNhcmRzX19ncmlkJyk7XHJcbi8vIC0tLSBCaWcgaW1hZ2UgbW9kYWwgY29uc3RzIC0tLSAvL1xyXG5leHBvcnQgY29uc3QgY2FyZEJpZ01vZGFsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm1vZGFsX3R5cGVfYmlnLWltYWdlJyk7XHJcbmV4cG9ydCBjb25zdCBjYXJkQmlnTW9kYWxJbWFnZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tb2RhbF9fYmlnLWltYWdlJyk7XHJcbmV4cG9ydCBjb25zdCBjYXJkQmlnTW9kYWxUZXh0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm1vZGFsX19pbWFnZS1jYXB0aW9uJyk7XHJcbmV4cG9ydCBjb25zdCBjYXJkQmlnTW9kYWxDbG9zZUljb24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubW9kYWxfX2Nsb3NlLWJ1dHRvbl90eXBlX2JpZy1pbWFnZScpO1xyXG4vLyAtLS0gRm9ybSBjb25maWcgY29uc3RzIC0tLSAvL1xyXG5leHBvcnQgY29uc3QgZm9ybUNvbmZpZyA9IHtcclxuICBmb3JtU2VsZWN0b3I6IFwiLm1vZGFsX19jb250YWluZXJcIixcclxuICBpbnB1dFNlbGVjdG9yOiBcIi5tb2RhbF9faW5wdXRcIixcclxuICBzdWJtaXRCdXR0b25TZWxlY3RvcjogXCIubW9kYWxfX3N1Ym1pdC1idXR0b25cIixcclxuICBpbmFjdGl2ZUJ1dHRvbkNsYXNzOiBcIm1vZGFsX19zdWJtaXQtYnV0dG9uX2Rpc2FibGVkXCIsXHJcbiAgaW5wdXRFcnJvckNsYXNzOiBcIm1vZGFsX19pbnB1dF9lcnJvclwiLFxyXG4gIGVycm9yTWVzc2FnZUNsYXNzOiBcIm1vZGFsX19lcnJvcl92aXNpYmxlXCJcclxufTtcclxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgTW9kYWwge1xyXG4gIGNvbnN0cnVjdG9yKG1vZGFsU2VsZWN0b3IpIHtcclxuICAgIHRoaXMuX21vZGFsRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IobW9kYWxTZWxlY3Rvcik7XHJcbiAgfVxyXG4gIC8vIC0tLSBDbG9zZSBtb2RhbCBvbiBFU0MgbWV0aG9kIC0tLSAvL1xyXG4gIF9jaGVja0ZvckVzY0Nsb3NlID0gKGV2ZW50KSA9PiB7XHJcbiAgICBpZiAoZXZlbnQua2V5ID09PSBcIkVzY2FwZVwiKSB7XHJcbiAgICAgIHRoaXMuY2xvc2UoKTtcclxuICAgIH1cclxuICB9XHJcbiAgLy8gLS0tIE9wZW4gbW9kYWwgbWV0aG9kIC0tLSAvLyBcclxuICBvcGVuID0gKCkgPT4ge1xyXG4gICAgdGhpcy5fbW9kYWxFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJtb2RhbF92aXNpYmxlXCIpO1xyXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImtleXVwXCIsIHRoaXMuX2NoZWNrRm9yRXNjQ2xvc2UpO1xyXG4gIH1cclxuICAvLyAtLS0gQ2xvc2UgbW9kYWwgbWV0aG9kIC0tLSAvL1xyXG4gIGNsb3NlID0gKCkgPT4ge1xyXG4gICAgdGhpcy5fbW9kYWxFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJtb2RhbF92aXNpYmxlXCIpO1xyXG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImtleXVwXCIsIHRoaXMuX2NoZWNrRm9yRXNjQ2xvc2UpO1xyXG4gIH1cclxuXHJcbiAgc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XHJcbiAgICAvLyAtLS0gQ2xvc2UgbW9kYWwgb24gY2xvc2UoJ1gnKSBidXR0b24gLS0tIC8vXHJcbiAgICB0aGlzLl9tb2RhbEVsZW1lbnRcclxuICAgIC5xdWVyeVNlbGVjdG9yKFwiLm1vZGFsX19jbG9zZS1idXR0b25cIilcclxuICAgIC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGV2ZW50KSA9PiB7XHJcbiAgICAgIHRoaXMuY2xvc2UoZXZlbnQpO1xyXG4gICAgfSk7XHJcbiAgICAvLyBDbG9zZSBtb2RhbCBvbiBvdmVybGF5KG91dCBvZiB0aGUgbW9kYWwpIGNsaWNrIC0tLSAvLy9cclxuICAgIHRoaXMuX21vZGFsRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGV2ZW50KSA9PiB7XHJcbiAgICAgIGlmIChldmVudC50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKFwibW9kYWxfdmlzaWJsZVwiKSkge1xyXG4gICAgICAgIHRoaXMuY2xvc2UoZXZlbnQpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcbn0iLCJpbXBvcnQgTW9kYWwgZnJvbSBcIi4vTW9kYWwuanNcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1vZGFsV2l0aEZvcm0gZXh0ZW5kcyBNb2RhbCB7XHJcbiAgY29uc3RydWN0b3IobW9kYWxTZWxlY3RvciwgaGFuZGxlU3VibWl0KSB7XHJcbiAgICBzdXBlcihtb2RhbFNlbGVjdG9yKTtcclxuICAgIHRoaXMuX2hhbmRsZVN1Ym1pdEJ0biA9IGhhbmRsZVN1Ym1pdDtcclxuICAgIHRoaXMuX2Zvcm1FbGVtZW50ID0gdGhpcy5fbW9kYWxFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubW9kYWxfX2NvbnRhaW5lclwiKTtcclxuICB9XHJcblxyXG4gIGdldElucHV0VmFsdWVzKCkge1xyXG4gICAgY29uc3QgaW5wdXRMaXN0ID0gQXJyYXkuZnJvbShcclxuICAgICAgdGhpcy5fZm9ybUVsZW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5tb2RhbF9faW5wdXRcIilcclxuICAgICk7XHJcbiAgICBjb25zdCBpbnB1dFZhbHVlcyA9IHt9O1xyXG4gICAgaW5wdXRMaXN0LmZvckVhY2goKGlucHV0KSA9PiB7aW5wdXRWYWx1ZXNbaW5wdXQubmFtZV0gPSBpbnB1dC52YWx1ZTt9KTtcclxuICAgIHJldHVybiBpbnB1dFZhbHVlcztcclxuICB9XHJcblxyXG4gIHNldElucHV0VmFsdWVzKHZhbHVlcykge1xyXG4gICAgY29uc3QgaW5wdXRMaXN0ID0gQXJyYXkuZnJvbShcclxuICAgICAgdGhpcy5fZm9ybUVsZW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5tb2RhbF9faW5wdXRcIilcclxuICAgICk7XHJcbiAgICBpbnB1dExpc3QuZm9yRWFjaCgoaW5wdXQpID0+IHtpbnB1dC52YWx1ZSA9IHZhbHVlc1tpbnB1dC5uYW1lXTt9KVxyXG4gIH1cclxuXHJcbiAgc2F2aW5nKGlzU2F2aW5nKSB7XHJcbiAgICBpZiAoaXNTYXZpbmcpIHtcclxuICAgICAgdGhpcy5fZm9ybUVsZW1lbnQucXVlcnlTZWxlY3RvcihcclxuICAgICAgICBcIi5tb2RhbF9fc3VibWl0LWJ1dHRvblwiXHJcbiAgICAgICkudGV4dENvbnRlbnQgPSBcIlNhdmluZy4uLlwiO1xyXG4gICAgfSBcclxuICAgIGVsc2Uge1xyXG4gICAgICB0aGlzLl9mb3JtRWxlbWVudC5xdWVyeVNlbGVjdG9yKFxyXG4gICAgICAgIFwiLm1vZGFsX19zdWJtaXQtYnV0dG9uXCJcclxuICAgICAgKS50ZXh0Q29udGVudCA9IFwiU2F2ZVwiO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XHJcbiAgICBzdXBlci5zZXRFdmVudExpc3RlbmVycygpO1xyXG4gICAgdGhpcy5fZm9ybUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInN1Ym1pdFwiLCAoKSA9PiB7XHJcbiAgICAgIHRoaXMuX2hhbmRsZVN1Ym1pdEJ0bih0aGlzLmdldElucHV0VmFsdWVzKCkpO1xyXG4gICAgICB0aGlzLmNsb3NlKCk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGNsb3NlKCkge1xyXG4gICAgc3VwZXIuY2xvc2UoKTtcclxuICAgIHRoaXMuX2Zvcm1FbGVtZW50LnJlc2V0KCk7XHJcbiAgfVxyXG59IiwiaW1wb3J0IE1vZGFsIGZyb20gJy4vTW9kYWwuanMnO1xyXG4gIFxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNb2RhbERlbGV0ZUNvbmZpcm1hdGlvbiBleHRlbmRzIE1vZGFsIHtcclxuICBjb25zdHJ1Y3RvciAoc2VsZWN0b3IsIGhhbmRsZVN1Ym1pdCkge1xyXG4gICAgc3VwZXIoc2VsZWN0b3IpO1xyXG4gICAgdGhpcy5fZm9ybSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGhpcy5fc2VsZWN0b3IpO1xyXG4gICAgdGhpcy5faGFuZGxlU3VibWl0ID0gaGFuZGxlU3VibWl0O1xyXG4gICAgdGhpcy5faGFuZGxlU3VibWl0SGFuZGxlciA9IHRoaXMuX2hhbmRsZVN1Ym1pdEhhbmRsZXIuYmluZCh0aGlzKTtcclxuICB9XHJcbiAgXHJcbiAgX2hhbmRsZVN1Ym1pdEhhbmRsZXIgKGV2ZW50KSB7XHJcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgdGhpcy5faGFuZGxlU3VibWl0KCk7XHJcbiAgICBzdXBlci5jbG9zZSgpO1xyXG4gIH1cclxuICBcclxuICBfc2V0RXZlbnRMaXN0ZW5lcnMgKCkge1xyXG4gICAgc3VwZXIuX3NldEV2ZW50TGlzdGVuZXJzKCk7XHJcbiAgICB0aGlzLl9mb3JtLmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIHRoaXMuX2hhbmRsZVN1Ym1pdEhhbmRsZXIpO1xyXG4gIH1cclxuICBcclxuICBfcmVtb3ZlRXZlbnRMaXN0ZW5lcnMgKCkge1xyXG4gICAgc3VwZXIuX3JlbW92ZUV2ZW50TGlzdGVuZXJzKCk7XHJcbiAgICB0aGlzLl9mb3JtLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIHRoaXMuX2hhbmRsZVN1Ym1pdEhhbmRsZXIpO1xyXG4gIH1cclxufSIsImltcG9ydCBBcGkgZnJvbSBcIi4uL2NvbXBvbmVudHMvc2NyaXB0cy9BcGkuanNcIlxyXG5pbXBvcnQgeyBDYXJkIH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvc2NyaXB0cy9DYXJkLmpzXCI7XHJcbmltcG9ydCBGb3JtVmFsaWRhdG9yIGZyb20gXCIuLi9jb21wb25lbnRzL3NjcmlwdHMvRm9ybVZhbGlkYXRvci5qc1wiO1xyXG5pbXBvcnQgU2VjdGlvbiBmcm9tIFwiLi4vY29tcG9uZW50cy9zY3JpcHRzL1NlY3Rpb24uanNcIjtcclxuaW1wb3J0IHtcclxuICBlZGl0QnV0dG9uLFxyXG4gIHByb2ZpbGVNb2RhbCxcclxuICBhZGRDYXJkQnV0dG9uLFxyXG4gIGFkZENhcmRNb2RhbCxcclxuICBhdmF0YXJNb2RhbCxcclxuICBhdmF0YXJFZGl0QnV0dG9uLFxyXG4gIGZvcm1Db25maWdcclxufSBmcm9tIFwiLi4vY29tcG9uZW50cy91dGlscy9jb25zdGFudHMuanNcIjtcclxuaW1wb3J0IE1vZGFsV2l0aEltYWdlIGZyb20gXCIuLi9jb21wb25lbnRzL3NjcmlwdHMvTW9kYWxXaXRoSW1hZ2UuanNcIjtcclxuaW1wb3J0IE1vZGFsV2l0aEZvcm0gZnJvbSBcIi4uL2NvbXBvbmVudHMvc2NyaXB0cy9Nb2RhbFdpdGhGb3JtLmpzXCI7XHJcbmltcG9ydCBNb2RhbERlbGV0ZUNvbmZpcm1hdGlvbiBmcm9tIFwiLi4vY29tcG9uZW50cy9zY3JpcHRzL01vZGFsRGVsZXRlQ29uZmlybWF0aW9uLmpzXCI7XHJcbmltcG9ydCBVc2VySW5mbyBmcm9tIFwiLi4vY29tcG9uZW50cy9zY3JpcHRzL1VzZXJJbmZvLmpzXCI7XHJcbmltcG9ydCBcIi4vaW5kZXguY3NzXCI7XHJcblxyXG5jb25zdCBhcGkgPSBuZXcgQXBpKHtcclxuICBiYXNlVXJsOiAnaHR0cHM6Ly9hcm91bmQubm9tb3JlcGFydGllcy5jby92MS9ncm91cC0yJyxcclxuICBoZWFkZXJzOiB7IFxyXG4gICAgICBhdXRob3JpemF0aW9uOiBcIjcwOWEwZDlkLWRiMDYtNDg5MC1hNTk0LWIwN2U3MzA5YTM1M1wiLFxyXG4gICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nIFxyXG4gIH1cclxufSk7XHJcblxyXG4vLyAtLS0gQmlnIGltYWdlIG1vZGFsIGluc3RhbmNlIC0tLSAvL1xyXG5jb25zdCBiaWdJbWFnZU1vZGFsID0gbmV3IE1vZGFsV2l0aEltYWdlKFwiLm1vZGFsX3R5cGVfYmlnLWltYWdlXCIpO1xyXG5cclxuLy8gLS0tIERlbGV0ZSBjYXJkIG1vZGFsIGluc3RhbmNlIGFuZCBldmVudHMgLS0tIC8vXHJcbmNvbnN0IGRlbGV0ZUNhcmRNb2RhbCA9IG5ldyBNb2RhbFdpdGhGb3JtKFwiLm1vZGFsX3R5cGVfZGVsZXRlLWNhcmRcIik7XHJcbmRlbGV0ZUNhcmRNb2RhbC5zZXRFdmVudExpc3RlbmVycygpO1xyXG5cclxuLy8gKysrKysgQ2FyZCBTZWN0aW9uICsrKysrIC8vXHJcbi8vIC0tLSBDYXJkIHJlbmRlciBmdW5jdGlvbiAtLS0gLy9cclxuZnVuY3Rpb24gY3JlYXRlQ2FyZChkYXRhKSB7XHJcbiAgY29uc3QgY2FyZCA9IG5ldyBDYXJkKHtcclxuICAgIGRhdGE6IGRhdGEsXHJcbiAgICB1c2VyOiB1c2VySWQsXHJcbiAgICBjYXJkU2VsZWN0b3I6IFwiLmNhcmRzX19ncmlkXCIsXHJcbiAgICBoYW5kbGVDYXJkQ2xpY2s6IChldnQpID0+IHtcclxuICAgICAgLy8gLS0tIE9wZW4gYmlnIGltYWdlIG1vZGFsIC0tLSAvL1xyXG4gICAgICBldnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgY29uc3QgdGFyZ2V0ID0gZXZ0LnRhcmdldDtcclxuICAgICAgY29uc3QgbGluayA9IHRhcmdldC5zcmM7XHJcbiAgICAgIGNvbnN0IG5hbWUgPSB0YXJnZXQuYWx0O1xyXG4gICAgICBiaWdJbWFnZU1vZGFsLm9wZW4obGluaywgbmFtZSk7XHJcbiAgICAgIGJpZ0ltYWdlTW9kYWwuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuICAgIH0sXHJcbiAgICBoYW5kbGVEZWxldGVDYXJkOiAoY2FyZElkKSA9PiB7XHJcbiAgICAgIE1vZGFsRGVsZXRlQ29uZmlybWF0aW9uLm9wZW4oKTtcclxuICAgICAgTW9kYWxEZWxldGVDb25maXJtYXRpb24uc2V0QWN0aW9uKCgpID0+XHJcbiAgICAgICAgYXBpLmRlbGV0ZUNhcmQoY2FyZElkKVxyXG4gICAgICAgICAgLnRoZW4oKHJlcykgPT4ge1xyXG4gICAgICAgICAgICBjYXJkLmRlbGV0ZUNhcmQoKTtcclxuICAgICAgICAgICAgTW9kYWxEZWxldGVDb25maXJtYXRpb24uY2xvc2UoKTtcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgICAuY2F0Y2goKGVycikgPT4gY29uc29sZS5sb2coZXJyKSlcclxuICAgICAgKTtcclxuICAgIH0sXHJcbiAgICBoYW5kbGVMaWtlczogKGNhcmRJZCkgPT4ge1xyXG4gICAgICBjb25zdCBpc0xpa2VkID0gY2FyZC5pc0xpa2VkKCk7XHJcbiAgICAgIGlmIChpc0xpa2VkKSB7XHJcbiAgICAgICAgYXBpLnJlbW92ZUxpa2UoY2FyZElkKVxyXG4gICAgICAgICAgLnRoZW4oKHJlcykgPT4ge1xyXG4gICAgICAgICAgICBjYXJkLnVwZGF0ZUxpa2VzKHJlcy5saWtlcyk7XHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgICAgLmNhdGNoKChlcnIpID0+IGNvbnNvbGUubG9nKGVycikpXHJcbiAgICAgIH0gXHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIGFwaS5hZGRMaWtlKGNhcmRJZClcclxuICAgICAgICAgIC50aGVuKChyZXMpID0+IHtcclxuICAgICAgICAgICAgY2FyZC51cGRhdGVMaWtlcyhyZXMubGlrZXMpO1xyXG4gICAgICAgICAgfSlcclxuICAgICAgICAgIC5jYXRjaCgoZXJyKSA9PiBjb25zb2xlLmxvZyhlcnIpKVxyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gIH0pO1xyXG4gIC8vIC0tLSBDbG9uZSBmcm9tIHRlbXBsYXRlIC0tLSAvL1xyXG4gIGNvbnN0IGNhcmRzSXRlbSA9IGNhcmQuZ2VuZXJhdGVDYXJkKCk7XHJcbiAgcmV0dXJuIGNhcmRzSXRlbTtcclxufVxyXG5cclxuY29uc3QgY2FyZHNTZWN0aW9uID0gbmV3IFNlY3Rpb24oXHJcbiAgKGl0ZW0pID0+IHtcclxuICAgIGNhcmRzU2VjdGlvbi5hZGRJdGVtKGNyZWF0ZUNhcmQoaXRlbSkpO1xyXG4gIH0sXHJcbiAgXCIuY2FyZHNfX2dyaWRcIlxyXG4pO1xyXG5cclxuLy8gKysrKysgJ1VzZXIgSW5mbycgKysrKysgLy9cclxuLy8gLS0tIFVzZXJJbmZvIGluc3RhbmNlIC0tLSAvL1xyXG5jb25zdCB1c2VySW5mb1ZhbHVlcyA9IG5ldyBVc2VySW5mbyh7XHJcbiAgbmFtZTogXCIucHJvZmlsZV9fdGl0bGVcIixcclxuICBhYm91dDogXCIucHJvZmlsZV9fc3VidGl0bGVcIixcclxuICBhdmF0YXI6IFwiLnByb2ZpbGVfX2ltYWdlXCIsXHJcbn0pO1xyXG4vLyAtLS0gVXNlckluZm8gaW5pdCAtLS0gLy9cclxuYXBpLmdldFVzZXJJbmZvKClcclxuICAudGhlbigocmVzKSA9PiB7XHJcbiAgICB1c2VySW5mb1ZhbHVlcy5zZXRVc2VySW5mbyhyZXMpO1xyXG4gICAgdXNlcklkID0gcmVzLl9pZDtcclxuICAgIHVzZXJJbmZvVmFsdWVzLnNldFVzZXJBdmF0YXIocmVzLmF2YXRhcik7XHJcbiAgfSlcclxuICAuY2F0Y2goKGVycikgPT4gY29uc29sZS5sb2coZXJyKSk7XHJcblxyXG4vLyArKysrKyBDYXJkIGxpc3QgKysrKysgLy9cclxuLy8gLS0tIENhcmRzIGluaXQgLS0tIC8vXHJcbmFwaS5nZXRJbml0aWFsQ2FyZHMoKS50aGVuKChyZXMpID0+IHtcclxuICBjYXJkc1NlY3Rpb24ucmVuZGVySXRlbXMocmVzKTtcclxufSlcclxuLmNhdGNoKChlcnIpID0+IGNvbnNvbGUubG9nKGVycikpO1xyXG5cclxuLy8gKysrKysgRm9ybXMgKysrKysgLy9cclxuLy8gPT09ICdFZGl0IHByb2ZpbGUnIGZvcm0gPT09IC8vXHJcbi8vIC0tLSBGb3JtIGNyZWF0aW9uIG1ldGhvZCAtLS0gLy9cclxuY29uc3QgZWRpdFByb2ZpbGVGb3JtID0gbmV3IE1vZGFsV2l0aEZvcm0oXCIubW9kYWxfdHlwZV9lZGl0XCIsICgpID0+IHtcclxuICB1c2VySW5mb1ZhbHVlcy5zZXRVc2VySW5mbyhlZGl0UHJvZmlsZUZvcm0uZ2V0SW5wdXRWYWx1ZXMoKSk7XHJcbiAgZWRpdFByb2ZpbGVGb3JtLmNsb3NlKCk7XHJcbn0pO1xyXG5cclxuLy8gLS0tIFNldCBldmVudCBsaXN0ZW5lcnMgZm9yIHRoZSBmb3JtIC0tLSAvL1xyXG5lZGl0UHJvZmlsZUZvcm0uc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuXHJcbi8vIC0tLSBTZXQgdmFsdWVzIGFuZCBvcGVuIHRoZSBmb3JtIC0tLSAvL1xyXG5lZGl0QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgZWRpdFByb2ZpbGVGb3JtLnNldElucHV0VmFsdWVzKHVzZXJJbmZvVmFsdWVzLmdldFVzZXJJbmZvKCkpXHJcbiAgcHJvZmlsZUZvcm1WYWxpZGF0aW9uLnJlc2V0VmFsaWRhdGlvbigpO1xyXG4gIGVkaXRQcm9maWxlRm9ybS5vcGVuKCk7XHJcbn0pO1xyXG5cclxuLy8gPT09ICdBdmF0YXInIGVkaXQgZm9ybSA9PT0gLy9cclxuY29uc3QgYXZhdGFyRm9ybSA9IG5ldyBNb2RhbFdpdGhGb3JtKFwiLm1vZGFsX3R5cGVfYXZhdGFyXCIsICgpID0+IHtcclxuICBjb25zdCBuZXdBdmF0YXIgPSBhdmF0YXJGb3JtLmdldElucHV0VmFsdWVzKCk7XHJcbiAgc2V0VXNlckF2YXRhcihuZXdBdmF0YXIpO1xyXG4gIGF2YXRhckZvcm0uY2xvc2UoKTtcclxufSk7XHJcblxyXG4vLyAtLS0gU2V0IGV2ZW50IGxlc3RlbmVycyB0byB0aGUgZm9ybSAtLS0gLy9cclxuYXZhdGFyRm9ybS5zZXRFdmVudExpc3RlbmVycygpO1xyXG5cclxuYXZhdGFyRWRpdEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gIGF2YXRhckZvcm1WYWxpZGF0aW9uLnJlc2V0VmFsaWRhdGlvbigpO1xyXG4gIGF2YXRhckZvcm0ub3BlbigpO1xyXG59KTtcclxuXHJcbi8vID09PSAnQWRkIGNhcmQnIGZvcm0gPT09IC8vXHJcbi8vIC0tLSBGb3JtIGNyZWF0aW9uIG1ldGhvZCAtLS0gLy9cclxuY29uc3QgYWRkQ2FyZEZvcm0gPSBuZXcgTW9kYWxXaXRoRm9ybShcIi5tb2RhbF90eXBlX2FkZC1jYXJkXCIsICgpID0+IHtcclxuICBjb25zdCBuZXdDYXJkID0gYWRkQ2FyZEZvcm0uZ2V0SW5wdXRWYWx1ZXMoKTtcclxuICBjYXJkc1NlY3Rpb24uYWRkSXRlbShnZW5lcmF0ZUNhcmQobmV3Q2FyZCkpO1xyXG4gIGFkZENhcmRGb3JtLmNsb3NlKCk7XHJcbn0pO1xyXG5cclxuLy8gLS0tIFNldCBldmVudCBsaXN0ZW5lcnMgZm9yICdhZGQgY2FyZCcgbW9kYWwgLS0tIC8vXHJcbmFkZENhcmRGb3JtLnNldEV2ZW50TGlzdGVuZXJzKCk7XHJcblxyXG4vLyAtLS0gT3BlbiAnQWRkIENhcmQnIGZvcm0gLS0tIC8vXHJcbmFkZENhcmRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICBhZGRDYXJkRm9ybVZhbGlkYXRpb24ucmVzZXRWYWxpZGF0aW9uKCk7XHJcbiAgYWRkQ2FyZEZvcm0ub3BlbigpO1xyXG59KTtcclxuXHJcbi8vICsrKysrIFZhbGlkYXRpb24gKysrKysgLy9cclxuLy8gLS0tICdFZGl0IHByb2ZpbGUnIGZvcm0gdmFsaWRhdGlvbiBhZGRpbmcgLS0tIC8vXHJcbmNvbnN0IHByb2ZpbGVGb3JtVmFsaWRhdGlvbiA9IG5ldyBGb3JtVmFsaWRhdG9yKGZvcm1Db25maWcsIHByb2ZpbGVNb2RhbCk7XHJcbnByb2ZpbGVGb3JtVmFsaWRhdGlvbi5lbmFibGVWYWxpZGF0aW9uKCk7XHJcblxyXG4vLyAtLS0gJ0F2YXRhcicgZm9ybSB2YWxpZGF0aW9uIGFkZGluZyAtLS0gLy9cclxuY29uc3QgYXZhdGFyRm9ybVZhbGlkYXRpb24gPSBuZXcgRm9ybVZhbGlkYXRvcihmb3JtQ29uZmlnLCBhdmF0YXJNb2RhbCk7XHJcbmF2YXRhckZvcm1WYWxpZGF0aW9uLmVuYWJsZVZhbGlkYXRpb24oKTtcclxuXHJcbi8vIC0tLSAnQWRkIGNhcmQnIGZvcm0gdmFsaWRhdGlvbiBhZGRpbmcgLS0tIC8vXHJcbmNvbnN0IGFkZENhcmRGb3JtVmFsaWRhdGlvbiA9IG5ldyBGb3JtVmFsaWRhdG9yKGZvcm1Db25maWcsIGFkZENhcmRNb2RhbCk7XHJcbmFkZENhcmRGb3JtVmFsaWRhdGlvbi5lbmFibGVWYWxpZGF0aW9uKCk7XHJcblxyXG4vLyAtLS0gU3RvcmUgdXNlciBJRCAtLS0gLy9cclxubGV0IHVzZXJJZDsiLCJpbXBvcnQgTW9kYWwgZnJvbSBcIi4vTW9kYWwuanNcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1vZGFsV2l0aEltYWdlIGV4dGVuZHMgTW9kYWwge1xyXG4gIC8vIC0tLSBPcGVuIGJpZyBpbWFnZSBtb2RhbCBtZXRob2QgLS0tIC8vXHJcbiAgb3BlbnVwID0gKGV2ZW50KSA9PiB7XHJcbiAgICBjb25zdCBiaWdJbWFnZSA9IGV2ZW50LnRhcmdldDtcclxuICAgIHRoaXMuX21vZGFsRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLm1vZGFsX19iaWctaW1hZ2VcIikuc3JjID0gYmlnSW1hZ2Uuc3JjO1xyXG4gICAgdGhpcy5fbW9kYWxFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubW9kYWxfX2JpZy1pbWFnZVwiKS5hbHQgPSBiaWdJbWFnZS5hbHQ7XHJcbiAgICB0aGlzLl9tb2RhbEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5tb2RhbF9faW1hZ2UtY2FwdGlvblwiKS50ZXh0Q29udGVudCA9IGJpZ0ltYWdlLmFsdDtcclxuXHJcbiAgICB0aGlzLm9wZW4oKTtcclxuICB9XHJcbn0iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBTZWN0aW9uIHtcclxuICBjb25zdHJ1Y3Rvcih7IGl0ZW1zLCByZW5kZXJlciB9LCBjb250YWluZXJTZWxlY3Rvcikge1xyXG4gICAgdGhpcy5faXRlbXMgPSBpdGVtcztcclxuICAgIHRoaXMuX3JlbmRlcmVyID0gcmVuZGVyZXI7XHJcbiAgICB0aGlzLl9jb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGNvbnRhaW5lclNlbGVjdG9yKTtcclxuICB9XHJcblxyXG4gIGFkZEl0ZW0oZWxlbWVudCkge1xyXG4gICAgdGhpcy5fY29udGFpbmVyLnByZXBlbmQoZWxlbWVudCk7XHJcbiAgfVxyXG5cclxuICBjbGVhciAoKSB7XHJcbiAgICB0aGlzLl9jb250YWluZXIuaW5uZXJIVE1MID0gJyc7XHJcbiAgfVxyXG5cclxuICByZW5kZXJJdGVtcygpIHtcclxuICAgIHRoaXMuY2xlYXIoKTtcclxuICAgIFxyXG4gICAgdGhpcy5faXRlbXMuZm9yRWFjaCgoY2FyZCkgPT4ge1xyXG4gICAgICB0aGlzLl9yZW5kZXJlcihjYXJkKTtcclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBVc2VySW5mbyB7XHJcbiAgY29uc3RydWN0b3IoIHtuYW1lLCBqb2IsIGF2YXRhcn0gKSB7XHJcbiAgICB0aGlzLl9uYW1lID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgJHtuYW1lfWApO1xyXG4gICAgdGhpcy5fam9iID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgJHtqb2J9YCk7XHJcbiAgICB0aGlzLl9hdmF0YXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAke2F2YXRhcn1gKTtcclxuICAgIHRoaXMuc2V0VXNlckluZm8gPSB0aGlzLnNldFVzZXJJbmZvLmJpbmQodGhpcyk7XHJcbiAgfVxyXG5cclxuICBnZXRVc2VySW5mbygpIHtcclxuICAgIGNvbnN0IHVzZXJJbmZvID0ge307XHJcbiAgICB1c2VySW5mby51c2VyTmFtZSA9IHRoaXMuX25hbWUudGV4dENvbnRlbnQ7XHJcbiAgICB1c2VySW5mby51c2VySm9iID0gdGhpcy5fam9iLnRleHRDb250ZW50O1xyXG5cclxuICAgIHJldHVybiB1c2VySW5mbztcclxuICB9XHJcblxyXG4gIHNldFVzZXJJbmZvKGRhdGEpIHtcclxuICAgIHRoaXMuX25hbWUudGV4dENvbnRlbnQgPSBkYXRhLm5hbWU7XHJcbiAgICB0aGlzLl9qb2IudGV4dENvbnRlbnQgPSBkYXRhLmpvYjtcclxuICB9XHJcblxyXG4gIHNldFVzZXJBdmF0YXIoIHthdmF0YXJ9ICkge1xyXG4gICAgdGhpcy5fYXZhdGFyLnN0eWxlLmJhY2tncm91bmRJbWFnZSA9IGB1cmwoJyR7YXZhdGFyfScpYDtcclxuICB9XHJcbn1cclxuIl0sIm5hbWVzIjpbIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsInVuZGVmaW5lZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwibiIsImdldHRlciIsIl9fZXNNb2R1bGUiLCJkIiwiYSIsImRlZmluaXRpb24iLCJrZXkiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0Iiwib2JqIiwicHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIkNhcmQiLCJjb25zdHJ1Y3RvciIsImNhcmREYXRhIiwidXNlciIsIm9uQ2FyZENsaWNrIiwicmVtb3ZlSGFuZGxlciIsImxpa2VIYW5kbGVyIiwiY2FyZFNlbGVjdG9yIiwidGhpcyIsIl9uYW1lIiwibmFtZSIsIl9saW5rIiwibGluayIsIl9jYXJkSWQiLCJfaWQiLCJfb3duZXJJZCIsIm93bmVyIiwiX3VzZXJJRCIsIl9saWtlcyIsImxpa2VzIiwiX2NhcmRTZWxlY3RvciIsIl9vbkNhcmRDbGljayIsIl9saWtlSGFuZGxlciIsIl9yZW1vdmVIYW5kbGVyIiwiX2dldFRlbXBsYXRlIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiY29udGVudCIsImNsb25lTm9kZSIsImRlbGV0ZUNhcmQiLCJfaXRlbSIsInJlbW92ZSIsIl9yZW5kZXJMaWtlcyIsImlzTGlrZWQiLCJjbGFzc0xpc3QiLCJhZGQiLCJ0ZXh0Q29udGVudCIsImxlbmd0aCIsInNvbWUiLCJfdXNlcklkIiwidXBkYXRlTGlrZXMiLCJuZXdMaWtlcyIsIl9zZXRFdmVudExpc3RlbmVycyIsImFkZEV2ZW50TGlzdGVuZXIiLCJldmVudCIsIl9saWtlQ2FyZCIsIl9jYXJkSW1hZ2UiLCJnZW5lcmF0ZUNhcmQiLCJfZWxlbWVudCIsInNyYyIsImFsdCIsIkZvcm1WYWxpZGF0b3IiLCJmb3JtQ29uZmlnIiwiZm9ybUVsZW1lbnQiLCJfZm9ybUNvbmZpZyIsIl9mb3JtRWxlbWVudCIsIl9zaG93SW5wdXRFcnJvciIsImlucHV0RWxlbWVudCIsImVycm9yTWVzc2FnZSIsImlucHV0RXJyb3JDbGFzcyIsImVycm9yTWVzc2FnZUNsYXNzIiwiZXJyb3JFbGVtZW50IiwiaWQiLCJfaGlkZUlucHV0RXJyb3IiLCJyZXNldFZhbGlkYXRpb24iLCJpbnB1dHMiLCJmb3JFYWNoIiwiaW5wdXQiLCJfdG9nZ2xlU3VibWl0QnV0dG9uIiwiX2NoZWNrSW5wdXQiLCJ2YWxpZGl0eSIsInZhbGlkIiwidmFsaWRhdGlvbk1lc3NhZ2UiLCJfY2hlY2tJZkZvcm1WYWxpZCIsImV2ZXJ5IiwiaW5hY3RpdmVCdXR0b25DbGFzcyIsInN1Ym1pdEJ1dHRvblNlbGVjdG9yIiwiYnV0dG9uRWxlbWVudCIsImRpc2FibGVkIiwiaW5wdXRTZWxlY3RvciIsIkFycmF5IiwiZnJvbSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJlbmFibGVWYWxpZGF0aW9uIiwicHJldmVudERlZmF1bHQiLCJlZGl0QnV0dG9uIiwicHJvZmlsZU1vZGFsIiwiZm9ybXMiLCJwcm9maWxlIiwiYXZhdGFyRWRpdEJ1dHRvbiIsImVsZW1lbnRzIiwiam9iIiwiYXZhdGFyTW9kYWwiLCJhZGRDYXJkQnV0dG9uIiwiYWRkQ2FyZE1vZGFsIiwiYWRkQ2FyZEZvcm0iLCJ0aXRsZSIsImZvcm1TZWxlY3RvciIsIk1vZGFsIiwibW9kYWxTZWxlY3RvciIsIl9tb2RhbEVsZW1lbnQiLCJfY2hlY2tGb3JFc2NDbG9zZSIsImNsb3NlIiwib3BlbiIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJzZXRFdmVudExpc3RlbmVycyIsInRhcmdldCIsImNvbnRhaW5zIiwiTW9kYWxXaXRoRm9ybSIsImhhbmRsZVN1Ym1pdCIsInN1cGVyIiwiX2hhbmRsZVN1Ym1pdEJ0biIsImdldElucHV0VmFsdWVzIiwiaW5wdXRMaXN0IiwiaW5wdXRWYWx1ZXMiLCJ2YWx1ZSIsInNldElucHV0VmFsdWVzIiwidmFsdWVzIiwic2F2aW5nIiwiaXNTYXZpbmciLCJyZXNldCIsIk1vZGFsRGVsZXRlQ29uZmlybWF0aW9uIiwic2VsZWN0b3IiLCJfZm9ybSIsIl9zZWxlY3RvciIsIl9oYW5kbGVTdWJtaXQiLCJfaGFuZGxlU3VibWl0SGFuZGxlciIsImJpbmQiLCJfcmVtb3ZlRXZlbnRMaXN0ZW5lcnMiLCJhcGkiLCJBcGkiLCJiYXNlVXJsIiwiaGVhZGVycyIsImF1dGhvcml6YXRpb24iLCJiaWdJbWFnZU1vZGFsIiwib3BlbnVwIiwiYmlnSW1hZ2UiLCJjYXJkc1NlY3Rpb24iLCJpdGVtcyIsInJlbmRlcmVyIiwiY29udGFpbmVyU2VsZWN0b3IiLCJfaXRlbXMiLCJfcmVuZGVyZXIiLCJfY29udGFpbmVyIiwiYWRkSXRlbSIsImVsZW1lbnQiLCJwcmVwZW5kIiwiY2xlYXIiLCJpbm5lckhUTUwiLCJyZW5kZXJJdGVtcyIsImNhcmQiLCJpdGVtIiwiZGF0YSIsInVzZXJJZCIsImhhbmRsZUNhcmRDbGljayIsImV2dCIsImhhbmRsZURlbGV0ZUNhcmQiLCJjYXJkSWQiLCJzZXRBY3Rpb24iLCJ0aGVuIiwicmVzIiwiY2F0Y2giLCJlcnIiLCJjb25zb2xlIiwibG9nIiwiaGFuZGxlTGlrZXMiLCJyZW1vdmVMaWtlIiwiYWRkTGlrZSIsImNyZWF0ZUNhcmQiLCJ1c2VySW5mb1ZhbHVlcyIsImF2YXRhciIsIl9qb2IiLCJfYXZhdGFyIiwic2V0VXNlckluZm8iLCJnZXRVc2VySW5mbyIsInVzZXJJbmZvIiwidXNlck5hbWUiLCJ1c2VySm9iIiwic2V0VXNlckF2YXRhciIsInN0eWxlIiwiYmFja2dyb3VuZEltYWdlIiwiYWJvdXQiLCJnZXRJbml0aWFsQ2FyZHMiLCJlZGl0UHJvZmlsZUZvcm0iLCJwcm9maWxlRm9ybVZhbGlkYXRpb24iLCJhdmF0YXJGb3JtIiwibmV3QXZhdGFyIiwiYXZhdGFyRm9ybVZhbGlkYXRpb24iLCJuZXdDYXJkIiwiYWRkQ2FyZEZvcm1WYWxpZGF0aW9uIl0sInNvdXJjZVJvb3QiOiIifQ==