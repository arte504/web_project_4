!function(){"use strict";const e=(e,t)=>fetch(e,t).then((e=>{if(e.ok)return e.json();Promise.reject(`ERROR: ${e.statusText}`)}));class t{constructor({cardData:e,user:t,onCardClick:s,removeHandler:r,likeHandler:n},i){this._name=e.name,this._link=e.link,this._cardId=e._id,this._ownerId=e.owner._id,this._userID=t,this._likes=e.likes,this._cardSelector=i,this._onCardClick=s,this._likeHandler=n,this._removeHandler=r}_getTemplate(){return document.querySelector("#card__template").content.querySelector(".card").cloneNode(!0)}deleteCard(){this._item.remove(),this._item=null}_renderLikes(){this.isLiked()?this._item.querySelector(".card__like-button").classList.add("card__like-button_active"):this._item.querySelector(".card__like-button").classList.remove("card__like-button_active"),this._item.querySelector(".card__like-counter").textContent=this._likes.length}isLiked(){return this._likes.some((e=>e._id===this._userId))}updateLikes(e){this._likes=e,this._renderLikes()}_setEventListeners(){this._item.querySelector(".card__like-button").addEventListener("click",(e=>{this._likeCard(e)})),this._item.querySelector(".card__delete-button").addEventListener("click",(()=>{this._removeHandler(this._cardId)})),this._cardImage.addEventListener("click",(e=>{this._onCardClick(e)}))}generateCard(){return this._item=this._getTemplate(),this._ownerId!==this._userId&&this._element.querySelector(".card__delete-button").classList.add("card__delete-button_hidden"),this._cardImage=this._item.querySelector(".card__image"),this._item.querySelector(".card__title").textContent=this._name,this._cardImage.src=this._link,this._cardImage.alt=`Image of  ${this._name} `,this._renderLikes(),this._setEventListeners(),this._item}}class s{constructor(e,t){this._formConfig=e,this._formElement=t}_showInputError=(e,t)=>{const{inputErrorClass:s,errorMessageClass:r}=this._formConfig,n=this._formElement.querySelector(` #${e.id}_error `);n.textContent=t,n.classList.add(r),e.classList.add(s)};_hideInputError=e=>{const{inputErrorClass:t,errorMessageClass:s}=this._formConfig,r=this._formElement.querySelector(` #${e.id}_error `);r.textContent="",r.classList.remove(s),e.classList.remove(t)};resetValidation(){this.inputs.forEach((e=>{this._hideInputError(e)})),this._toggleSubmitButton()}_checkInput=e=>{e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)};_checkIfFormValid=()=>this.inputs.every((e=>e.validity.valid));_toggleSubmitButton(){const{inactiveButtonClass:e,submitButtonSelector:t}=this._formConfig,s=this._formElement.querySelector(t);this._checkIfFormValid()?(s.disabled=!1,s.classList.remove(e)):(s.disabled=!0,s.classList.add(e))}_setEventListeners=()=>{const{inputSelector:e}=this._formConfig;return this.inputs=Array.from(this._formElement.querySelectorAll(e)),this.inputs.forEach((e=>{e.addEventListener("input",(()=>{this._checkInput(e),this._toggleSubmitButton()}))})),this._formElement};enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}}const r=document.querySelector(".profile__edit-button"),n=document.forms.profile,i=(n.elements.name,n.elements.job,document.querySelector(".modal__close-button_type_edit"),document.querySelector(".profile__image-edit")),o=document.querySelector(".modal_type_avatar"),a=(document.querySelector(".modal__input_type_avatar"),document.querySelector(".modal__close-button_type_avatar"),document.querySelector(".profile__add-button")),l=document.querySelector(".modal_type_add-card"),d=(document.querySelector(".modal__input_type_name"),document.querySelector(".modal__input_type_link"),document.querySelector(".modal__close-button_type_add-card"),document.forms.add),c=(d.elements.title,d.elements.link,document.querySelector(".modal__submit-button"),document.querySelector(".cards__grid"),document.querySelector(".modal_type_big-image"),document.querySelector(".modal__big-image"),document.querySelector(".modal__image-caption"),document.querySelector(".modal__close-button_type_big-image"),{formSelector:".modal__container",inputSelector:".modal__input",submitButtonSelector:".modal__submit-button",inactiveButtonClass:"modal__submit-button_disabled",inputErrorClass:"modal__input_error",errorMessageClass:"modal__error_visible"});class _{constructor(e){this._modalElement=document.querySelector(e)}_checkForEscClose=e=>{"Escape"===e.key&&this.close()};open=()=>{this._modalElement.classList.add("modal_visible"),document.addEventListener("keyup",this._checkForEscClose)};close=()=>{this._modalElement.classList.remove("modal_visible"),document.removeEventListener("keyup",this._checkForEscClose)};setEventListeners(){this._modalElement.querySelector(".modal__close-button").addEventListener("click",(e=>{this.close(e)})),this._modalElement.addEventListener("click",(e=>{e.target.classList.contains("modal_visible")&&this.close(e)}))}}class m extends _{constructor(e,t){super(e),this._handleSubmitBtn=t,this._formElement=this._modalElement.querySelector(".modal__container")}getInputValues(){const e=Array.from(this._formElement.querySelectorAll(".modal__input")),t={};return e.forEach((e=>{t[e.name]=e.value})),t}setInputValues(e){Array.from(this._formElement.querySelectorAll(".modal__input")).forEach((t=>{t.value=e[t.name]}))}saving(e){this._formElement.querySelector(".modal__submit-button").textContent=e?"Saving...":"Save"}setEventListeners(){super.setEventListeners(),this._formElement.addEventListener("submit",(()=>{this._handleSubmitBtn(this.getInputValues()),this.close()}))}close(){super.close(),this._formElement.reset()}}class u extends _{constructor(e,t){super(e),this._form=document.querySelector(this._selector),this._handleSubmit=t,this._handleSubmitHandler=this._handleSubmitHandler.bind(this)}_handleSubmitHandler(e){e.preventDefault(),this._handleSubmit(),super.close()}_setEventListeners(){super._setEventListeners(),this._form.addEventListener("submit",this._handleSubmitHandler)}_removeEventListeners(){super._removeEventListeners(),this._form.removeEventListener("submit",this._handleSubmitHandler)}}const h=new class{constructor(e,t){this.baseUrl=e,this.headers=t}getInitialCards(){return e(`${this._baseUrl}/cards`,{headers:this._headers})}getUserInfo(){return e(`${this._baseUrl}/users/me`,{headers:this._headers})}setUserAvatar(t){return e(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:t.link})})}sendNewData(t){return e(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:t.name,job:t.job})})}createNewCard(t){return e(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:t.name,link:t.link})})}removeCard(t){return e(`${this._baseUrl}/cards/${t}`,{method:"DELETE",headers:this._headers})}addLike(t){return e(`${this._baseUrl}/cards/likes/${t}`,{method:"PUT",headers:this._headers})}removeLike(t){return e(`${this._baseUrl}/cards/likes/${t}`,{method:"DELETE",headers:this._headers})}}("https://around.nomoreparties.co/v1/group-2",{authorization:"709a0d9d-db06-4890-a594-b07e7309a353","Content-Type":"application/json"}),p=new class extends _{openup=e=>{const t=e.target;this._modalElement.querySelector(".modal__big-image").src=t.src,this._modalElement.querySelector(".modal__big-image").alt=t.alt,this._modalElement.querySelector(".modal__image-caption").textContent=t.alt,this.open()}}(".modal_type_big-image");new m(".modal_type_delete-card").setEventListeners();const b=new class{constructor({items:e,renderer:t},s){this._items=e,this._renderer=t,this._container=document.querySelector(s)}addItem(e){this._container.prepend(e)}clear(){this._container.innerHTML=""}renderItems(){this.clear(),this._items.forEach((e=>{this._renderer(e)}))}}((e=>{b.addItem(function(e){const s=new t({data:e,user:L,cardSelector:".cards__grid",handleCardClick:e=>{e.preventDefault();const t=e.target,s=t.src,r=t.alt;p.open(s,r),p.setEventListeners()},handleDeleteCard:e=>{u.open(),u.setAction((()=>h.deleteCard(e).then((e=>{s.deleteCard(),u.close()})).catch((e=>console.log(e)))))},handleLikes:e=>{s.isLiked()?h.removeLike(e).then((e=>{s.updateLikes(e.likes)})).catch((e=>console.log(e))):h.addLike(e).then((e=>{s.updateLikes(e.likes)})).catch((e=>console.log(e)))}});return s.generateCard()}(e))}),".cards__grid"),v=new class{constructor({name:e,job:t,avatar:s}){this._name=document.querySelector(`${e}`),this._job=document.querySelector(`${t}`),this._avatar=document.querySelector(`${s}`),this.setUserInfo=this.setUserInfo.bind(this)}getUserInfo(){const e={};return e.userName=this._name.textContent,e.userJob=this._job.textContent,e}setUserInfo(e){this._name.textContent=e.name,this._job.textContent=e.job}setUserAvatar({avatar:e}){this._avatar.style.backgroundImage=`url('${e}')`}}({name:".profile__title",about:".profile__subtitle",avatar:".profile__image"});h.getUserInfo().then((e=>{v.setUserInfo(e),L=e._id,v.setUserAvatar(e.avatar)})).catch((e=>console.log(e))),h.getInitialCards().then((e=>{b.renderItems(e)})).catch((e=>console.log(e)));const y=new m(".modal_type_edit",(()=>{v.setUserInfo(y.getInputValues()),y.close()}));y.setEventListeners(),r.addEventListener("click",(()=>{y.setInputValues(v.getUserInfo()),S.resetValidation(),y.open()}));const E=new m(".modal_type_avatar",(()=>{const e=E.getInputValues();setUserAvatar(e),E.close()}));E.setEventListeners(),i.addEventListener("click",(()=>{f.resetValidation(),E.open()}));const g=new m(".modal_type_add-card",(()=>{const e=g.getInputValues();b.addItem(generateCard(e)),g.close()}));g.setEventListeners(),a.addEventListener("click",(()=>{k.resetValidation(),g.open()}));const S=new s(c,n);S.enableValidation();const f=new s(c,o);f.enableValidation();const k=new s(c,l);let L;k.enableValidation()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,